// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagsInitParameters struct {

	// Specifies the tag key. The value can contain up to 36 characters.
	// Only letters, digits, hyphens (-), underscores (_), and Unicode characters from \u4e00 to \u9fff are allowed.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Specifies the tag value. The value can contain up to 43 characters.
	// Only letters, digits, periods (.), hyphens (-), and underscores (_), and Unicode characters from \u4e00 to \u9fff
	// are allowed.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// Specifies the tag key. The value can contain up to 36 characters.
	// Only letters, digits, hyphens (-), underscores (_), and Unicode characters from \u4e00 to \u9fff are allowed.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Specifies the tag value. The value can contain up to 43 characters.
	// Only letters, digits, periods (.), hyphens (-), and underscores (_), and Unicode characters from \u4e00 to \u9fff
	// are allowed.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// Specifies the tag key. The value can contain up to 36 characters.
	// Only letters, digits, hyphens (-), underscores (_), and Unicode characters from \u4e00 to \u9fff are allowed.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Specifies the tag value. The value can contain up to 43 characters.
	// Only letters, digits, periods (.), hyphens (-), and underscores (_), and Unicode characters from \u4e00 to \u9fff
	// are allowed.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TagsV1InitParameters struct {

	// Specifies an array of one or more predefined tags.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagsV1Observation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies an array of one or more predefined tags.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagsV1Parameters struct {

	// Specifies an array of one or more predefined tags.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

// TagsV1Spec defines the desired state of TagsV1
type TagsV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagsV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TagsV1InitParameters `json:"initProvider,omitempty"`
}

// TagsV1Status defines the observed state of TagsV1.
type TagsV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagsV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TagsV1 is the Schema for the TagsV1s API. Manages an TMS Tags resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TagsV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tags) || (has(self.initProvider) && has(self.initProvider.tags))",message="spec.forProvider.tags is a required parameter"
	Spec   TagsV1Spec   `json:"spec"`
	Status TagsV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagsV1List contains a list of TagsV1s
type TagsV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagsV1 `json:"items"`
}

// Repository type metadata.
var (
	TagsV1_Kind             = "TagsV1"
	TagsV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagsV1_Kind}.String()
	TagsV1_KindAPIVersion   = TagsV1_Kind + "." + CRDGroupVersion.String()
	TagsV1_GroupVersionKind = CRDGroupVersion.WithKind(TagsV1_Kind)
)

func init() {
	SchemeBuilder.Register(&TagsV1{}, &TagsV1List{})
}
