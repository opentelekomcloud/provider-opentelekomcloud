// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceTagsV1InitParameters struct {

	// Specifies project ID to which the managed resources belong.
	// Required if the resources are project level. Changing this will create a new resource.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the managed resource configuration.
	// The resources structure is documented below.
	Resources []ResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Specifies resource tags for batch management.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourceTagsV1Observation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies project ID to which the managed resources belong.
	// Required if the resources are project level. Changing this will create a new resource.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the managed resource configuration.
	// The resources structure is documented below.
	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	// Specifies resource tags for batch management.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourceTagsV1Parameters struct {

	// Specifies project ID to which the managed resources belong.
	// Required if the resources are project level. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the managed resource configuration.
	// The resources structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []ResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Specifies resource tags for batch management.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourcesInitParameters struct {

	// Specifies the resource ID.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the resource type.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type ResourcesObservation struct {

	// Specifies the resource ID.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the resource type.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type ResourcesParameters struct {

	// Specifies the resource ID.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Specifies the resource type.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

// ResourceTagsV1Spec defines the desired state of ResourceTagsV1
type ResourceTagsV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceTagsV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceTagsV1InitParameters `json:"initProvider,omitempty"`
}

// ResourceTagsV1Status defines the observed state of ResourceTagsV1.
type ResourceTagsV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceTagsV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ResourceTagsV1 is the Schema for the ResourceTagsV1s API. Manages an TMS Resource Tags resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ResourceTagsV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resources) || (has(self.initProvider) && has(self.initProvider.resources))",message="spec.forProvider.resources is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tags) || (has(self.initProvider) && has(self.initProvider.tags))",message="spec.forProvider.tags is a required parameter"
	Spec   ResourceTagsV1Spec   `json:"spec"`
	Status ResourceTagsV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceTagsV1List contains a list of ResourceTagsV1s
type ResourceTagsV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceTagsV1 `json:"items"`
}

// Repository type metadata.
var (
	ResourceTagsV1_Kind             = "ResourceTagsV1"
	ResourceTagsV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceTagsV1_Kind}.String()
	ResourceTagsV1_KindAPIVersion   = ResourceTagsV1_Kind + "." + CRDGroupVersion.String()
	ResourceTagsV1_GroupVersionKind = CRDGroupVersion.WithKind(ResourceTagsV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceTagsV1{}, &ResourceTagsV1List{})
}
