// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticRouteV3InitParameters struct {

	// Specifies the ID of the corresponding attachment.
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	// Specifies the destination of the static route.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies whether route is the black hole route, defaults to false.
	IsBlackhole *bool `json:"isBlackhole,omitempty" tf:"is_blackhole,omitempty"`

	// Specifies the ID of the route table to which the static route
	// belongs.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

type StaticRouteV3Observation struct {

	// Specifies the ID of the corresponding attachment.
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	// The creation time of the static route.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the destination of the static route.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether route is the black hole route, defaults to false.
	IsBlackhole *bool `json:"isBlackhole,omitempty" tf:"is_blackhole,omitempty"`

	// The region where the static route and related route table are located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the route table to which the static route
	// belongs.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// The current status of the static route.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The type of the static route.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The latest update time of the static route.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type StaticRouteV3Parameters struct {

	// Specifies the ID of the corresponding attachment.
	// +kubebuilder:validation:Optional
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	// Specifies the destination of the static route.
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies whether route is the black hole route, defaults to false.
	// +kubebuilder:validation:Optional
	IsBlackhole *bool `json:"isBlackhole,omitempty" tf:"is_blackhole,omitempty"`

	// Specifies the ID of the route table to which the static route
	// belongs.
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

// StaticRouteV3Spec defines the desired state of StaticRouteV3
type StaticRouteV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticRouteV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StaticRouteV3InitParameters `json:"initProvider,omitempty"`
}

// StaticRouteV3Status defines the observed state of StaticRouteV3.
type StaticRouteV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticRouteV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StaticRouteV3 is the Schema for the StaticRouteV3s API. Manages an Enterprise Router Static Route resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type StaticRouteV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routeTableId) || (has(self.initProvider) && has(self.initProvider.routeTableId))",message="spec.forProvider.routeTableId is a required parameter"
	Spec   StaticRouteV3Spec   `json:"spec"`
	Status StaticRouteV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRouteV3List contains a list of StaticRouteV3s
type StaticRouteV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticRouteV3 `json:"items"`
}

// Repository type metadata.
var (
	StaticRouteV3_Kind             = "StaticRouteV3"
	StaticRouteV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StaticRouteV3_Kind}.String()
	StaticRouteV3_KindAPIVersion   = StaticRouteV3_Kind + "." + CRDGroupVersion.String()
	StaticRouteV3_GroupVersionKind = CRDGroupVersion.WithKind(StaticRouteV3_Kind)
)

func init() {
	SchemeBuilder.Register(&StaticRouteV3{}, &StaticRouteV3List{})
}
