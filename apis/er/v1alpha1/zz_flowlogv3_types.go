// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlowLogV3InitParameters struct {

	// Specifies the description of the flow log.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the flow log function. The default value is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the ID of the ER instance to which the flow log belongs.
	// Changing this creates a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the LTS log group ID.
	// Changing this creates a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the storage type of flow log. The valid value is LTS.
	// Changing this creates a new resource.
	LogStoreType *string `json:"logStoreType,omitempty" tf:"log_store_type,omitempty"`

	// Specifies the LTS log stream ID.
	// Changing this creates a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the name of the flow log.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the resource ID to which the logs to be collected.
	// Changing this creates a new resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the resource type to which the logs to be collected.
	// The valid value is attachment.
	// Changing this creates a new resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type FlowLogV3Observation struct {

	// The creation time of the flow log.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the flow log.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the flow log function. The default value is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the ER instance to which the flow log belongs.
	// Changing this creates a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the LTS log group ID.
	// Changing this creates a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the storage type of flow log. The valid value is LTS.
	// Changing this creates a new resource.
	LogStoreType *string `json:"logStoreType,omitempty" tf:"log_store_type,omitempty"`

	// Specifies the LTS log stream ID.
	// Changing this creates a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the name of the flow log.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region of the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource ID to which the logs to be collected.
	// Changing this creates a new resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the resource type to which the logs to be collected.
	// The valid value is attachment.
	// Changing this creates a new resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// The current status of the flow log.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The latest update time of the flow log.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type FlowLogV3Parameters struct {

	// Specifies the description of the flow log.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the flow log function. The default value is true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the ID of the ER instance to which the flow log belongs.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the LTS log group ID.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the storage type of flow log. The valid value is LTS.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogStoreType *string `json:"logStoreType,omitempty" tf:"log_store_type,omitempty"`

	// Specifies the LTS log stream ID.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the name of the flow log.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the resource ID to which the logs to be collected.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the resource type to which the logs to be collected.
	// The valid value is attachment.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

// FlowLogV3Spec defines the desired state of FlowLogV3
type FlowLogV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlowLogV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FlowLogV3InitParameters `json:"initProvider,omitempty"`
}

// FlowLogV3Status defines the observed state of FlowLogV3.
type FlowLogV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlowLogV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FlowLogV3 is the Schema for the FlowLogV3s API. Manages an Enterprise Router Flow Log resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type FlowLogV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupId) || (has(self.initProvider) && has(self.initProvider.logGroupId))",message="spec.forProvider.logGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStoreType) || (has(self.initProvider) && has(self.initProvider.logStoreType))",message="spec.forProvider.logStoreType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreamId) || (has(self.initProvider) && has(self.initProvider.logStreamId))",message="spec.forProvider.logStreamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	Spec   FlowLogV3Spec   `json:"spec"`
	Status FlowLogV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlowLogV3List contains a list of FlowLogV3s
type FlowLogV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlowLogV3 `json:"items"`
}

// Repository type metadata.
var (
	FlowLogV3_Kind             = "FlowLogV3"
	FlowLogV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FlowLogV3_Kind}.String()
	FlowLogV3_KindAPIVersion   = FlowLogV3_Kind + "." + CRDGroupVersion.String()
	FlowLogV3_GroupVersionKind = CRDGroupVersion.WithKind(FlowLogV3_Kind)
)

func init() {
	SchemeBuilder.Register(&FlowLogV3{}, &FlowLogV3List{})
}
