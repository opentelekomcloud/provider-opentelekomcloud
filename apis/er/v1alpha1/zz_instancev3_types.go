// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceV3InitParameters struct {

	// The BGP AS number of the ER instance.
	// The valid value is range from 64,512 to 65534 or range from 4,200,000,000 to 4,294,967,294.
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Whether to automatically accept the creation of shared
	// attachment.
	// The default value is false.
	AutoAcceptSharedAttachments *bool `json:"autoAcceptSharedAttachments,omitempty" tf:"auto_accept_shared_attachments,omitempty"`

	// The availability zone list where the ER instance is located.
	// The maximum number of availability zone is two. Select two AZs to configure active-active deployment for high
	// availability which will ensure reliability and disaster recovery.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// The description of the ER instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the association of the default route table.
	// The default value is false.
	EnableDefaultAssociation *bool `json:"enableDefaultAssociation,omitempty" tf:"enable_default_association,omitempty"`

	// Whether to enable the propagation of the default route table.
	// The default value is false.
	EnableDefaultPropagation *bool `json:"enableDefaultPropagation,omitempty" tf:"enable_default_propagation,omitempty"`

	// The router name.
	// The name can contain 1 to 64 characters, only letters, digits, underscore (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Tags key/value pairs to associate with the instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InstanceV3Observation struct {

	// The BGP AS number of the ER instance.
	// The valid value is range from 64,512 to 65534 or range from 4,200,000,000 to 4,294,967,294.
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Whether to automatically accept the creation of shared
	// attachment.
	// The default value is false.
	AutoAcceptSharedAttachments *bool `json:"autoAcceptSharedAttachments,omitempty" tf:"auto_accept_shared_attachments,omitempty"`

	// The availability zone list where the ER instance is located.
	// The maximum number of availability zone is two. Select two AZs to configure active-active deployment for high
	// availability which will ensure reliability and disaster recovery.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// The creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the default association route table.
	DefaultAssociationRouteTableID *string `json:"defaultAssociationRouteTableId,omitempty" tf:"default_association_route_table_id,omitempty"`

	// The ID of the default propagation route table.
	DefaultPropagationRouteTableID *string `json:"defaultPropagationRouteTableId,omitempty" tf:"default_propagation_route_table_id,omitempty"`

	// The description of the ER instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the association of the default route table.
	// The default value is false.
	EnableDefaultAssociation *bool `json:"enableDefaultAssociation,omitempty" tf:"enable_default_association,omitempty"`

	// Whether to enable the propagation of the default route table.
	// The default value is false.
	EnableDefaultPropagation *bool `json:"enableDefaultPropagation,omitempty" tf:"enable_default_propagation,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The router name.
	// The name can contain 1 to 64 characters, only letters, digits, underscore (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region of the ER instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Current status of the router.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags key/value pairs to associate with the instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The latest update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type InstanceV3Parameters struct {

	// The BGP AS number of the ER instance.
	// The valid value is range from 64,512 to 65534 or range from 4,200,000,000 to 4,294,967,294.
	// +kubebuilder:validation:Optional
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Whether to automatically accept the creation of shared
	// attachment.
	// The default value is false.
	// +kubebuilder:validation:Optional
	AutoAcceptSharedAttachments *bool `json:"autoAcceptSharedAttachments,omitempty" tf:"auto_accept_shared_attachments,omitempty"`

	// The availability zone list where the ER instance is located.
	// The maximum number of availability zone is two. Select two AZs to configure active-active deployment for high
	// availability which will ensure reliability and disaster recovery.
	// +kubebuilder:validation:Optional
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// The description of the ER instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the association of the default route table.
	// The default value is false.
	// +kubebuilder:validation:Optional
	EnableDefaultAssociation *bool `json:"enableDefaultAssociation,omitempty" tf:"enable_default_association,omitempty"`

	// Whether to enable the propagation of the default route table.
	// The default value is false.
	// +kubebuilder:validation:Optional
	EnableDefaultPropagation *bool `json:"enableDefaultPropagation,omitempty" tf:"enable_default_propagation,omitempty"`

	// The router name.
	// The name can contain 1 to 64 characters, only letters, digits, underscore (_) and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Tags key/value pairs to associate with the instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// InstanceV3Spec defines the desired state of InstanceV3
type InstanceV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceV3InitParameters `json:"initProvider,omitempty"`
}

// InstanceV3Status defines the observed state of InstanceV3.
type InstanceV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceV3 is the Schema for the InstanceV3s API. Manages an Enterprise Router Instance resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type InstanceV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.asn) || (has(self.initProvider) && has(self.initProvider.asn))",message="spec.forProvider.asn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZones) || (has(self.initProvider) && has(self.initProvider.availabilityZones))",message="spec.forProvider.availabilityZones is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   InstanceV3Spec   `json:"spec"`
	Status InstanceV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV3List contains a list of InstanceV3s
type InstanceV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV3 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV3_Kind             = "InstanceV3"
	InstanceV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV3_Kind}.String()
	InstanceV3_KindAPIVersion   = InstanceV3_Kind + "." + CRDGroupVersion.String()
	InstanceV3_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV3_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV3{}, &InstanceV3List{})
}
