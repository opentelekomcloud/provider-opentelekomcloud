// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PropagationV3InitParameters struct {
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

type PropagationV3Observation struct {
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type PropagationV3Parameters struct {

	// +kubebuilder:validation:Optional
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

// PropagationV3Spec defines the desired state of PropagationV3
type PropagationV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PropagationV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PropagationV3InitParameters `json:"initProvider,omitempty"`
}

// PropagationV3Status defines the observed state of PropagationV3.
type PropagationV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PropagationV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PropagationV3 is the Schema for the PropagationV3s API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type PropagationV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.attachmentId) || (has(self.initProvider) && has(self.initProvider.attachmentId))",message="spec.forProvider.attachmentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routeTableId) || (has(self.initProvider) && has(self.initProvider.routeTableId))",message="spec.forProvider.routeTableId is a required parameter"
	Spec   PropagationV3Spec   `json:"spec"`
	Status PropagationV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PropagationV3List contains a list of PropagationV3s
type PropagationV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PropagationV3 `json:"items"`
}

// Repository type metadata.
var (
	PropagationV3_Kind             = "PropagationV3"
	PropagationV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PropagationV3_Kind}.String()
	PropagationV3_KindAPIVersion   = PropagationV3_Kind + "." + CRDGroupVersion.String()
	PropagationV3_GroupVersionKind = CRDGroupVersion.WithKind(PropagationV3_Kind)
)

func init() {
	SchemeBuilder.Register(&PropagationV3{}, &PropagationV3List{})
}
