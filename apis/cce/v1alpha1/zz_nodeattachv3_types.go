// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataVolumesInitParameters struct {
}

type DataVolumesObservation struct {

	// The resource ID in UUID format.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// The disk expansion parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// The ID of a KMS key. This is used to encrypt the volume.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will reset the node.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type DataVolumesParameters struct {
}

type GroupsInitParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will reset the node.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will reset the node.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will reset the node.
	VirtualSpaces []VirtualSpacesInitParameters `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type GroupsObservation struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will reset the node.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will reset the node.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will reset the node.
	VirtualSpaces []VirtualSpacesObservation `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type GroupsParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	SelectorNames []*string `json:"selectorNames" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	VirtualSpaces []VirtualSpacesParameters `json:"virtualSpaces" tf:"virtual_spaces,omitempty"`
}

type NodeAttachV3InitParameters struct {

	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will reset the node.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will reset the node.
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the docker data disk configurations.
	// This parameter is alternative to storage, and it's recommended to use storage.
	// The following is an
	// example:
	LvmConfig *string `json:"lvmConfig,omitempty" tf:"lvm_config,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will reset the node.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the Node Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// The value can be EulerOS 2.5, EulerOS 2.9, Ubuntu 22.04, or HCE OS 2.0. For more details,
	// please see documentation.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the private key of the in used key_pair. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in Active state.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this parameter will reset the node.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Specifies the disk initialization management parameter.
	// This parameter is alternative to lvm_config and supported for clusters of v1.15.11 and later.
	// Changing this parameter will reset the node.
	Storage []StorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the root volume.
	// Changing this parameter will reset the node.
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will reset the node. Each taint contains the following parameters:
	Taints []TaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeAttachV3Observation struct {

	// The name of the available partition (AZ).
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The configurations of the data disk.
	DataVolumes []DataVolumesObservation `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will reset the node.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// The flavor ID of the CCE node.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will reset the node.
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the docker data disk configurations.
	// This parameter is alternative to storage, and it's recommended to use storage.
	// The following is an
	// example:
	LvmConfig *string `json:"lvmConfig,omitempty" tf:"lvm_config,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will reset the node.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the Node Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// The value can be EulerOS 2.5, EulerOS 2.9, Ubuntu 22.04, or HCE OS 2.0. For more details,
	// please see documentation.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Private IP of the CCE node.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Public IP of the CCE node.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The region in which nodes is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The configuration of the system disk.
	RootVolume []RootVolumeObservation `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this parameter will reset the node.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Node status information.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the disk initialization management parameter.
	// This parameter is alternative to lvm_config and supported for clusters of v1.15.11 and later.
	// Changing this parameter will reset the node.
	Storage []StorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`

	// The ID of the subnet to which the NIC belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the root volume.
	// Changing this parameter will reset the node.
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will reset the node. Each taint contains the following parameters:
	Taints []TaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeAttachV3Parameters struct {

	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the docker data disk configurations.
	// This parameter is alternative to storage, and it's recommended to use storage.
	// The following is an
	// example:
	// +kubebuilder:validation:Optional
	LvmConfig *string `json:"lvmConfig,omitempty" tf:"lvm_config,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the Node Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// The value can be EulerOS 2.5, EulerOS 2.9, Ubuntu 22.04, or HCE OS 2.0. For more details,
	// please see documentation.
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the private key of the in used key_pair. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in Active state.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Specifies the disk initialization management parameter.
	// This parameter is alternative to lvm_config and supported for clusters of v1.15.11 and later.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Storage []StorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the root volume.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will reset the node. Each taint contains the following parameters:
	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type RootVolumeInitParameters struct {
}

type RootVolumeObservation struct {
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// The disk expansion parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The ID of a KMS key. This is used to encrypt the volume.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will reset the node.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type RootVolumeParameters struct {
}

type SelectorsInitParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will reset the node.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will reset the node.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will reset the node.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will reset the node.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will reset the node.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will reset the node.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectorsObservation struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will reset the node.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will reset the node.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will reset the node.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will reset the node.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will reset the node.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will reset the node.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectorsParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StorageInitParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will reset the node.
	Groups []GroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will reset the node.
	Selectors []SelectorsInitParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type StorageObservation struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will reset the node.
	Groups []GroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will reset the node.
	Selectors []SelectorsObservation `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type StorageParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Selectors []SelectorsParameters `json:"selectors" tf:"selectors,omitempty"`
}

type TaintsInitParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will reset the node.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will reset the node.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// reset the node.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsObservation struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will reset the node.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will reset the node.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// reset the node.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// reset the node.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type VirtualSpacesInitParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will reset the node.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will reset the node.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will reset the node.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type VirtualSpacesObservation struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will reset the node.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will reset the node.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will reset the node.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type VirtualSpacesParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	// +kubebuilder:validation:Optional
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will reset the node.
	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`
}

// NodeAttachV3Spec defines the desired state of NodeAttachV3
type NodeAttachV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeAttachV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodeAttachV3InitParameters `json:"initProvider,omitempty"`
}

// NodeAttachV3Status defines the observed state of NodeAttachV3.
type NodeAttachV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeAttachV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NodeAttachV3 is the Schema for the NodeAttachV3s API. Manages a CCE Cluster Node Attach resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NodeAttachV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.os) || (has(self.initProvider) && has(self.initProvider.os))",message="spec.forProvider.os is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverId) || (has(self.initProvider) && has(self.initProvider.serverId))",message="spec.forProvider.serverId is a required parameter"
	Spec   NodeAttachV3Spec   `json:"spec"`
	Status NodeAttachV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeAttachV3List contains a list of NodeAttachV3s
type NodeAttachV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeAttachV3 `json:"items"`
}

// Repository type metadata.
var (
	NodeAttachV3_Kind             = "NodeAttachV3"
	NodeAttachV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeAttachV3_Kind}.String()
	NodeAttachV3_KindAPIVersion   = NodeAttachV3_Kind + "." + CRDGroupVersion.String()
	NodeAttachV3_GroupVersionKind = CRDGroupVersion.WithKind(NodeAttachV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeAttachV3{}, &NodeAttachV3List{})
}
