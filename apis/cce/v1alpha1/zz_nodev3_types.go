/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeV3DataVolumesInitParameters struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/kms/v1alpha1.KeyV1
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Reference to a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDRef *v1.Reference `json:"kmsIdRef,omitempty" tf:"-"`

	// Selector for a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDSelector *v1.Selector `json:"kmsIdSelector,omitempty" tf:"-"`

	// Disk size in GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodeV3DataVolumesObservation struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Disk size in GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodeV3DataVolumesParameters struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/kms/v1alpha1.KeyV1
	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Reference to a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDRef *v1.Reference `json:"kmsIdRef,omitempty" tf:"-"`

	// Selector for a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDSelector *v1.Selector `json:"kmsIdSelector,omitempty" tf:"-"`

	// Disk size in GB.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Disk type.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type NodeV3InitParameters struct {

	// IAM agency name. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/identity/v1alpha1.AgencyV3
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractAgencyName()
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Reference to a AgencyV3 in identity to populate agencyName.
	// +kubebuilder:validation:Optional
	AgencyNameRef *v1.Reference `json:"agencyNameRef,omitempty" tf:"-"`

	// Selector for a AgencyV3 in identity to populate agencyName.
	// +kubebuilder:validation:Optional
	AgencyNameSelector *v1.Selector `json:"agencyNameSelector,omitempty" tf:"-"`

	// Node annotation, key/value pair format. Changing this parameter will create a new resource
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// specify the name of the available partition (AZ). Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Bandwidth billing type.
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Bandwidth size.
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	// Node's billing mode: The value is 0 (on demand). Changing this parameter will create a new resource.
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// ID of the cluster. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/cce/v1alpha1.ClusterV3
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a ClusterV3 in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a ClusterV3 in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Represents the data disk to be created. Changing this parameter will create a new resource.
	DataVolumes []NodeV3DataVolumesInitParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Available disk space of a single Docker container on the node using the device mapper.
	// Changing this parameter will create a new node.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// ConfigMap of the Docker data disk.
	// Changing this parameter will create a new node.
	DockerLvmConfigOverride *string `json:"dockerLvmConfigOverride,omitempty" tf:"docker_lvm_config_override,omitempty"`

	// Number of elastic IPs to be dynamically created.
	EIPCount *float64 `json:"eipCount,omitempty" tf:"eip_count,omitempty"`

	// List of existing elastic IP IDs.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// References to EIPV1 in vpc to populate eipIds.
	// +kubebuilder:validation:Optional
	EIPIdsRefs []v1.Reference `json:"eipIdsRefs,omitempty" tf:"-"`

	// Selector for a list of EIPV1 in vpc to populate eipIds.
	// +kubebuilder:validation:Optional
	EIPIdsSelector *v1.Selector `json:"eipIdsSelector,omitempty" tf:"-"`

	// Classification of cloud server specifications. Changing this parameter will create a new cluster resource.
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Node charging mode, 0 is on-demand charging. Changing this parameter will create a new cluster resource.
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the flavor id. Changing this parameter will create a new resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Elastic IP type.
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// Tags of a Kubernetes node, key/value pair format.
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Key pair name when logging in to select the key pair mode. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.KeypairV2
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Reference to a KeypairV2 in compute to populate keyPair.
	// +kubebuilder:validation:Optional
	KeyPairRef *v1.Reference `json:"keyPairRef,omitempty" tf:"-"`

	// Selector for a KeypairV2 in compute to populate keyPair.
	// +kubebuilder:validation:Optional
	KeyPairSelector *v1.Selector `json:"keyPairSelector,omitempty" tf:"-"`

	// Node tag, key/value pair format. Changing this parameter will create a new resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The maximum number of instances a node is allowed to create. Changing this parameter will create a new node resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Node Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Order ID, mandatory when the node payment type is the automatic payment package period type.
	// Changing this parameter will create a new cluster resource.
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Node OS. Changing this parameter will create a new resource.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Script required after installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Script required before installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Private IP of the CCE node. Changing this parameter will create a new resource.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The Product ID. Changing this parameter will create a new cluster resource.
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// The Public key. Changing this parameter will create a new cluster resource.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// It corresponds to the system disk related configuration. Changing this parameter will create a new resource.
	RootVolume []NodeV3RootVolumeInitParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Container runtime. Changing this parameter will create a new resource.
	// Use with high-caution, may trigger resource recreation. Options are:
	// docker - Docker
	// containerd - Containerd
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Bandwidth sharing type.
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// The ID of the subnet to which the NIC belongs. Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The field is alternative to labels, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Taints to created nodes to configure anti-affinity.
	Taints []NodeV3TaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeV3Observation struct {

	// IAM agency name. Changing this parameter will create a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Node annotation, key/value pair format. Changing this parameter will create a new resource
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// specify the name of the available partition (AZ). Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Bandwidth billing type.
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Bandwidth size.
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	// Node's billing mode: The value is 0 (on demand). Changing this parameter will create a new resource.
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// ID of the cluster. Changing this parameter will create a new resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Represents the data disk to be created. Changing this parameter will create a new resource.
	DataVolumes []NodeV3DataVolumesObservation `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Available disk space of a single Docker container on the node using the device mapper.
	// Changing this parameter will create a new node.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// ConfigMap of the Docker data disk.
	// Changing this parameter will create a new node.
	DockerLvmConfigOverride *string `json:"dockerLvmConfigOverride,omitempty" tf:"docker_lvm_config_override,omitempty"`

	// Number of elastic IPs to be dynamically created.
	EIPCount *float64 `json:"eipCount,omitempty" tf:"eip_count,omitempty"`

	// List of existing elastic IP IDs.
	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// Classification of cloud server specifications. Changing this parameter will create a new cluster resource.
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Node charging mode, 0 is on-demand charging. Changing this parameter will create a new cluster resource.
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the flavor id. Changing this parameter will create a new resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Elastic IP type.
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// Tags of a Kubernetes node, key/value pair format.
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Key pair name when logging in to select the key pair mode. Changing this parameter will create a new resource.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Node tag, key/value pair format. Changing this parameter will create a new resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The maximum number of instances a node is allowed to create. Changing this parameter will create a new node resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Node Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Order ID, mandatory when the node payment type is the automatic payment package period type.
	// Changing this parameter will create a new cluster resource.
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Node OS. Changing this parameter will create a new resource.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Script required after installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Script required before installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Private IP of the CCE node. Changing this parameter will create a new resource.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The Product ID. Changing this parameter will create a new cluster resource.
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Public IP of the CCE node.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The Public key. Changing this parameter will create a new cluster resource.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// It corresponds to the system disk related configuration. Changing this parameter will create a new resource.
	RootVolume []NodeV3RootVolumeObservation `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Container runtime. Changing this parameter will create a new resource.
	// Use with high-caution, may trigger resource recreation. Options are:
	// docker - Docker
	// containerd - Containerd
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// ID of the ECS where the node resides.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Bandwidth sharing type.
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// Node status information.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The ID of the subnet to which the NIC belongs. Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The field is alternative to labels, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Taints to created nodes to configure anti-affinity.
	Taints []NodeV3TaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeV3Parameters struct {

	// IAM agency name. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/identity/v1alpha1.AgencyV3
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractAgencyName()
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Reference to a AgencyV3 in identity to populate agencyName.
	// +kubebuilder:validation:Optional
	AgencyNameRef *v1.Reference `json:"agencyNameRef,omitempty" tf:"-"`

	// Selector for a AgencyV3 in identity to populate agencyName.
	// +kubebuilder:validation:Optional
	AgencyNameSelector *v1.Selector `json:"agencyNameSelector,omitempty" tf:"-"`

	// Node annotation, key/value pair format. Changing this parameter will create a new resource
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// specify the name of the available partition (AZ). Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Bandwidth billing type.
	// +kubebuilder:validation:Optional
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Bandwidth size.
	// +kubebuilder:validation:Optional
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	// Node's billing mode: The value is 0 (on demand). Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// ID of the cluster. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/cce/v1alpha1.ClusterV3
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a ClusterV3 in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a ClusterV3 in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Represents the data disk to be created. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DataVolumes []NodeV3DataVolumesParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Available disk space of a single Docker container on the node using the device mapper.
	// Changing this parameter will create a new node.
	// +kubebuilder:validation:Optional
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// ConfigMap of the Docker data disk.
	// Changing this parameter will create a new node.
	// +kubebuilder:validation:Optional
	DockerLvmConfigOverride *string `json:"dockerLvmConfigOverride,omitempty" tf:"docker_lvm_config_override,omitempty"`

	// Number of elastic IPs to be dynamically created.
	// +kubebuilder:validation:Optional
	EIPCount *float64 `json:"eipCount,omitempty" tf:"eip_count,omitempty"`

	// List of existing elastic IP IDs.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	// +kubebuilder:validation:Optional
	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// References to EIPV1 in vpc to populate eipIds.
	// +kubebuilder:validation:Optional
	EIPIdsRefs []v1.Reference `json:"eipIdsRefs,omitempty" tf:"-"`

	// Selector for a list of EIPV1 in vpc to populate eipIds.
	// +kubebuilder:validation:Optional
	EIPIdsSelector *v1.Selector `json:"eipIdsSelector,omitempty" tf:"-"`

	// Classification of cloud server specifications. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Node charging mode, 0 is on-demand charging. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the flavor id. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Elastic IP type.
	// +kubebuilder:validation:Optional
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// Tags of a Kubernetes node, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// Key pair name when logging in to select the key pair mode. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.KeypairV2
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Reference to a KeypairV2 in compute to populate keyPair.
	// +kubebuilder:validation:Optional
	KeyPairRef *v1.Reference `json:"keyPairRef,omitempty" tf:"-"`

	// Selector for a KeypairV2 in compute to populate keyPair.
	// +kubebuilder:validation:Optional
	KeyPairSelector *v1.Selector `json:"keyPairSelector,omitempty" tf:"-"`

	// Node tag, key/value pair format. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The maximum number of instances a node is allowed to create. Changing this parameter will create a new node resource.
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Node Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Order ID, mandatory when the node payment type is the automatic payment package period type.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Node OS. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Script required after installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Script required before installation. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Private IP of the CCE node. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The Product ID. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// The Public key. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// It corresponds to the system disk related configuration. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	RootVolume []NodeV3RootVolumeParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Container runtime. Changing this parameter will create a new resource.
	// Use with high-caution, may trigger resource recreation. Options are:
	// docker - Docker
	// containerd - Containerd
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Bandwidth sharing type.
	// +kubebuilder:validation:Optional
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// The ID of the subnet to which the NIC belongs. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The field is alternative to labels, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Taints to created nodes to configure anti-affinity.
	// +kubebuilder:validation:Optional
	Taints []NodeV3TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeV3RootVolumeInitParameters struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/kms/v1alpha1.KeyV1
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Reference to a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDRef *v1.Reference `json:"kmsIdRef,omitempty" tf:"-"`

	// Selector for a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDSelector *v1.Selector `json:"kmsIdSelector,omitempty" tf:"-"`

	// Disk size in GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodeV3RootVolumeObservation struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Disk size in GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Disk type.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodeV3RootVolumeParameters struct {

	// Disk expansion parameters.
	// Please use alternative parameter extend_params.
	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Disk expansion parameters. A list of strings which describes additional disk parameters.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// The Encryption KMS ID of the system volume. By default, it tries to get from env by OS_KMS_ID.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/kms/v1alpha1.KeyV1
	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Reference to a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDRef *v1.Reference `json:"kmsIdRef,omitempty" tf:"-"`

	// Selector for a KeyV1 in kms to populate kmsId.
	// +kubebuilder:validation:Optional
	KMSIDSelector *v1.Selector `json:"kmsIdSelector,omitempty" tf:"-"`

	// Disk size in GB.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Disk type.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type NodeV3TaintsInitParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the prefix of a key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters, including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeV3TaintsObservation struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the prefix of a key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters, including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeV3TaintsParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the prefix of a key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters, including letters, digits, hyphens (-), underscores (_), and periods (.).
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodeV3Spec defines the desired state of NodeV3
type NodeV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodeV3InitParameters `json:"initProvider,omitempty"`
}

// NodeV3Status defines the observed state of NodeV3.
type NodeV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NodeV3 is the Schema for the NodeV3s API. Manages a CCE Cluster Node resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NodeV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataVolumes) || (has(self.initProvider) && has(self.initProvider.dataVolumes))",message="spec.forProvider.dataVolumes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rootVolume) || (has(self.initProvider) && has(self.initProvider.rootVolume))",message="spec.forProvider.rootVolume is a required parameter"
	Spec   NodeV3Spec   `json:"spec"`
	Status NodeV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeV3List contains a list of NodeV3s
type NodeV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeV3 `json:"items"`
}

// Repository type metadata.
var (
	NodeV3_Kind             = "NodeV3"
	NodeV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeV3_Kind}.String()
	NodeV3_KindAPIVersion   = NodeV3_Kind + "." + CRDGroupVersion.String()
	NodeV3_GroupVersionKind = CRDGroupVersion.WithKind(NodeV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeV3{}, &NodeV3List{})
}
