// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DependencyVersionV2InitParameters struct {

	// Specifies the description of the custom dependency version.
	// The description can contain a maximum of 512 characters.
	// Changing this will create a new resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the file contents in the file stream format and must be a ZIP file encoded using Base64.
	// The size of the ZIP file cannot exceed 40 MB. For a larger file, upload it through OBS.
	// Either link or file must be specified.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Specifies the OBS bucket path where the dependency package is located.
	// The OBS object URL must be in ZIP format, such as
	// https://test-bucket.obs.eu-de.otc.t-systems.com/index.zip.
	// Either link or file must be specified.
	// Changing this will create a new resource.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// Specifies the name of the custom dependency package to which the version
	// belongs.
	// The name can contain a maximum of 96 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_), periods (.), and hyphens (-) are allowed.
	// Changing this will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the runtime of the custom dependency version.
	// The valid values are as follows:
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`
}

type DependencyVersionV2Observation struct {

	// The ID of the dependency package corresponding to the version.
	DependencyID *string `json:"dependencyId,omitempty" tf:"dependency_id,omitempty"`

	// Specifies the description of the custom dependency version.
	// The description can contain a maximum of 512 characters.
	// Changing this will create a new resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The temporary download link of a dependency file.
	DownloadLink *string `json:"downloadLink,omitempty" tf:"download_link,omitempty"`

	// The unique ID of the dependency.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Specifies the file contents in the file stream format and must be a ZIP file encoded using Base64.
	// The size of the ZIP file cannot exceed 40 MB. For a larger file, upload it through OBS.
	// Either link or file must be specified.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// The dependency file name.
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The resource ID, consists of dependency ID and version number, separated by a slash (/).
	// The format is <name>/<version>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the OBS bucket path where the dependency package is located.
	// The OBS object URL must be in ZIP format, such as
	// https://test-bucket.obs.eu-de.otc.t-systems.com/index.zip.
	// Either link or file must be specified.
	// Changing this will create a new resource.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// Specifies the name of the custom dependency package to which the version
	// belongs.
	// The name can contain a maximum of 96 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_), periods (.), and hyphens (-) are allowed.
	// Changing this will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The dependency owner, public indicates a public dependency.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Specifies the runtime of the custom dependency version.
	// The valid values are as follows:
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// The dependency size, in bytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The dependency package version.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type DependencyVersionV2Parameters struct {

	// Specifies the description of the custom dependency version.
	// The description can contain a maximum of 512 characters.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the file contents in the file stream format and must be a ZIP file encoded using Base64.
	// The size of the ZIP file cannot exceed 40 MB. For a larger file, upload it through OBS.
	// Either link or file must be specified.
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Specifies the OBS bucket path where the dependency package is located.
	// The OBS object URL must be in ZIP format, such as
	// https://test-bucket.obs.eu-de.otc.t-systems.com/index.zip.
	// Either link or file must be specified.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// Specifies the name of the custom dependency package to which the version
	// belongs.
	// The name can contain a maximum of 96 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_), periods (.), and hyphens (-) are allowed.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the runtime of the custom dependency version.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`
}

// DependencyVersionV2Spec defines the desired state of DependencyVersionV2
type DependencyVersionV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DependencyVersionV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DependencyVersionV2InitParameters `json:"initProvider,omitempty"`
}

// DependencyVersionV2Status defines the observed state of DependencyVersionV2.
type DependencyVersionV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DependencyVersionV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DependencyVersionV2 is the Schema for the DependencyVersionV2s API. Manages a custom dependency version within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DependencyVersionV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runtime) || (has(self.initProvider) && has(self.initProvider.runtime))",message="spec.forProvider.runtime is a required parameter"
	Spec   DependencyVersionV2Spec   `json:"spec"`
	Status DependencyVersionV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DependencyVersionV2List contains a list of DependencyVersionV2s
type DependencyVersionV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DependencyVersionV2 `json:"items"`
}

// Repository type metadata.
var (
	DependencyVersionV2_Kind             = "DependencyVersionV2"
	DependencyVersionV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DependencyVersionV2_Kind}.String()
	DependencyVersionV2_KindAPIVersion   = DependencyVersionV2_Kind + "." + CRDGroupVersion.String()
	DependencyVersionV2_GroupVersionKind = CRDGroupVersion.WithKind(DependencyVersionV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DependencyVersionV2{}, &DependencyVersionV2List{})
}
