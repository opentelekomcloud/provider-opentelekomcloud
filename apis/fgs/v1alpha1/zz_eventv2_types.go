// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventV2InitParameters struct {

	// Specifies the function event content.
	// The value is the base64 encoding of the JSON string.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the URN of the function to which the event belongs.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// Specifies the function event name.
	// The name can contain a maximum of 25, only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EventV2Observation struct {

	// Specifies the function event content.
	// The value is the base64 encoding of the JSON string.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the URN of the function to which the event belongs.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the function event name.
	// The name can contain a maximum of 25, only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which function graph resource is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The latest update time of the function event.
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type EventV2Parameters struct {

	// Specifies the function event content.
	// The value is the base64 encoding of the JSON string.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the URN of the function to which the event belongs.
	// +kubebuilder:validation:Optional
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// Specifies the function event name.
	// The name can contain a maximum of 25, only letters, digits, underscores (_) and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// EventV2Spec defines the desired state of EventV2
type EventV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EventV2InitParameters `json:"initProvider,omitempty"`
}

// EventV2Status defines the observed state of EventV2.
type EventV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EventV2 is the Schema for the EventV2s API. Manages an FGS Event resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type EventV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionUrn) || (has(self.initProvider) && has(self.initProvider.functionUrn))",message="spec.forProvider.functionUrn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EventV2Spec   `json:"spec"`
	Status EventV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventV2List contains a list of EventV2s
type EventV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventV2 `json:"items"`
}

// Repository type metadata.
var (
	EventV2_Kind             = "EventV2"
	EventV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventV2_Kind}.String()
	EventV2_KindAPIVersion   = EventV2_Kind + "." + CRDGroupVersion.String()
	EventV2_GroupVersionKind = CRDGroupVersion.WithKind(EventV2_Kind)
)

func init() {
	SchemeBuilder.Register(&EventV2{}, &EventV2List{})
}
