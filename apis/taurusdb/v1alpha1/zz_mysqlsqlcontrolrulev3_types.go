// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MySQLSQLControlRuleV3InitParameters struct {

	// Specifies the ID of the TaurusDB MySQL instance.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the maximum number of concurrent SQL statements.
	// Value: a non-negative integer.
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the ID of the TaurusDB MySQL node.
	// Changing this parameter will create a new resource.
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// Specifies the concurrency control rule of SQL statements. A rule can consist
	// of up to 128 keywords. The keywords are separated by tildes (~), for example, select~from~t1. The rule cannot contain
	// backslashes (), commas (,), or double tildes (~~). It cannot end with tildes (~).
	// Changing this parameter will create a new resource.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Specifies the SQL statement type.
	// Value options: SELECT, UPDATE, DELETE.
	// Changing this parameter will create a new resource.
	SQLType *string `json:"sqlType,omitempty" tf:"sql_type,omitempty"`
}

type MySQLSQLControlRuleV3Observation struct {

	// Indicates the resource ID which is formatted <instance_id>/<node_id>/<sql_type>/<pattern>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the TaurusDB MySQL instance.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the maximum number of concurrent SQL statements.
	// Value: a non-negative integer.
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the ID of the TaurusDB MySQL node.
	// Changing this parameter will create a new resource.
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// Specifies the concurrency control rule of SQL statements. A rule can consist
	// of up to 128 keywords. The keywords are separated by tildes (~), for example, select~from~t1. The rule cannot contain
	// backslashes (), commas (,), or double tildes (~~). It cannot end with tildes (~).
	// Changing this parameter will create a new resource.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Indicates the region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the SQL statement type.
	// Value options: SELECT, UPDATE, DELETE.
	// Changing this parameter will create a new resource.
	SQLType *string `json:"sqlType,omitempty" tf:"sql_type,omitempty"`
}

type MySQLSQLControlRuleV3Parameters struct {

	// Specifies the ID of the TaurusDB MySQL instance.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the maximum number of concurrent SQL statements.
	// Value: a non-negative integer.
	// +kubebuilder:validation:Optional
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the ID of the TaurusDB MySQL node.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// Specifies the concurrency control rule of SQL statements. A rule can consist
	// of up to 128 keywords. The keywords are separated by tildes (~), for example, select~from~t1. The rule cannot contain
	// backslashes (), commas (,), or double tildes (~~). It cannot end with tildes (~).
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Specifies the SQL statement type.
	// Value options: SELECT, UPDATE, DELETE.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SQLType *string `json:"sqlType,omitempty" tf:"sql_type,omitempty"`
}

// MySQLSQLControlRuleV3Spec defines the desired state of MySQLSQLControlRuleV3
type MySQLSQLControlRuleV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MySQLSQLControlRuleV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MySQLSQLControlRuleV3InitParameters `json:"initProvider,omitempty"`
}

// MySQLSQLControlRuleV3Status defines the observed state of MySQLSQLControlRuleV3.
type MySQLSQLControlRuleV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MySQLSQLControlRuleV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MySQLSQLControlRuleV3 is the Schema for the MySQLSQLControlRuleV3s API. Manages a TaurusDB MySQL SQL concurrency control rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type MySQLSQLControlRuleV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxConcurrency) || (has(self.initProvider) && has(self.initProvider.maxConcurrency))",message="spec.forProvider.maxConcurrency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeId) || (has(self.initProvider) && has(self.initProvider.nodeId))",message="spec.forProvider.nodeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pattern) || (has(self.initProvider) && has(self.initProvider.pattern))",message="spec.forProvider.pattern is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sqlType) || (has(self.initProvider) && has(self.initProvider.sqlType))",message="spec.forProvider.sqlType is a required parameter"
	Spec   MySQLSQLControlRuleV3Spec   `json:"spec"`
	Status MySQLSQLControlRuleV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLSQLControlRuleV3List contains a list of MySQLSQLControlRuleV3s
type MySQLSQLControlRuleV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MySQLSQLControlRuleV3 `json:"items"`
}

// Repository type metadata.
var (
	MySQLSQLControlRuleV3_Kind             = "MySQLSQLControlRuleV3"
	MySQLSQLControlRuleV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MySQLSQLControlRuleV3_Kind}.String()
	MySQLSQLControlRuleV3_KindAPIVersion   = MySQLSQLControlRuleV3_Kind + "." + CRDGroupVersion.String()
	MySQLSQLControlRuleV3_GroupVersionKind = CRDGroupVersion.WithKind(MySQLSQLControlRuleV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MySQLSQLControlRuleV3{}, &MySQLSQLControlRuleV3List{})
}
