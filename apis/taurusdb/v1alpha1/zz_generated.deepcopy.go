//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupStrategyInitParameters) DeepCopyInto(out *BackupStrategyInitParameters) {
	*out = *in
	if in.KeepDays != nil {
		in, out := &in.KeepDays, &out.KeepDays
		*out = new(float64)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupStrategyInitParameters.
func (in *BackupStrategyInitParameters) DeepCopy() *BackupStrategyInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupStrategyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupStrategyObservation) DeepCopyInto(out *BackupStrategyObservation) {
	*out = *in
	if in.KeepDays != nil {
		in, out := &in.KeepDays, &out.KeepDays
		*out = new(float64)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupStrategyObservation.
func (in *BackupStrategyObservation) DeepCopy() *BackupStrategyObservation {
	if in == nil {
		return nil
	}
	out := new(BackupStrategyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupStrategyParameters) DeepCopyInto(out *BackupStrategyParameters) {
	*out = *in
	if in.KeepDays != nil {
		in, out := &in.KeepDays, &out.KeepDays
		*out = new(float64)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupStrategyParameters.
func (in *BackupStrategyParameters) DeepCopy() *BackupStrategyParameters {
	if in == nil {
		return nil
	}
	out := new(BackupStrategyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatastoreInitParameters) DeepCopyInto(out *DatastoreInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatastoreInitParameters.
func (in *DatastoreInitParameters) DeepCopy() *DatastoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatastoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatastoreObservation) DeepCopyInto(out *DatastoreObservation) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatastoreObservation.
func (in *DatastoreObservation) DeepCopy() *DatastoreObservation {
	if in == nil {
		return nil
	}
	out := new(DatastoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatastoreParameters) DeepCopyInto(out *DatastoreParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatastoreParameters.
func (in *DatastoreParameters) DeepCopy() *DatastoreParameters {
	if in == nil {
		return nil
	}
	out := new(DatastoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeWeightInitParameters) DeepCopyInto(out *MasterNodeWeightInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeWeightInitParameters.
func (in *MasterNodeWeightInitParameters) DeepCopy() *MasterNodeWeightInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeWeightInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeWeightObservation) DeepCopyInto(out *MasterNodeWeightObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeWeightObservation.
func (in *MasterNodeWeightObservation) DeepCopy() *MasterNodeWeightObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodeWeightObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeWeightParameters) DeepCopyInto(out *MasterNodeWeightParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeWeightParameters.
func (in *MasterNodeWeightParameters) DeepCopy() *MasterNodeWeightParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeWeightParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3) DeepCopyInto(out *MySQLBackupV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3.
func (in *MySQLBackupV3) DeepCopy() *MySQLBackupV3 {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLBackupV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3InitParameters) DeepCopyInto(out *MySQLBackupV3InitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3InitParameters.
func (in *MySQLBackupV3InitParameters) DeepCopy() *MySQLBackupV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3List) DeepCopyInto(out *MySQLBackupV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLBackupV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3List.
func (in *MySQLBackupV3List) DeepCopy() *MySQLBackupV3List {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLBackupV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3Observation) DeepCopyInto(out *MySQLBackupV3Observation) {
	*out = *in
	if in.BeginTime != nil {
		in, out := &in.BeginTime, &out.BeginTime
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = make([]DatastoreObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.TakeUpTime != nil {
		in, out := &in.TakeUpTime, &out.TakeUpTime
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3Observation.
func (in *MySQLBackupV3Observation) DeepCopy() *MySQLBackupV3Observation {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3Parameters) DeepCopyInto(out *MySQLBackupV3Parameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3Parameters.
func (in *MySQLBackupV3Parameters) DeepCopy() *MySQLBackupV3Parameters {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3Spec) DeepCopyInto(out *MySQLBackupV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3Spec.
func (in *MySQLBackupV3Spec) DeepCopy() *MySQLBackupV3Spec {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLBackupV3Status) DeepCopyInto(out *MySQLBackupV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLBackupV3Status.
func (in *MySQLBackupV3Status) DeepCopy() *MySQLBackupV3Status {
	if in == nil {
		return nil
	}
	out := new(MySQLBackupV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3) DeepCopyInto(out *MySQLInstanceV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3.
func (in *MySQLInstanceV3) DeepCopy() *MySQLInstanceV3 {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLInstanceV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3DatastoreInitParameters) DeepCopyInto(out *MySQLInstanceV3DatastoreInitParameters) {
	*out = *in
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3DatastoreInitParameters.
func (in *MySQLInstanceV3DatastoreInitParameters) DeepCopy() *MySQLInstanceV3DatastoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3DatastoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3DatastoreObservation) DeepCopyInto(out *MySQLInstanceV3DatastoreObservation) {
	*out = *in
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3DatastoreObservation.
func (in *MySQLInstanceV3DatastoreObservation) DeepCopy() *MySQLInstanceV3DatastoreObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3DatastoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3DatastoreParameters) DeepCopyInto(out *MySQLInstanceV3DatastoreParameters) {
	*out = *in
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3DatastoreParameters.
func (in *MySQLInstanceV3DatastoreParameters) DeepCopy() *MySQLInstanceV3DatastoreParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3DatastoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3InitParameters) DeepCopyInto(out *MySQLInstanceV3InitParameters) {
	*out = *in
	if in.AvailabilityZoneMode != nil {
		in, out := &in.AvailabilityZoneMode, &out.AvailabilityZoneMode
		*out = new(string)
		**out = **in
	}
	if in.BackupStrategy != nil {
		in, out := &in.BackupStrategy, &out.BackupStrategy
		*out = make([]BackupStrategyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConfigurationID != nil {
		in, out := &in.ConfigurationID, &out.ConfigurationID
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = make([]MySQLInstanceV3DatastoreInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedResourceID != nil {
		in, out := &in.DedicatedResourceID, &out.DedicatedResourceID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.MasterAvailabilityZone != nil {
		in, out := &in.MasterAvailabilityZone, &out.MasterAvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ReadReplicas != nil {
		in, out := &in.ReadReplicas, &out.ReadReplicas
		*out = new(float64)
		**out = **in
	}
	if in.SecondsLevelMonitoringEnabled != nil {
		in, out := &in.SecondsLevelMonitoringEnabled, &out.SecondsLevelMonitoringEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecondsLevelMonitoringPeriod != nil {
		in, out := &in.SecondsLevelMonitoringPeriod, &out.SecondsLevelMonitoringPeriod
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.TableNameCaseSensitivity != nil {
		in, out := &in.TableNameCaseSensitivity, &out.TableNameCaseSensitivity
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VolumeSize != nil {
		in, out := &in.VolumeSize, &out.VolumeSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3InitParameters.
func (in *MySQLInstanceV3InitParameters) DeepCopy() *MySQLInstanceV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3List) DeepCopyInto(out *MySQLInstanceV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLInstanceV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3List.
func (in *MySQLInstanceV3List) DeepCopy() *MySQLInstanceV3List {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLInstanceV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3Observation) DeepCopyInto(out *MySQLInstanceV3Observation) {
	*out = *in
	if in.AvailabilityZoneMode != nil {
		in, out := &in.AvailabilityZoneMode, &out.AvailabilityZoneMode
		*out = new(string)
		**out = **in
	}
	if in.BackupStrategy != nil {
		in, out := &in.BackupStrategy, &out.BackupStrategy
		*out = make([]BackupStrategyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConfigurationID != nil {
		in, out := &in.ConfigurationID, &out.ConfigurationID
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DBUserName != nil {
		in, out := &in.DBUserName, &out.DBUserName
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = make([]MySQLInstanceV3DatastoreObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedResourceID != nil {
		in, out := &in.DedicatedResourceID, &out.DedicatedResourceID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MasterAvailabilityZone != nil {
		in, out := &in.MasterAvailabilityZone, &out.MasterAvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]NodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrivateDNSName != nil {
		in, out := &in.PrivateDNSName, &out.PrivateDNSName
		*out = new(string)
		**out = **in
	}
	if in.PrivateWriteIP != nil {
		in, out := &in.PrivateWriteIP, &out.PrivateWriteIP
		*out = new(string)
		**out = **in
	}
	if in.ReadReplicas != nil {
		in, out := &in.ReadReplicas, &out.ReadReplicas
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecondsLevelMonitoringEnabled != nil {
		in, out := &in.SecondsLevelMonitoringEnabled, &out.SecondsLevelMonitoringEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecondsLevelMonitoringPeriod != nil {
		in, out := &in.SecondsLevelMonitoringPeriod, &out.SecondsLevelMonitoringPeriod
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.TableNameCaseSensitivity != nil {
		in, out := &in.TableNameCaseSensitivity, &out.TableNameCaseSensitivity
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VolumeSize != nil {
		in, out := &in.VolumeSize, &out.VolumeSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3Observation.
func (in *MySQLInstanceV3Observation) DeepCopy() *MySQLInstanceV3Observation {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3Parameters) DeepCopyInto(out *MySQLInstanceV3Parameters) {
	*out = *in
	if in.AvailabilityZoneMode != nil {
		in, out := &in.AvailabilityZoneMode, &out.AvailabilityZoneMode
		*out = new(string)
		**out = **in
	}
	if in.BackupStrategy != nil {
		in, out := &in.BackupStrategy, &out.BackupStrategy
		*out = make([]BackupStrategyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConfigurationID != nil {
		in, out := &in.ConfigurationID, &out.ConfigurationID
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = make([]MySQLInstanceV3DatastoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedResourceID != nil {
		in, out := &in.DedicatedResourceID, &out.DedicatedResourceID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.MasterAvailabilityZone != nil {
		in, out := &in.MasterAvailabilityZone, &out.MasterAvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ReadReplicas != nil {
		in, out := &in.ReadReplicas, &out.ReadReplicas
		*out = new(float64)
		**out = **in
	}
	if in.SecondsLevelMonitoringEnabled != nil {
		in, out := &in.SecondsLevelMonitoringEnabled, &out.SecondsLevelMonitoringEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecondsLevelMonitoringPeriod != nil {
		in, out := &in.SecondsLevelMonitoringPeriod, &out.SecondsLevelMonitoringPeriod
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.TableNameCaseSensitivity != nil {
		in, out := &in.TableNameCaseSensitivity, &out.TableNameCaseSensitivity
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VolumeSize != nil {
		in, out := &in.VolumeSize, &out.VolumeSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3Parameters.
func (in *MySQLInstanceV3Parameters) DeepCopy() *MySQLInstanceV3Parameters {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3Spec) DeepCopyInto(out *MySQLInstanceV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3Spec.
func (in *MySQLInstanceV3Spec) DeepCopy() *MySQLInstanceV3Spec {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLInstanceV3Status) DeepCopyInto(out *MySQLInstanceV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLInstanceV3Status.
func (in *MySQLInstanceV3Status) DeepCopy() *MySQLInstanceV3Status {
	if in == nil {
		return nil
	}
	out := new(MySQLInstanceV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3) DeepCopyInto(out *MySQLProxyV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3.
func (in *MySQLProxyV3) DeepCopy() *MySQLProxyV3 {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLProxyV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3InitParameters) DeepCopyInto(out *MySQLProxyV3InitParameters) {
	*out = *in
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MasterNodeWeight != nil {
		in, out := &in.MasterNodeWeight, &out.MasterNodeWeight
		*out = make([]MasterNodeWeightInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.ProxyName != nil {
		in, out := &in.ProxyName, &out.ProxyName
		*out = new(string)
		**out = **in
	}
	if in.ReadonlyNodesWeight != nil {
		in, out := &in.ReadonlyNodesWeight, &out.ReadonlyNodesWeight
		*out = make([]ReadonlyNodesWeightInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3InitParameters.
func (in *MySQLProxyV3InitParameters) DeepCopy() *MySQLProxyV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3List) DeepCopyInto(out *MySQLProxyV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLProxyV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3List.
func (in *MySQLProxyV3List) DeepCopy() *MySQLProxyV3List {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLProxyV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3NodesInitParameters) DeepCopyInto(out *MySQLProxyV3NodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3NodesInitParameters.
func (in *MySQLProxyV3NodesInitParameters) DeepCopy() *MySQLProxyV3NodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3NodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3NodesObservation) DeepCopyInto(out *MySQLProxyV3NodesObservation) {
	*out = *in
	if in.AzCode != nil {
		in, out := &in.AzCode, &out.AzCode
		*out = new(string)
		**out = **in
	}
	if in.FrozenFlag != nil {
		in, out := &in.FrozenFlag, &out.FrozenFlag
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3NodesObservation.
func (in *MySQLProxyV3NodesObservation) DeepCopy() *MySQLProxyV3NodesObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3NodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3NodesParameters) DeepCopyInto(out *MySQLProxyV3NodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3NodesParameters.
func (in *MySQLProxyV3NodesParameters) DeepCopy() *MySQLProxyV3NodesParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3NodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3Observation) DeepCopyInto(out *MySQLProxyV3Observation) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MasterNodeWeight != nil {
		in, out := &in.MasterNodeWeight, &out.MasterNodeWeight
		*out = make([]MasterNodeWeightObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]MySQLProxyV3NodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.ProxyName != nil {
		in, out := &in.ProxyName, &out.ProxyName
		*out = new(string)
		**out = **in
	}
	if in.ReadonlyNodesWeight != nil {
		in, out := &in.ReadonlyNodesWeight, &out.ReadonlyNodesWeight
		*out = make([]ReadonlyNodesWeightObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3Observation.
func (in *MySQLProxyV3Observation) DeepCopy() *MySQLProxyV3Observation {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3Parameters) DeepCopyInto(out *MySQLProxyV3Parameters) {
	*out = *in
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MasterNodeWeight != nil {
		in, out := &in.MasterNodeWeight, &out.MasterNodeWeight
		*out = make([]MasterNodeWeightParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.ProxyName != nil {
		in, out := &in.ProxyName, &out.ProxyName
		*out = new(string)
		**out = **in
	}
	if in.ReadonlyNodesWeight != nil {
		in, out := &in.ReadonlyNodesWeight, &out.ReadonlyNodesWeight
		*out = make([]ReadonlyNodesWeightParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3Parameters.
func (in *MySQLProxyV3Parameters) DeepCopy() *MySQLProxyV3Parameters {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3Spec) DeepCopyInto(out *MySQLProxyV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3Spec.
func (in *MySQLProxyV3Spec) DeepCopy() *MySQLProxyV3Spec {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLProxyV3Status) DeepCopyInto(out *MySQLProxyV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLProxyV3Status.
func (in *MySQLProxyV3Status) DeepCopy() *MySQLProxyV3Status {
	if in == nil {
		return nil
	}
	out := new(MySQLProxyV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3) DeepCopyInto(out *MySQLQuotaV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3.
func (in *MySQLQuotaV3) DeepCopy() *MySQLQuotaV3 {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLQuotaV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3InitParameters) DeepCopyInto(out *MySQLQuotaV3InitParameters) {
	*out = *in
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectName != nil {
		in, out := &in.EnterpriseProjectName, &out.EnterpriseProjectName
		*out = new(string)
		**out = **in
	}
	if in.InstanceQuota != nil {
		in, out := &in.InstanceQuota, &out.InstanceQuota
		*out = new(float64)
		**out = **in
	}
	if in.RAMQuota != nil {
		in, out := &in.RAMQuota, &out.RAMQuota
		*out = new(float64)
		**out = **in
	}
	if in.VcpusQuota != nil {
		in, out := &in.VcpusQuota, &out.VcpusQuota
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3InitParameters.
func (in *MySQLQuotaV3InitParameters) DeepCopy() *MySQLQuotaV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3List) DeepCopyInto(out *MySQLQuotaV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLQuotaV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3List.
func (in *MySQLQuotaV3List) DeepCopy() *MySQLQuotaV3List {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLQuotaV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3Observation) DeepCopyInto(out *MySQLQuotaV3Observation) {
	*out = *in
	if in.AvailabilityInstanceQuota != nil {
		in, out := &in.AvailabilityInstanceQuota, &out.AvailabilityInstanceQuota
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityRAMQuota != nil {
		in, out := &in.AvailabilityRAMQuota, &out.AvailabilityRAMQuota
		*out = new(float64)
		**out = **in
	}
	if in.AvailabilityVcpusQuota != nil {
		in, out := &in.AvailabilityVcpusQuota, &out.AvailabilityVcpusQuota
		*out = new(float64)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectName != nil {
		in, out := &in.EnterpriseProjectName, &out.EnterpriseProjectName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceQuota != nil {
		in, out := &in.InstanceQuota, &out.InstanceQuota
		*out = new(float64)
		**out = **in
	}
	if in.RAMQuota != nil {
		in, out := &in.RAMQuota, &out.RAMQuota
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VcpusQuota != nil {
		in, out := &in.VcpusQuota, &out.VcpusQuota
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3Observation.
func (in *MySQLQuotaV3Observation) DeepCopy() *MySQLQuotaV3Observation {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3Parameters) DeepCopyInto(out *MySQLQuotaV3Parameters) {
	*out = *in
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectName != nil {
		in, out := &in.EnterpriseProjectName, &out.EnterpriseProjectName
		*out = new(string)
		**out = **in
	}
	if in.InstanceQuota != nil {
		in, out := &in.InstanceQuota, &out.InstanceQuota
		*out = new(float64)
		**out = **in
	}
	if in.RAMQuota != nil {
		in, out := &in.RAMQuota, &out.RAMQuota
		*out = new(float64)
		**out = **in
	}
	if in.VcpusQuota != nil {
		in, out := &in.VcpusQuota, &out.VcpusQuota
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3Parameters.
func (in *MySQLQuotaV3Parameters) DeepCopy() *MySQLQuotaV3Parameters {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3Spec) DeepCopyInto(out *MySQLQuotaV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3Spec.
func (in *MySQLQuotaV3Spec) DeepCopy() *MySQLQuotaV3Spec {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLQuotaV3Status) DeepCopyInto(out *MySQLQuotaV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLQuotaV3Status.
func (in *MySQLQuotaV3Status) DeepCopy() *MySQLQuotaV3Status {
	if in == nil {
		return nil
	}
	out := new(MySQLQuotaV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3) DeepCopyInto(out *MySQLSQLControlRuleV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3.
func (in *MySQLSQLControlRuleV3) DeepCopy() *MySQLSQLControlRuleV3 {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLSQLControlRuleV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3InitParameters) DeepCopyInto(out *MySQLSQLControlRuleV3InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(float64)
		**out = **in
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = new(string)
		**out = **in
	}
	if in.SQLType != nil {
		in, out := &in.SQLType, &out.SQLType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3InitParameters.
func (in *MySQLSQLControlRuleV3InitParameters) DeepCopy() *MySQLSQLControlRuleV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3List) DeepCopyInto(out *MySQLSQLControlRuleV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLSQLControlRuleV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3List.
func (in *MySQLSQLControlRuleV3List) DeepCopy() *MySQLSQLControlRuleV3List {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLSQLControlRuleV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3Observation) DeepCopyInto(out *MySQLSQLControlRuleV3Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(float64)
		**out = **in
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SQLType != nil {
		in, out := &in.SQLType, &out.SQLType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3Observation.
func (in *MySQLSQLControlRuleV3Observation) DeepCopy() *MySQLSQLControlRuleV3Observation {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3Parameters) DeepCopyInto(out *MySQLSQLControlRuleV3Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(float64)
		**out = **in
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = new(string)
		**out = **in
	}
	if in.SQLType != nil {
		in, out := &in.SQLType, &out.SQLType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3Parameters.
func (in *MySQLSQLControlRuleV3Parameters) DeepCopy() *MySQLSQLControlRuleV3Parameters {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3Spec) DeepCopyInto(out *MySQLSQLControlRuleV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3Spec.
func (in *MySQLSQLControlRuleV3Spec) DeepCopy() *MySQLSQLControlRuleV3Spec {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLSQLControlRuleV3Status) DeepCopyInto(out *MySQLSQLControlRuleV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLSQLControlRuleV3Status.
func (in *MySQLSQLControlRuleV3Status) DeepCopy() *MySQLSQLControlRuleV3Status {
	if in == nil {
		return nil
	}
	out := new(MySQLSQLControlRuleV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodesInitParameters) DeepCopyInto(out *NodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodesInitParameters.
func (in *NodesInitParameters) DeepCopy() *NodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodesObservation) DeepCopyInto(out *NodesObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateReadIP != nil {
		in, out := &in.PrivateReadIP, &out.PrivateReadIP
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodesObservation.
func (in *NodesObservation) DeepCopy() *NodesObservation {
	if in == nil {
		return nil
	}
	out := new(NodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodesParameters) DeepCopyInto(out *NodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodesParameters.
func (in *NodesParameters) DeepCopy() *NodesParameters {
	if in == nil {
		return nil
	}
	out := new(NodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyNodesWeightInitParameters) DeepCopyInto(out *ReadonlyNodesWeightInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyNodesWeightInitParameters.
func (in *ReadonlyNodesWeightInitParameters) DeepCopy() *ReadonlyNodesWeightInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyNodesWeightInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyNodesWeightObservation) DeepCopyInto(out *ReadonlyNodesWeightObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyNodesWeightObservation.
func (in *ReadonlyNodesWeightObservation) DeepCopy() *ReadonlyNodesWeightObservation {
	if in == nil {
		return nil
	}
	out := new(ReadonlyNodesWeightObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadonlyNodesWeightParameters) DeepCopyInto(out *ReadonlyNodesWeightParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadonlyNodesWeightParameters.
func (in *ReadonlyNodesWeightParameters) DeepCopy() *ReadonlyNodesWeightParameters {
	if in == nil {
		return nil
	}
	out := new(ReadonlyNodesWeightParameters)
	in.DeepCopyInto(out)
	return out
}
