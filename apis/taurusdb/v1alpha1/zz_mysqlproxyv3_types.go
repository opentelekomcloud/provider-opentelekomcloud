// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MasterNodeWeightInitParameters struct {

	// Specifies the ID of the node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MasterNodeWeightObservation struct {

	// Specifies the ID of the node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MasterNodeWeightParameters struct {

	// Specifies the ID of the node.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

type MySQLProxyV3InitParameters struct {

	// Specifies the flavor of the proxy.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the ID of the TaurusDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the read weight of the master node.
	// The master_node_weight structure is documented below.
	MasterNodeWeight []MasterNodeWeightInitParameters `json:"masterNodeWeight,omitempty" tf:"master_node_weight,omitempty"`

	// Specifies the node count of the proxy.
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// readwrite: read and write.
	// readonly: read-only.
	ProxyMode *string `json:"proxyMode,omitempty" tf:"proxy_mode,omitempty"`

	// Specifies the name of the proxy. The name consists of 4 to 64 characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName *string `json:"proxyName,omitempty" tf:"proxy_name,omitempty"`

	// Specifies the read weight of the read-only nodes.
	// The readonly_nodes_weight structure is documented below.
	ReadonlyNodesWeight []ReadonlyNodesWeightInitParameters `json:"readonlyNodesWeight,omitempty" tf:"readonly_nodes_weight,omitempty"`
}

type MySQLProxyV3NodesInitParameters struct {
}

type MySQLProxyV3NodesObservation struct {

	// Indicates the proxy node availability zone.
	AzCode *string `json:"azCode,omitempty" tf:"az_code,omitempty"`

	// Indicates whether the proxy node is frozen. The values can be:
	FrozenFlag *float64 `json:"frozenFlag,omitempty" tf:"frozen_flag,omitempty"`

	// Specifies the ID of the node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the proxy node name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the proxy node role. The values can be:
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Indicates the status of the proxy.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MySQLProxyV3NodesParameters struct {
}

type MySQLProxyV3Observation struct {

	// Indicates the address of the proxy.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Specifies the flavor of the proxy.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Indicates the resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the TaurusDB MySQL instance. Changing this parameter
	// will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the read weight of the master node.
	// The master_node_weight structure is documented below.
	MasterNodeWeight []MasterNodeWeightObservation `json:"masterNodeWeight,omitempty" tf:"master_node_weight,omitempty"`

	// Specifies the node count of the proxy.
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Indicates the node information of the proxy.
	Nodes []MySQLProxyV3NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Indicates the port of the proxy.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// readwrite: read and write.
	// readonly: read-only.
	ProxyMode *string `json:"proxyMode,omitempty" tf:"proxy_mode,omitempty"`

	// Specifies the name of the proxy. The name consists of 4 to 64 characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	ProxyName *string `json:"proxyName,omitempty" tf:"proxy_name,omitempty"`

	// Specifies the read weight of the read-only nodes.
	// The readonly_nodes_weight structure is documented below.
	ReadonlyNodesWeight []ReadonlyNodesWeightObservation `json:"readonlyNodesWeight,omitempty" tf:"readonly_nodes_weight,omitempty"`

	// Indicates the region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the status of the proxy.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MySQLProxyV3Parameters struct {

	// Specifies the flavor of the proxy.
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the ID of the TaurusDB MySQL instance. Changing this parameter
	// will create a new resource.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the read weight of the master node.
	// The master_node_weight structure is documented below.
	// +kubebuilder:validation:Optional
	MasterNodeWeight []MasterNodeWeightParameters `json:"masterNodeWeight,omitempty" tf:"master_node_weight,omitempty"`

	// Specifies the node count of the proxy.
	// +kubebuilder:validation:Optional
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the type of the proxy. Changing this creates a new resource.
	// Value options:
	// readwrite: read and write.
	// readonly: read-only.
	// +kubebuilder:validation:Optional
	ProxyMode *string `json:"proxyMode,omitempty" tf:"proxy_mode,omitempty"`

	// Specifies the name of the proxy. The name consists of 4 to 64 characters and
	// starts with a letter. It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
	// +kubebuilder:validation:Optional
	ProxyName *string `json:"proxyName,omitempty" tf:"proxy_name,omitempty"`

	// Specifies the read weight of the read-only nodes.
	// The readonly_nodes_weight structure is documented below.
	// +kubebuilder:validation:Optional
	ReadonlyNodesWeight []ReadonlyNodesWeightParameters `json:"readonlyNodesWeight,omitempty" tf:"readonly_nodes_weight,omitempty"`
}

type ReadonlyNodesWeightInitParameters struct {

	// Specifies the ID of the node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ReadonlyNodesWeightObservation struct {

	// Specifies the ID of the node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ReadonlyNodesWeightParameters struct {

	// Specifies the ID of the node.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Specifies the weight assigned to the node.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// MySQLProxyV3Spec defines the desired state of MySQLProxyV3
type MySQLProxyV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MySQLProxyV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MySQLProxyV3InitParameters `json:"initProvider,omitempty"`
}

// MySQLProxyV3Status defines the observed state of MySQLProxyV3.
type MySQLProxyV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MySQLProxyV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MySQLProxyV3 is the Schema for the MySQLProxyV3s API. Manages a TaurusDB MySQL proxy resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type MySQLProxyV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeNum) || (has(self.initProvider) && has(self.initProvider.nodeNum))",message="spec.forProvider.nodeNum is a required parameter"
	Spec   MySQLProxyV3Spec   `json:"spec"`
	Status MySQLProxyV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLProxyV3List contains a list of MySQLProxyV3s
type MySQLProxyV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MySQLProxyV3 `json:"items"`
}

// Repository type metadata.
var (
	MySQLProxyV3_Kind             = "MySQLProxyV3"
	MySQLProxyV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MySQLProxyV3_Kind}.String()
	MySQLProxyV3_KindAPIVersion   = MySQLProxyV3_Kind + "." + CRDGroupVersion.String()
	MySQLProxyV3_GroupVersionKind = CRDGroupVersion.WithKind(MySQLProxyV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MySQLProxyV3{}, &MySQLProxyV3List{})
}
