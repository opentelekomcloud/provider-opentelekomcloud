// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatastoreInitParameters struct {
}

type DatastoreObservation struct {

	// Indicates the database engine.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the database version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreParameters struct {
}

type MySQLBackupV3InitParameters struct {

	// Specifies the description of the backup.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of the TaurusDb MySQL instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the name of the backup. It must start with a letter and consist of
	// 4 to 64 characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MySQLBackupV3Observation struct {

	// Indicates the backup start time in the yyyy-mm-ddThh:mm:ssZ format.
	BeginTime *string `json:"beginTime,omitempty" tf:"begin_time,omitempty"`

	// Indicates the database information.
	Datastore []DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Specifies the description of the backup.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates the backup end time in the yyyy-mm-ddThh:mm:ssZ format.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the TaurusDb MySQL instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the name of the backup. It must start with a letter and consist of
	// 4 to 64 characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the backup size in MB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Indicates the backup duration in minutes.
	TakeUpTime *float64 `json:"takeUpTime,omitempty" tf:"take_up_time,omitempty"`
}

type MySQLBackupV3Parameters struct {

	// Specifies the description of the backup.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of the TaurusDb MySQL instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the name of the backup. It must start with a letter and consist of
	// 4 to 64 characters. Only letters (case-sensitive), digits, hyphens (-), and underscores (_) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// MySQLBackupV3Spec defines the desired state of MySQLBackupV3
type MySQLBackupV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MySQLBackupV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MySQLBackupV3InitParameters `json:"initProvider,omitempty"`
}

// MySQLBackupV3Status defines the observed state of MySQLBackupV3.
type MySQLBackupV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MySQLBackupV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MySQLBackupV3 is the Schema for the MySQLBackupV3s API. Manages an TaurusDb mysql backup resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type MySQLBackupV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MySQLBackupV3Spec   `json:"spec"`
	Status MySQLBackupV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLBackupV3List contains a list of MySQLBackupV3s
type MySQLBackupV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MySQLBackupV3 `json:"items"`
}

// Repository type metadata.
var (
	MySQLBackupV3_Kind             = "MySQLBackupV3"
	MySQLBackupV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MySQLBackupV3_Kind}.String()
	MySQLBackupV3_KindAPIVersion   = MySQLBackupV3_Kind + "." + CRDGroupVersion.String()
	MySQLBackupV3_GroupVersionKind = CRDGroupVersion.WithKind(MySQLBackupV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MySQLBackupV3{}, &MySQLBackupV3List{})
}
