// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomAuthorizerV2InitParameters struct {

	// Specifies the uniform function URN of the function graph resource.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// Specifies an ID of the APIGW dedicated instance to which the
	// custom authorizer belongs to.
	// Changing this will create a new custom authorizer resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies an array of one or more parameter identities of the custom authorizer.
	// The object structure is documented below.
	Identity []IdentityInitParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies whether to send the body.
	IsBodySend *bool `json:"isBodySend,omitempty" tf:"is_body_send,omitempty"`

	// Specifies the name of the custom authorizer.
	// The custom authorizer name consists of 3 to 64 characters, starting with a letter.
	// Only letters, digits and underscores _ are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the maximum cache age.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Specifies the custom authorize type.
	// The valid values are FRONTEND and BACKEND. Defaults to FRONTEND.
	// Changing this will create a new custom authorizer resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the user data, which can contain a maximum of 2,048 characters.
	// The user data is used by APIGW to invoke the specified authentication function when accessing the backend service.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type CustomAuthorizerV2Observation struct {

	// The creation time of the custom authorizer.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the uniform function URN of the function graph resource.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// Specifies an ID of the APIGW dedicated instance to which the
	// custom authorizer belongs to.
	// Changing this will create a new custom authorizer resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// ID of the custom authorizer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies an array of one or more parameter identities of the custom authorizer.
	// The object structure is documented below.
	Identity []IdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies whether to send the body.
	IsBodySend *bool `json:"isBodySend,omitempty" tf:"is_body_send,omitempty"`

	// Specifies the name of the custom authorizer.
	// The custom authorizer name consists of 3 to 64 characters, starting with a letter.
	// Only letters, digits and underscores _ are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the custom authorizer resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the maximum cache age.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Specifies the custom authorize type.
	// The valid values are FRONTEND and BACKEND. Defaults to FRONTEND.
	// Changing this will create a new custom authorizer resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the user data, which can contain a maximum of 2,048 characters.
	// The user data is used by APIGW to invoke the specified authentication function when accessing the backend service.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type CustomAuthorizerV2Parameters struct {

	// Specifies the uniform function URN of the function graph resource.
	// +kubebuilder:validation:Optional
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`

	// Specifies an ID of the APIGW dedicated instance to which the
	// custom authorizer belongs to.
	// Changing this will create a new custom authorizer resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies an array of one or more parameter identities of the custom authorizer.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies whether to send the body.
	// +kubebuilder:validation:Optional
	IsBodySend *bool `json:"isBodySend,omitempty" tf:"is_body_send,omitempty"`

	// Specifies the name of the custom authorizer.
	// The custom authorizer name consists of 3 to 64 characters, starting with a letter.
	// Only letters, digits and underscores _ are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the maximum cache age.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Specifies the custom authorize type.
	// The valid values are FRONTEND and BACKEND. Defaults to FRONTEND.
	// Changing this will create a new custom authorizer resource.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the user data, which can contain a maximum of 2,048 characters.
	// The user data is used by APIGW to invoke the specified authentication function when accessing the backend service.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type IdentityInitParameters struct {

	// Specifies the parameter location, which support HEADER and QUERY.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies the name of the parameter to be verified.
	// The parameter includes front-end and back-end parameters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the parameter verification expression.
	// If omitted, the custom authorizer will not perform verification.
	// The valid value is range form 1 to 2,048.
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

type IdentityObservation struct {

	// Specifies the parameter location, which support HEADER and QUERY.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies the name of the parameter to be verified.
	// The parameter includes front-end and back-end parameters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the parameter verification expression.
	// If omitted, the custom authorizer will not perform verification.
	// The valid value is range form 1 to 2,048.
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

type IdentityParameters struct {

	// Specifies the parameter location, which support HEADER and QUERY.
	// +kubebuilder:validation:Optional
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies the name of the parameter to be verified.
	// The parameter includes front-end and back-end parameters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the parameter verification expression.
	// If omitted, the custom authorizer will not perform verification.
	// The valid value is range form 1 to 2,048.
	// +kubebuilder:validation:Optional
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

// CustomAuthorizerV2Spec defines the desired state of CustomAuthorizerV2
type CustomAuthorizerV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomAuthorizerV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomAuthorizerV2InitParameters `json:"initProvider,omitempty"`
}

// CustomAuthorizerV2Status defines the observed state of CustomAuthorizerV2.
type CustomAuthorizerV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomAuthorizerV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomAuthorizerV2 is the Schema for the CustomAuthorizerV2s API. Manages a APIGW Custom Authorizer resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type CustomAuthorizerV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionUrn) || (has(self.initProvider) && has(self.initProvider.functionUrn))",message="spec.forProvider.functionUrn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CustomAuthorizerV2Spec   `json:"spec"`
	Status CustomAuthorizerV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomAuthorizerV2List contains a list of CustomAuthorizerV2s
type CustomAuthorizerV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomAuthorizerV2 `json:"items"`
}

// Repository type metadata.
var (
	CustomAuthorizerV2_Kind             = "CustomAuthorizerV2"
	CustomAuthorizerV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomAuthorizerV2_Kind}.String()
	CustomAuthorizerV2_KindAPIVersion   = CustomAuthorizerV2_Kind + "." + CRDGroupVersion.String()
	CustomAuthorizerV2_GroupVersionKind = CRDGroupVersion.WithKind(CustomAuthorizerV2_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomAuthorizerV2{}, &CustomAuthorizerV2List{})
}
