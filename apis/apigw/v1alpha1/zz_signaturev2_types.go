// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SignatureV2InitParameters struct {

	// Specifies the signature algorithm.
	// This parameter is required and only available when signature type is aes.
	// The valid values are as follows:
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Specifies the ID of the dedicated gateway to which the signature
	// belongs. Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the signature key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Specifies the signature name.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores _ are
	// allowed. The name must start with an English letter or Chinese character.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the signature secret.
	// If not specified, the secret will automatically generated. The auto-generation is only supported on first creation.
	// Changing this will create a new resource.
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// Specifies the type of signature.
	// The valid values are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SignatureV2Observation struct {

	// Specifies the signature algorithm.
	// This parameter is required and only available when signature type is aes.
	// The valid values are as follows:
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The creation time of the signature.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the ID of the dedicated gateway to which the signature
	// belongs. Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The ID of the signature.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the signature key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Specifies the signature name.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores _ are
	// allowed. The name must start with an English letter or Chinese character.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region where the signature is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the type of signature.
	// The valid values are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The latest update time of the signature.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SignatureV2Parameters struct {

	// Specifies the signature algorithm.
	// This parameter is required and only available when signature type is aes.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Specifies the ID of the dedicated gateway to which the signature
	// belongs. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the signature key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Specifies the signature name.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores _ are
	// allowed. The name must start with an English letter or Chinese character.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the signature secret.
	// If not specified, the secret will automatically generated. The auto-generation is only supported on first creation.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// Specifies the type of signature.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// SignatureV2Spec defines the desired state of SignatureV2
type SignatureV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SignatureV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SignatureV2InitParameters `json:"initProvider,omitempty"`
}

// SignatureV2Status defines the observed state of SignatureV2.
type SignatureV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SignatureV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SignatureV2 is the Schema for the SignatureV2s API. Manages a APIGW Signature resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SignatureV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   SignatureV2Spec   `json:"spec"`
	Status SignatureV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SignatureV2List contains a list of SignatureV2s
type SignatureV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SignatureV2 `json:"items"`
}

// Repository type metadata.
var (
	SignatureV2_Kind             = "SignatureV2"
	SignatureV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SignatureV2_Kind}.String()
	SignatureV2_KindAPIVersion   = SignatureV2_Kind + "." + CRDGroupVersion.String()
	SignatureV2_GroupVersionKind = CRDGroupVersion.WithKind(SignatureV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SignatureV2{}, &SignatureV2List{})
}
