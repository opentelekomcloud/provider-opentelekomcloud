// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CceConfigInitParameters struct {

	// Specifies the CCE cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the service label key.
	LabelKey *string `json:"labelKey,omitempty" tf:"label_key,omitempty"`

	// Specifies the service label value.
	LabelValue *string `json:"labelValue,omitempty" tf:"label_value,omitempty"`

	// Specifies the namespace, such as the default namespace for CCE cluster: default.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	WorkloadName *string `json:"workloadName,omitempty" tf:"workload_name,omitempty"`

	// Specifies the workload type.
	WorkloadType *string `json:"workloadType,omitempty" tf:"workload_type,omitempty"`
}

type CceConfigObservation struct {

	// Specifies the CCE cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the service label key.
	LabelKey *string `json:"labelKey,omitempty" tf:"label_key,omitempty"`

	// Specifies the service label value.
	LabelValue *string `json:"labelValue,omitempty" tf:"label_value,omitempty"`

	// Specifies the namespace, such as the default namespace for CCE cluster: default.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	WorkloadName *string `json:"workloadName,omitempty" tf:"workload_name,omitempty"`

	// Specifies the workload type.
	WorkloadType *string `json:"workloadType,omitempty" tf:"workload_type,omitempty"`
}

type CceConfigParameters struct {

	// Specifies the CCE cluster ID.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Specifies the service label key.
	// +kubebuilder:validation:Optional
	LabelKey *string `json:"labelKey,omitempty" tf:"label_key,omitempty"`

	// Specifies the service label value.
	// +kubebuilder:validation:Optional
	LabelValue *string `json:"labelValue,omitempty" tf:"label_value,omitempty"`

	// Specifies the namespace, such as the default namespace for CCE cluster: default.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	// +kubebuilder:validation:Optional
	WorkloadName *string `json:"workloadName,omitempty" tf:"workload_name,omitempty"`

	// Specifies the workload type.
	// +kubebuilder:validation:Optional
	WorkloadType *string `json:"workloadType" tf:"workload_type,omitempty"`
}

type CseConfigInitParameters struct {

	// The ID of the channel.
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// The ID of the channel.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type CseConfigObservation struct {

	// The ID of the channel.
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// The ID of the channel.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type CseConfigParameters struct {

	// The ID of the channel.
	// +kubebuilder:validation:Optional
	EngineID *string `json:"engineId" tf:"engine_id,omitempty"`

	// The ID of the channel.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId" tf:"service_id,omitempty"`
}

type HealthCheckInitParameters struct {

	// Specifies whether to enable two-way authentication.
	// Defaults to false.
	EnableClientSSL *bool `json:"enableClientSsl,omitempty" tf:"enable_client_ssl,omitempty"`

	// Specifies the response codes for determining a successful HTTP response.
	// The valid value ranges from 100 to 599 and the valid formats are as follows:
	HTTPCodes *string `json:"httpCodes,omitempty" tf:"http_codes,omitempty"`

	// Specifies the interval between consecutive checks, in second.
	// The valid value ranges from 1 to 300.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Specifies the request method for health check.
	// The valid values are GET and HEAD.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Specifies the destination path for health checks.
	// Required if the protocol is HTTP or HTTPS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the destination host port for health check.
	// The valid value ranges from 0 to 65,535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the microservice for performing health check on backend servers.
	// The valid values are TCP, HTTP and HTTPS, defaults to TCP.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the status of health check.
	// The valid values are as follows:
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the unhealthy threshold, which refers to the number of consecutive
	// failed checks required for a backend server to be considered unhealthy.
	// The valid value ranges from 1 to 10.
	ThresholdAbnormal *float64 `json:"thresholdAbnormal,omitempty" tf:"threshold_abnormal,omitempty"`

	// Specifies the healthy threshold, which refers to the number of consecutive
	// successful checks required for a backend server to be considered healthy.
	// The valid value ranges from 1 to 10.
	ThresholdNormal *float64 `json:"thresholdNormal,omitempty" tf:"threshold_normal,omitempty"`

	// Specifies the timeout for determining whether a health check fails, in second.
	// The value must be less than the value of the time interval.
	// The valid value ranges from 1 to 30.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type HealthCheckObservation struct {

	// Specifies whether to enable two-way authentication.
	// Defaults to false.
	EnableClientSSL *bool `json:"enableClientSsl,omitempty" tf:"enable_client_ssl,omitempty"`

	// Specifies the response codes for determining a successful HTTP response.
	// The valid value ranges from 100 to 599 and the valid formats are as follows:
	HTTPCodes *string `json:"httpCodes,omitempty" tf:"http_codes,omitempty"`

	// Specifies the interval between consecutive checks, in second.
	// The valid value ranges from 1 to 300.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Specifies the request method for health check.
	// The valid values are GET and HEAD.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Specifies the destination path for health checks.
	// Required if the protocol is HTTP or HTTPS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the destination host port for health check.
	// The valid value ranges from 0 to 65,535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the microservice for performing health check on backend servers.
	// The valid values are TCP, HTTP and HTTPS, defaults to TCP.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the status of health check.
	// The valid values are as follows:
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the unhealthy threshold, which refers to the number of consecutive
	// failed checks required for a backend server to be considered unhealthy.
	// The valid value ranges from 1 to 10.
	ThresholdAbnormal *float64 `json:"thresholdAbnormal,omitempty" tf:"threshold_abnormal,omitempty"`

	// Specifies the healthy threshold, which refers to the number of consecutive
	// successful checks required for a backend server to be considered healthy.
	// The valid value ranges from 1 to 10.
	ThresholdNormal *float64 `json:"thresholdNormal,omitempty" tf:"threshold_normal,omitempty"`

	// Specifies the timeout for determining whether a health check fails, in second.
	// The value must be less than the value of the time interval.
	// The valid value ranges from 1 to 30.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type HealthCheckParameters struct {

	// Specifies whether to enable two-way authentication.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	EnableClientSSL *bool `json:"enableClientSsl,omitempty" tf:"enable_client_ssl,omitempty"`

	// Specifies the response codes for determining a successful HTTP response.
	// The valid value ranges from 100 to 599 and the valid formats are as follows:
	// +kubebuilder:validation:Optional
	HTTPCodes *string `json:"httpCodes,omitempty" tf:"http_codes,omitempty"`

	// Specifies the interval between consecutive checks, in second.
	// The valid value ranges from 1 to 300.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval" tf:"interval,omitempty"`

	// Specifies the request method for health check.
	// The valid values are GET and HEAD.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Specifies the destination path for health checks.
	// Required if the protocol is HTTP or HTTPS.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the destination host port for health check.
	// The valid value ranges from 0 to 65,535.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the microservice for performing health check on backend servers.
	// The valid values are TCP, HTTP and HTTPS, defaults to TCP.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Specifies the status of health check.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the unhealthy threshold, which refers to the number of consecutive
	// failed checks required for a backend server to be considered unhealthy.
	// The valid value ranges from 1 to 10.
	// +kubebuilder:validation:Optional
	ThresholdAbnormal *float64 `json:"thresholdAbnormal" tf:"threshold_abnormal,omitempty"`

	// Specifies the healthy threshold, which refers to the number of consecutive
	// successful checks required for a backend server to be considered healthy.
	// The valid value ranges from 1 to 10.
	// +kubebuilder:validation:Optional
	ThresholdNormal *float64 `json:"thresholdNormal" tf:"threshold_normal,omitempty"`

	// Specifies the timeout for determining whether a health check fails, in second.
	// The value must be less than the value of the time interval.
	// The valid value ranges from 1 to 30.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout" tf:"timeout,omitempty"`
}

type MemberGroupInitParameters struct {

	// Specifies the description of the member group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the microservice port of the backend server group.
	// The valid value ranges from 0 to 65,535.
	MicroservicePort *float64 `json:"microservicePort,omitempty" tf:"microservice_port,omitempty"`

	// Specifies the microservice tags of the backend server group.
	// +mapType=granular
	MicroserviceTags map[string]*string `json:"microserviceTags,omitempty" tf:"microservice_tags,omitempty"`

	// Specifies the microservice version of the backend server group.
	MicroserviceVersion *string `json:"microserviceVersion,omitempty" tf:"microservice_version,omitempty"`

	// Specifies the name of the member group.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens (-), underscores (_)
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the weight of the current member group.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberGroupObservation struct {

	// Specifies the description of the member group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the microservice port of the backend server group.
	// The valid value ranges from 0 to 65,535.
	MicroservicePort *float64 `json:"microservicePort,omitempty" tf:"microservice_port,omitempty"`

	// Specifies the microservice tags of the backend server group.
	// +mapType=granular
	MicroserviceTags map[string]*string `json:"microserviceTags,omitempty" tf:"microservice_tags,omitempty"`

	// Specifies the microservice version of the backend server group.
	MicroserviceVersion *string `json:"microserviceVersion,omitempty" tf:"microservice_version,omitempty"`

	// Specifies the name of the member group.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens (-), underscores (_)
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the weight of the current member group.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberGroupParameters struct {

	// Specifies the description of the member group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the microservice port of the backend server group.
	// The valid value ranges from 0 to 65,535.
	// +kubebuilder:validation:Optional
	MicroservicePort *float64 `json:"microservicePort,omitempty" tf:"microservice_port,omitempty"`

	// Specifies the microservice tags of the backend server group.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	MicroserviceTags map[string]*string `json:"microserviceTags,omitempty" tf:"microservice_tags,omitempty"`

	// Specifies the microservice version of the backend server group.
	// +kubebuilder:validation:Optional
	MicroserviceVersion *string `json:"microserviceVersion,omitempty" tf:"microservice_version,omitempty"`

	// Specifies the name of the member group.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens (-), underscores (_)
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the weight of the current member group.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberInitParameters struct {

	// Specifies the IP address each backend servers.
	// If omitted, means that all backend servers are both in one group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the IP address each backend servers.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Specifies the ECS ID for each backend servers.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether this member is the backup member.
	// Defaults to false.
	IsBackup *bool `json:"isBackup,omitempty" tf:"is_backup,omitempty"`

	// Specifies the name of the backend server.
	// Required if the parameter member.id is set.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the port of the backend server.
	// The valid value ranges from 0 to 65,535.
	// If omitted, the default port of channel will be used.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the status of the backend server.
	// The valid values are as follows:
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the weight of current backend server.
	// The valid value ranges from 0 to 10,000, defaults to 0.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberObservation struct {

	// Specifies the IP address each backend servers.
	// If omitted, means that all backend servers are both in one group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the IP address each backend servers.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Specifies the ECS ID for each backend servers.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether this member is the backup member.
	// Defaults to false.
	IsBackup *bool `json:"isBackup,omitempty" tf:"is_backup,omitempty"`

	// Specifies the name of the backend server.
	// Required if the parameter member.id is set.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the port of the backend server.
	// The valid value ranges from 0 to 65,535.
	// If omitted, the default port of channel will be used.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the status of the backend server.
	// The valid values are as follows:
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the weight of current backend server.
	// The valid value ranges from 0 to 10,000, defaults to 0.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberParameters struct {

	// Specifies the IP address each backend servers.
	// If omitted, means that all backend servers are both in one group.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the IP address each backend servers.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Specifies the ECS ID for each backend servers.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether this member is the backup member.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	IsBackup *bool `json:"isBackup,omitempty" tf:"is_backup,omitempty"`

	// Specifies the name of the backend server.
	// Required if the parameter member.id is set.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the port of the backend server.
	// The valid value ranges from 0 to 65,535.
	// If omitted, the default port of channel will be used.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the status of the backend server.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the weight of current backend server.
	// The valid value ranges from 0 to 10,000, defaults to 0.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MicroserviceInitParameters struct {

	// Specifies the CCE microservice details.
	// The object structure is documented below.
	CceConfig []CceConfigInitParameters `json:"cceConfig,omitempty" tf:"cce_config,omitempty"`

	CseConfig []CseConfigInitParameters `json:"cseConfig,omitempty" tf:"cse_config,omitempty"`
}

type MicroserviceObservation struct {

	// Specifies the CCE microservice details.
	// The object structure is documented below.
	CceConfig []CceConfigObservation `json:"cceConfig,omitempty" tf:"cce_config,omitempty"`

	CseConfig []CseConfigObservation `json:"cseConfig,omitempty" tf:"cse_config,omitempty"`
}

type MicroserviceParameters struct {

	// Specifies the CCE microservice details.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	CceConfig []CceConfigParameters `json:"cceConfig,omitempty" tf:"cce_config,omitempty"`

	// +kubebuilder:validation:Optional
	CseConfig []CseConfigParameters `json:"cseConfig,omitempty" tf:"cse_config,omitempty"`
}

type VPCChannelV2InitParameters struct {

	// Specifies the ID of the dedicated API gateway to which the channel
	// belongs.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the health configuration of cloud servers associated with the load balance
	// channel for APIG regularly check.
	// The object structure is documented below.
	HealthCheck []HealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Specifies the distribution algorithm.
	// The valid values are as follows:
	LBAlgorithm *float64 `json:"lbAlgorithm,omitempty" tf:"lb_algorithm,omitempty"`

	// Specifies the backend servers of the channel.
	// This parameter is required and only available if the type is 2.
	// The object structure is documented below.
	Member []MemberInitParameters `json:"member,omitempty" tf:"member,omitempty"`

	// Specifies the backend (server) groups of the channel.
	// The object structure is documented below.
	MemberGroup []MemberGroupInitParameters `json:"memberGroup,omitempty" tf:"member_group,omitempty"`

	// Specifies the member type of the channel.
	// The valid values are as follows:
	MemberType *string `json:"memberType,omitempty" tf:"member_type,omitempty"`

	// Specifies the configuration of the microservice.
	// The object structure is documented below.
	Microservice []MicroserviceInitParameters `json:"microservice,omitempty" tf:"microservice,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the default port for health check in channel.
	// The valid value ranges from 1 to 65,535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the type of the channel.
	// The valid values are as follows:
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`
}

type VPCChannelV2Observation struct {

	// The time when the channel was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the ID of the dedicated API gateway to which the channel
	// belongs.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the health configuration of cloud servers associated with the load balance
	// channel for APIG regularly check.
	// The object structure is documented below.
	HealthCheck []HealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// The ID of the channel.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the distribution algorithm.
	// The valid values are as follows:
	LBAlgorithm *float64 `json:"lbAlgorithm,omitempty" tf:"lb_algorithm,omitempty"`

	// Specifies the backend servers of the channel.
	// This parameter is required and only available if the type is 2.
	// The object structure is documented below.
	Member []MemberObservation `json:"member,omitempty" tf:"member,omitempty"`

	// Specifies the backend (server) groups of the channel.
	// The object structure is documented below.
	MemberGroup []MemberGroupObservation `json:"memberGroup,omitempty" tf:"member_group,omitempty"`

	// Specifies the member type of the channel.
	// The valid values are as follows:
	MemberType *string `json:"memberType,omitempty" tf:"member_type,omitempty"`

	// Specifies the configuration of the microservice.
	// The object structure is documented below.
	Microservice []MicroserviceObservation `json:"microservice,omitempty" tf:"microservice,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the default port for health check in channel.
	// The valid value ranges from 1 to 65,535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The region where the channel is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current status of the channel.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the type of the channel.
	// The valid values are as follows:
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`
}

type VPCChannelV2Parameters struct {

	// Specifies the ID of the dedicated API gateway to which the channel
	// belongs.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the health configuration of cloud servers associated with the load balance
	// channel for APIG regularly check.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Specifies the distribution algorithm.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	LBAlgorithm *float64 `json:"lbAlgorithm,omitempty" tf:"lb_algorithm,omitempty"`

	// Specifies the backend servers of the channel.
	// This parameter is required and only available if the type is 2.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Member []MemberParameters `json:"member,omitempty" tf:"member,omitempty"`

	// Specifies the backend (server) groups of the channel.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	MemberGroup []MemberGroupParameters `json:"memberGroup,omitempty" tf:"member_group,omitempty"`

	// Specifies the member type of the channel.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	MemberType *string `json:"memberType,omitempty" tf:"member_type,omitempty"`

	// Specifies the configuration of the microservice.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Microservice []MicroserviceParameters `json:"microservice,omitempty" tf:"microservice,omitempty"`

	// Specifies the channel name.
	// The valid length is limited from 3 to 64, only chinese and english letters, digits, hyphens -, underscores _
	// and dots (.) are allowed.
	// The name must start with a Chinese or English letter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the default port for health check in channel.
	// The valid value ranges from 1 to 65,535.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the type of the channel.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`
}

// VPCChannelV2Spec defines the desired state of VPCChannelV2
type VPCChannelV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCChannelV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCChannelV2InitParameters `json:"initProvider,omitempty"`
}

// VPCChannelV2Status defines the observed state of VPCChannelV2.
type VPCChannelV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCChannelV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPCChannelV2 is the Schema for the VPCChannelV2s API. Manages a APIGW VPC Channel resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VPCChannelV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lbAlgorithm) || (has(self.initProvider) && has(self.initProvider.lbAlgorithm))",message="spec.forProvider.lbAlgorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	Spec   VPCChannelV2Spec   `json:"spec"`
	Status VPCChannelV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCChannelV2List contains a list of VPCChannelV2s
type VPCChannelV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCChannelV2 `json:"items"`
}

// Repository type metadata.
var (
	VPCChannelV2_Kind             = "VPCChannelV2"
	VPCChannelV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCChannelV2_Kind}.String()
	VPCChannelV2_KindAPIVersion   = VPCChannelV2_Kind + "." + CRDGroupVersion.String()
	VPCChannelV2_GroupVersionKind = CRDGroupVersion.WithKind(VPCChannelV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCChannelV2{}, &VPCChannelV2List{})
}
