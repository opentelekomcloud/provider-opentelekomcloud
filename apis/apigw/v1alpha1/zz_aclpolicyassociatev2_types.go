// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLPolicyAssociateV2InitParameters struct {

	// Specifies the ID of the dedicated gateway instance to which the APIs and the
	// ACL policy belong. Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the ACL Policy ID for APIs binding.
	// Changing this will create a new resource.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the publishing IDs corresponding to the APIs bound by the ACL policy.
	// +listType=set
	PublishIds []*string `json:"publishIds,omitempty" tf:"publish_ids,omitempty"`
}

type ACLPolicyAssociateV2Observation struct {

	// Specifies the ID of the dedicated gateway instance to which the APIs and the
	// ACL policy belong. Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Resource ID. The format is <gateway_id>/<policy_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ACL Policy ID for APIs binding.
	// Changing this will create a new resource.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the publishing IDs corresponding to the APIs bound by the ACL policy.
	// +listType=set
	PublishIds []*string `json:"publishIds,omitempty" tf:"publish_ids,omitempty"`

	// Specifies the region where the dedicated instance and the throttling policy are located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ACLPolicyAssociateV2Parameters struct {

	// Specifies the ID of the dedicated gateway instance to which the APIs and the
	// ACL policy belong. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the ACL Policy ID for APIs binding.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the publishing IDs corresponding to the APIs bound by the ACL policy.
	// +kubebuilder:validation:Optional
	// +listType=set
	PublishIds []*string `json:"publishIds,omitempty" tf:"publish_ids,omitempty"`
}

// ACLPolicyAssociateV2Spec defines the desired state of ACLPolicyAssociateV2
type ACLPolicyAssociateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLPolicyAssociateV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ACLPolicyAssociateV2InitParameters `json:"initProvider,omitempty"`
}

// ACLPolicyAssociateV2Status defines the observed state of ACLPolicyAssociateV2.
type ACLPolicyAssociateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLPolicyAssociateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ACLPolicyAssociateV2 is the Schema for the ACLPolicyAssociateV2s API. Manages a APIGW ACL policy association resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ACLPolicyAssociateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publishIds) || (has(self.initProvider) && has(self.initProvider.publishIds))",message="spec.forProvider.publishIds is a required parameter"
	Spec   ACLPolicyAssociateV2Spec   `json:"spec"`
	Status ACLPolicyAssociateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLPolicyAssociateV2List contains a list of ACLPolicyAssociateV2s
type ACLPolicyAssociateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLPolicyAssociateV2 `json:"items"`
}

// Repository type metadata.
var (
	ACLPolicyAssociateV2_Kind             = "ACLPolicyAssociateV2"
	ACLPolicyAssociateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLPolicyAssociateV2_Kind}.String()
	ACLPolicyAssociateV2_KindAPIVersion   = ACLPolicyAssociateV2_Kind + "." + CRDGroupVersion.String()
	ACLPolicyAssociateV2_GroupVersionKind = CRDGroupVersion.WithKind(ACLPolicyAssociateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLPolicyAssociateV2{}, &ACLPolicyAssociateV2List{})
}
