// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLPolicyV2InitParameters struct {

	// Specifies the entity type of the ACL policy.
	// The valid values are as follows:
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the ACL
	// policy belongs.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the name of the ACL policy.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores (_) are
	// allowed. The name must start with an letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the type of the ACL policy.
	// The valid values are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies one or more objects from which the access will be controlled.
	// Separate multiple objects with commas (,).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ACLPolicyV2Observation struct {

	// Specifies the entity type of the ACL policy.
	// The valid values are as follows:
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the ACL
	// policy belongs.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The ID of the ACL policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the ACL policy.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores (_) are
	// allowed. The name must start with an letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region where the ACL policy is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the type of the ACL policy.
	// The valid values are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The latest update time of the ACL policy.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies one or more objects from which the access will be controlled.
	// Separate multiple objects with commas (,).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ACLPolicyV2Parameters struct {

	// Specifies the entity type of the ACL policy.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the ACL
	// policy belongs.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the name of the ACL policy.
	// The valid length is limited from 3 to 64, only English letters, Chinese characters, digits and underscores (_) are
	// allowed. The name must start with an letter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the type of the ACL policy.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies one or more objects from which the access will be controlled.
	// Separate multiple objects with commas (,).
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// ACLPolicyV2Spec defines the desired state of ACLPolicyV2
type ACLPolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLPolicyV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ACLPolicyV2InitParameters `json:"initProvider,omitempty"`
}

// ACLPolicyV2Status defines the observed state of ACLPolicyV2.
type ACLPolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLPolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ACLPolicyV2 is the Schema for the ACLPolicyV2s API. Manages a APIGW ACL policy resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ACLPolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entityType) || (has(self.initProvider) && has(self.initProvider.entityType))",message="spec.forProvider.entityType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   ACLPolicyV2Spec   `json:"spec"`
	Status ACLPolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLPolicyV2List contains a list of ACLPolicyV2s
type ACLPolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLPolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	ACLPolicyV2_Kind             = "ACLPolicyV2"
	ACLPolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLPolicyV2_Kind}.String()
	ACLPolicyV2_KindAPIVersion   = ACLPolicyV2_Kind + "." + CRDGroupVersion.String()
	ACLPolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(ACLPolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLPolicyV2{}, &ACLPolicyV2List{})
}
