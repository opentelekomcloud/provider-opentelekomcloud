// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationAuthorizationV2InitParameters struct {

	// Specifies the authorized API IDs.
	// +listType=set
	APIIds []*string `json:"apiIds,omitempty" tf:"api_ids,omitempty"`

	// Specifies the ID of the application authorized to access the APIs.
	// Changing this will create a new resource.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Specifies the environment ID where the APIs were published.
	// Changing this will create a new resource.
	EnvID *string `json:"envId,omitempty" tf:"env_id,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the application
	// and APIs belong.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`
}

type ApplicationAuthorizationV2Observation struct {

	// Specifies the authorized API IDs.
	// +listType=set
	APIIds []*string `json:"apiIds,omitempty" tf:"api_ids,omitempty"`

	// Specifies the ID of the application authorized to access the APIs.
	// Changing this will create a new resource.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Specifies the environment ID where the APIs were published.
	// Changing this will create a new resource.
	EnvID *string `json:"envId,omitempty" tf:"env_id,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the application
	// and APIs belong.
	// Changing this will create a new resource.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The resource ID, also <env_id>/<application_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where the application and APIs are located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ApplicationAuthorizationV2Parameters struct {

	// Specifies the authorized API IDs.
	// +kubebuilder:validation:Optional
	// +listType=set
	APIIds []*string `json:"apiIds,omitempty" tf:"api_ids,omitempty"`

	// Specifies the ID of the application authorized to access the APIs.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Specifies the environment ID where the APIs were published.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	EnvID *string `json:"envId,omitempty" tf:"env_id,omitempty"`

	// Specifies the ID of the dedicated gateway instance to which the application
	// and APIs belong.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`
}

// ApplicationAuthorizationV2Spec defines the desired state of ApplicationAuthorizationV2
type ApplicationAuthorizationV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationAuthorizationV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationAuthorizationV2InitParameters `json:"initProvider,omitempty"`
}

// ApplicationAuthorizationV2Status defines the observed state of ApplicationAuthorizationV2.
type ApplicationAuthorizationV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationAuthorizationV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ApplicationAuthorizationV2 is the Schema for the ApplicationAuthorizationV2s API. Manages a APIGW Application authorization resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ApplicationAuthorizationV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiIds) || (has(self.initProvider) && has(self.initProvider.apiIds))",message="spec.forProvider.apiIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.applicationId) || (has(self.initProvider) && has(self.initProvider.applicationId))",message="spec.forProvider.applicationId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.envId) || (has(self.initProvider) && has(self.initProvider.envId))",message="spec.forProvider.envId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	Spec   ApplicationAuthorizationV2Spec   `json:"spec"`
	Status ApplicationAuthorizationV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationAuthorizationV2List contains a list of ApplicationAuthorizationV2s
type ApplicationAuthorizationV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationAuthorizationV2 `json:"items"`
}

// Repository type metadata.
var (
	ApplicationAuthorizationV2_Kind             = "ApplicationAuthorizationV2"
	ApplicationAuthorizationV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationAuthorizationV2_Kind}.String()
	ApplicationAuthorizationV2_KindAPIVersion   = ApplicationAuthorizationV2_Kind + "." + CRDGroupVersion.String()
	ApplicationAuthorizationV2_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationAuthorizationV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationAuthorizationV2{}, &ApplicationAuthorizationV2List{})
}
