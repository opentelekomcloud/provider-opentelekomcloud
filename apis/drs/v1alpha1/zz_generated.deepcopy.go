//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationDBInitParameters) DeepCopyInto(out *DestinationDBInitParameters) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationDBInitParameters.
func (in *DestinationDBInitParameters) DeepCopy() *DestinationDBInitParameters {
	if in == nil {
		return nil
	}
	out := new(DestinationDBInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationDBObservation) DeepCopyInto(out *DestinationDBObservation) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationDBObservation.
func (in *DestinationDBObservation) DeepCopy() *DestinationDBObservation {
	if in == nil {
		return nil
	}
	out := new(DestinationDBObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationDBParameters) DeepCopyInto(out *DestinationDBParameters) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationDBParameters.
func (in *DestinationDBParameters) DeepCopy() *DestinationDBParameters {
	if in == nil {
		return nil
	}
	out := new(DestinationDBParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LimitSpeedInitParameters) DeepCopyInto(out *LimitSpeedInitParameters) {
	*out = *in
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Speed != nil {
		in, out := &in.Speed, &out.Speed
		*out = new(string)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LimitSpeedInitParameters.
func (in *LimitSpeedInitParameters) DeepCopy() *LimitSpeedInitParameters {
	if in == nil {
		return nil
	}
	out := new(LimitSpeedInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LimitSpeedObservation) DeepCopyInto(out *LimitSpeedObservation) {
	*out = *in
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Speed != nil {
		in, out := &in.Speed, &out.Speed
		*out = new(string)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LimitSpeedObservation.
func (in *LimitSpeedObservation) DeepCopy() *LimitSpeedObservation {
	if in == nil {
		return nil
	}
	out := new(LimitSpeedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LimitSpeedParameters) DeepCopyInto(out *LimitSpeedParameters) {
	*out = *in
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Speed != nil {
		in, out := &in.Speed, &out.Speed
		*out = new(string)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LimitSpeedParameters.
func (in *LimitSpeedParameters) DeepCopy() *LimitSpeedParameters {
	if in == nil {
		return nil
	}
	out := new(LimitSpeedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceDBInitParameters) DeepCopyInto(out *SourceDBInitParameters) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceDBInitParameters.
func (in *SourceDBInitParameters) DeepCopy() *SourceDBInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceDBInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceDBObservation) DeepCopyInto(out *SourceDBObservation) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceDBObservation.
func (in *SourceDBObservation) DeepCopy() *SourceDBObservation {
	if in == nil {
		return nil
	}
	out := new(SourceDBObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceDBParameters) DeepCopyInto(out *SourceDBParameters) {
	*out = *in
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLCertCheckSum != nil {
		in, out := &in.SSLCertCheckSum, &out.SSLCertCheckSum
		*out = new(string)
		**out = **in
	}
	if in.SSLCertKey != nil {
		in, out := &in.SSLCertKey, &out.SSLCertKey
		*out = new(string)
		**out = **in
	}
	if in.SSLCertName != nil {
		in, out := &in.SSLCertName, &out.SSLCertName
		*out = new(string)
		**out = **in
	}
	if in.SSLCertPassword != nil {
		in, out := &in.SSLCertPassword, &out.SSLCertPassword
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceDBParameters.
func (in *SourceDBParameters) DeepCopy() *SourceDBParameters {
	if in == nil {
		return nil
	}
	out := new(SourceDBParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3) DeepCopyInto(out *TaskV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3.
func (in *TaskV3) DeepCopy() *TaskV3 {
	if in == nil {
		return nil
	}
	out := new(TaskV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TaskV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3InitParameters) DeepCopyInto(out *TaskV3InitParameters) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DestinationDB != nil {
		in, out := &in.DestinationDB, &out.DestinationDB
		*out = make([]DestinationDBInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationDBReadonly != nil {
		in, out := &in.DestinationDBReadonly, &out.DestinationDBReadonly
		*out = new(bool)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.ExpiredDays != nil {
		in, out := &in.ExpiredDays, &out.ExpiredDays
		*out = new(float64)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.LimitSpeed != nil {
		in, out := &in.LimitSpeed, &out.LimitSpeed
		*out = make([]LimitSpeedInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MigrateDefiner != nil {
		in, out := &in.MigrateDefiner, &out.MigrateDefiner
		*out = new(bool)
		**out = **in
	}
	if in.MigrationType != nil {
		in, out := &in.MigrationType, &out.MigrationType
		*out = new(string)
		**out = **in
	}
	if in.MultiWrite != nil {
		in, out := &in.MultiWrite, &out.MultiWrite
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.SourceDB != nil {
		in, out := &in.SourceDB, &out.SourceDB
		*out = make([]SourceDBInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3InitParameters.
func (in *TaskV3InitParameters) DeepCopy() *TaskV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(TaskV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3List) DeepCopyInto(out *TaskV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TaskV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3List.
func (in *TaskV3List) DeepCopy() *TaskV3List {
	if in == nil {
		return nil
	}
	out := new(TaskV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TaskV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3Observation) DeepCopyInto(out *TaskV3Observation) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DestinationDB != nil {
		in, out := &in.DestinationDB, &out.DestinationDB
		*out = make([]DestinationDBObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationDBReadonly != nil {
		in, out := &in.DestinationDBReadonly, &out.DestinationDBReadonly
		*out = new(bool)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.ExpiredDays != nil {
		in, out := &in.ExpiredDays, &out.ExpiredDays
		*out = new(float64)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LimitSpeed != nil {
		in, out := &in.LimitSpeed, &out.LimitSpeed
		*out = make([]LimitSpeedObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MigrateDefiner != nil {
		in, out := &in.MigrateDefiner, &out.MigrateDefiner
		*out = new(bool)
		**out = **in
	}
	if in.MigrationType != nil {
		in, out := &in.MigrationType, &out.MigrationType
		*out = new(string)
		**out = **in
	}
	if in.MultiWrite != nil {
		in, out := &in.MultiWrite, &out.MultiWrite
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SourceDB != nil {
		in, out := &in.SourceDB, &out.SourceDB
		*out = make([]SourceDBObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3Observation.
func (in *TaskV3Observation) DeepCopy() *TaskV3Observation {
	if in == nil {
		return nil
	}
	out := new(TaskV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3Parameters) DeepCopyInto(out *TaskV3Parameters) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DestinationDB != nil {
		in, out := &in.DestinationDB, &out.DestinationDB
		*out = make([]DestinationDBParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationDBReadonly != nil {
		in, out := &in.DestinationDBReadonly, &out.DestinationDBReadonly
		*out = new(bool)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.ExpiredDays != nil {
		in, out := &in.ExpiredDays, &out.ExpiredDays
		*out = new(float64)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.LimitSpeed != nil {
		in, out := &in.LimitSpeed, &out.LimitSpeed
		*out = make([]LimitSpeedParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MigrateDefiner != nil {
		in, out := &in.MigrateDefiner, &out.MigrateDefiner
		*out = new(bool)
		**out = **in
	}
	if in.MigrationType != nil {
		in, out := &in.MigrationType, &out.MigrationType
		*out = new(string)
		**out = **in
	}
	if in.MultiWrite != nil {
		in, out := &in.MultiWrite, &out.MultiWrite
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.SourceDB != nil {
		in, out := &in.SourceDB, &out.SourceDB
		*out = make([]SourceDBParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3Parameters.
func (in *TaskV3Parameters) DeepCopy() *TaskV3Parameters {
	if in == nil {
		return nil
	}
	out := new(TaskV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3Spec) DeepCopyInto(out *TaskV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3Spec.
func (in *TaskV3Spec) DeepCopy() *TaskV3Spec {
	if in == nil {
		return nil
	}
	out := new(TaskV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskV3Status) DeepCopyInto(out *TaskV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskV3Status.
func (in *TaskV3Status) DeepCopy() *TaskV3Status {
	if in == nil {
		return nil
	}
	out := new(TaskV3Status)
	in.DeepCopyInto(out)
	return out
}
