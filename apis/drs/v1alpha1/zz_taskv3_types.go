// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationDBInitParameters struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of database.
	// Changing this parameter will create a new resource.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DestinationDBObservation struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Private IP.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DestinationDBParameters struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	EngineType *string `json:"engineType" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The region in which to create the resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	User *string `json:"user" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type LimitSpeedInitParameters struct {

	// Specifies the time to end speed limit, this time is UTC time. The input must
	// end at 59 minutes, the format is hh:mm, for example: 15:59. Changing this parameter will create a new resource.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Specifies the transmission speed, the value range is 1 to 9999, unit: MB/s.
	// Changing this parameter will create a new resource.
	Speed *string `json:"speed,omitempty" tf:"speed,omitempty"`

	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is hh:mm, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type LimitSpeedObservation struct {

	// Specifies the time to end speed limit, this time is UTC time. The input must
	// end at 59 minutes, the format is hh:mm, for example: 15:59. Changing this parameter will create a new resource.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Specifies the transmission speed, the value range is 1 to 9999, unit: MB/s.
	// Changing this parameter will create a new resource.
	Speed *string `json:"speed,omitempty" tf:"speed,omitempty"`

	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is hh:mm, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type LimitSpeedParameters struct {

	// Specifies the time to end speed limit, this time is UTC time. The input must
	// end at 59 minutes, the format is hh:mm, for example: 15:59. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime" tf:"end_time,omitempty"`

	// Specifies the transmission speed, the value range is 1 to 9999, unit: MB/s.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Speed *string `json:"speed" tf:"speed,omitempty"`

	// Specifies the time to start speed limit, this time is UTC time. The start
	// time is the whole hour, if there is a minute, it will be ignored, the format is hh:mm, and the hour number
	// is two digits, for example: 01:00. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

type SourceDBInitParameters struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of database.
	// Changing this parameter will create a new resource.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type SourceDBObservation struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Private IP.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type SourceDBParameters struct {

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	EngineType *string `json:"engineType" tf:"engine_type,omitempty"`

	// Specifies the IP of database. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Specifies the instance id of database when it is a RDS database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the port of database. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The region in which to create the resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the checksum of SSL certificate content.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertCheckSum *string `json:"sslCertCheckSum,omitempty" tf:"ssl_cert_check_sum,omitempty"`

	// Specifies the SSL certificate content, encrypted with base64.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertKey *string `json:"sslCertKey,omitempty" tf:"ssl_cert_key,omitempty"`

	// Specifies SSL certificate name.
	// It is mandatory when ssl_enabled is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertName *string `json:"sslCertName,omitempty" tf:"ssl_cert_name,omitempty"`

	// Specifies SSL certificate password. It is mandatory when
	// ssl_enabled is true and the certificate file suffix is .p12. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLCertPassword *string `json:"sslCertPassword,omitempty" tf:"ssl_cert_password,omitempty"`

	// Specifies whether to enable SSL connection.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the user name of database.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	User *string `json:"user" tf:"user,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type TaskV3InitParameters struct {

	// Specifies the action of job. The options are as follows:
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\) are not allowed.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination database configuration.
	// The db_info object structure of the destination_db is documented below.
	// Changing this parameter will create a new resource.
	DestinationDB []DestinationDBInitParameters `json:"destinationDb,omitempty" tf:"destination_db,omitempty"`

	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. The default value is true. Changing this parameter will create a new resource.
	DestinationDBReadonly *bool `json:"destinationDbReadonly,omitempty" tf:"destination_db_readonly,omitempty"`

	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is 14. Changing this parameter will create a new resource.
	ExpiredDays *float64 `json:"expiredDays,omitempty" tf:"expired_days,omitempty"`

	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is false.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. Structure is documented below.
	// Changing this parameter will create a new resource.
	LimitSpeed []LimitSpeedInitParameters `json:"limitSpeed,omitempty" tf:"limit_speed,omitempty"`

	// Specifies whether to migrate the definers of all source database
	// objects to the user of destination_db. The default value is true.
	// Changing this parameter will create a new resource.
	MigrateDefiner *bool `json:"migrateDefiner,omitempty" tf:"migrate_definer,omitempty"`

	// Specifies migration type.
	// Changing this parameter will create a new resource. The options are as follows:
	MigrationType *string `json:"migrationType,omitempty" tf:"migration_type,omitempty"`

	// Specifies whether to enable multi write. It is mandatory when type
	// is cloudDataGuard. When the disaster recovery type is dual-active disaster recovery, set multi_write to true,
	// otherwise to false. The default value is false. Changing this parameter will create a new resource.
	MultiWrite *bool `json:"multiWrite,omitempty" tf:"multi_write,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network type.
	// Changing this parameter will create a new resource. The options are as follows:
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the source database configuration.
	// The db_info object structure of the source_db is documented below.
	// Changing this parameter will create a new resource.
	SourceDB []SourceDBInitParameters `json:"sourceDb,omitempty" tf:"source_db,omitempty"`

	// Specifies the time to start the job. The time format
	// is yyyy-MM-dd HH:mm:ss. Start immediately by default. Changing this parameter will create a new resource.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Specifies the key/value pairs to associate with the DRS job.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the job type. Changing this parameter will create a new
	// resource. The options are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TaskV3Observation struct {

	// Specifies the action of job. The options are as follows:
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Create time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\) are not allowed.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination database configuration.
	// The db_info object structure of the destination_db is documented below.
	// Changing this parameter will create a new resource.
	DestinationDB []DestinationDBObservation `json:"destinationDb,omitempty" tf:"destination_db,omitempty"`

	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. The default value is true. Changing this parameter will create a new resource.
	DestinationDBReadonly *bool `json:"destinationDbReadonly,omitempty" tf:"destination_db_readonly,omitempty"`

	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is 14. Changing this parameter will create a new resource.
	ExpiredDays *float64 `json:"expiredDays,omitempty" tf:"expired_days,omitempty"`

	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is false.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. Structure is documented below.
	// Changing this parameter will create a new resource.
	LimitSpeed []LimitSpeedObservation `json:"limitSpeed,omitempty" tf:"limit_speed,omitempty"`

	// Specifies whether to migrate the definers of all source database
	// objects to the user of destination_db. The default value is true.
	// Changing this parameter will create a new resource.
	MigrateDefiner *bool `json:"migrateDefiner,omitempty" tf:"migrate_definer,omitempty"`

	// Specifies migration type.
	// Changing this parameter will create a new resource. The options are as follows:
	MigrationType *string `json:"migrationType,omitempty" tf:"migration_type,omitempty"`

	// Specifies whether to enable multi write. It is mandatory when type
	// is cloudDataGuard. When the disaster recovery type is dual-active disaster recovery, set multi_write to true,
	// otherwise to false. The default value is false. Changing this parameter will create a new resource.
	MultiWrite *bool `json:"multiWrite,omitempty" tf:"multi_write,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network type.
	// Changing this parameter will create a new resource. The options are as follows:
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Private IP.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Public IP.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The region in which to create the resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The security group ID to which the DRS instance belongs.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the source database configuration.
	// The db_info object structure of the source_db is documented below.
	// Changing this parameter will create a new resource.
	SourceDB []SourceDBObservation `json:"sourceDb,omitempty" tf:"source_db,omitempty"`

	// Specifies the time to start the job. The time format
	// is yyyy-MM-dd HH:mm:ss. Start immediately by default. Changing this parameter will create a new resource.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The subnet ID to which the DRS instance belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the key/value pairs to associate with the DRS job.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the job type. Changing this parameter will create a new
	// resource. The options are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The VPC ID to which the DRS instance belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type TaskV3Parameters struct {

	// Specifies the action of job. The options are as follows:
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the description of the job, which contain a
	// maximum of 256 characters, and certain special characters (including !<>&'"\) are not allowed.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination database configuration.
	// The db_info object structure of the destination_db is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DestinationDB []DestinationDBParameters `json:"destinationDb,omitempty" tf:"destination_db,omitempty"`

	// Specifies the destination DB instance as read-only helps
	// ensure the migration is successful. Once the migration is complete, the DB instance automatically changes to
	// Read/Write. The default value is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DestinationDBReadonly *bool `json:"destinationDbReadonly,omitempty" tf:"destination_db_readonly,omitempty"`

	// Specifies the direction of data flow.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the migration engine type.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	EngineType *string `json:"engineType,omitempty" tf:"engine_type,omitempty"`

	// Specifies how many days after the task is abnormal, it will automatically
	// end. The value ranges from 14 to 100. the default value is 14. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ExpiredDays *float64 `json:"expiredDays,omitempty" tf:"expired_days,omitempty"`

	// Specifies whether to forcibly destroy the job even if it is running.
	// The default value is false.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Specifies the migration speed by setting a time period.
	// The default is no speed limit. The maximum length is 3. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	LimitSpeed []LimitSpeedParameters `json:"limitSpeed,omitempty" tf:"limit_speed,omitempty"`

	// Specifies whether to migrate the definers of all source database
	// objects to the user of destination_db. The default value is true.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MigrateDefiner *bool `json:"migrateDefiner,omitempty" tf:"migrate_definer,omitempty"`

	// Specifies migration type.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	MigrationType *string `json:"migrationType,omitempty" tf:"migration_type,omitempty"`

	// Specifies whether to enable multi write. It is mandatory when type
	// is cloudDataGuard. When the disaster recovery type is dual-active disaster recovery, set multi_write to true,
	// otherwise to false. The default value is false. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MultiWrite *bool `json:"multiWrite,omitempty" tf:"multi_write,omitempty"`

	// Specifies the job name. The name consists of 4 to 50 characters, starting with
	// a letter. Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network type.
	// Changing this parameter will create a new resource. The options are as follows:
	// +kubebuilder:validation:Optional
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// +kubebuilder:validation:Optional
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the source database configuration.
	// The db_info object structure of the source_db is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SourceDB []SourceDBParameters `json:"sourceDb,omitempty" tf:"source_db,omitempty"`

	// Specifies the time to start the job. The time format
	// is yyyy-MM-dd HH:mm:ss. Start immediately by default. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Specifies the key/value pairs to associate with the DRS job.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the job type. Changing this parameter will create a new
	// resource. The options are as follows:
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TaskV3Spec defines the desired state of TaskV3
type TaskV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaskV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TaskV3InitParameters `json:"initProvider,omitempty"`
}

// TaskV3Status defines the observed state of TaskV3.
type TaskV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaskV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TaskV3 is the Schema for the TaskV3s API. Manages a DRS Task resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TaskV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationDb) || (has(self.initProvider) && has(self.initProvider.destinationDb))",message="spec.forProvider.destinationDb is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.direction) || (has(self.initProvider) && has(self.initProvider.direction))",message="spec.forProvider.direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineType) || (has(self.initProvider) && has(self.initProvider.engineType))",message="spec.forProvider.engineType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceDb) || (has(self.initProvider) && has(self.initProvider.sourceDb))",message="spec.forProvider.sourceDb is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TaskV3Spec   `json:"spec"`
	Status TaskV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaskV3List contains a list of TaskV3s
type TaskV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TaskV3 `json:"items"`
}

// Repository type metadata.
var (
	TaskV3_Kind             = "TaskV3"
	TaskV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TaskV3_Kind}.String()
	TaskV3_KindAPIVersion   = TaskV3_Kind + "." + CRDGroupVersion.String()
	TaskV3_GroupVersionKind = CRDGroupVersion.WithKind(TaskV3_Kind)
)

func init() {
	SchemeBuilder.Register(&TaskV3{}, &TaskV3List{})
}
