// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainV2InitParameters struct {

	// The name of the domain for image sharing.
	AccessDomain *string `json:"accessDomain,omitempty" tf:"access_domain,omitempty"`

	// End date of image sharing (UTC). When the value is set to forever,
	// the image will be permanently available for the domain. The validity period is calculated by day.
	// The shared images expire at 00:00:00 on the day after the end date.
	Deadline *string `json:"deadline,omitempty" tf:"deadline,omitempty"`

	// Specifies SWR domain description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the repository organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Permission to be granted. Currently, only the read permission is supported.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// The name of the repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type DomainV2Observation struct {

	// The name of the domain for image sharing.
	AccessDomain *string `json:"accessDomain,omitempty" tf:"access_domain,omitempty"`

	// Indicates the creation time.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Username ID of the domain creator.
	CreatorID *string `json:"creatorId,omitempty" tf:"creator_id,omitempty"`

	// Username of the domain creator.
	CreatorName *string `json:"creatorName,omitempty" tf:"creator_name,omitempty"`

	// End date of image sharing (UTC). When the value is set to forever,
	// the image will be permanently available for the domain. The validity period is calculated by day.
	// The shared images expire at 00:00:00 on the day after the end date.
	Deadline *string `json:"deadline,omitempty" tf:"deadline,omitempty"`

	// Specifies SWR domain description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the repository organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Permission to be granted. Currently, only the read permission is supported.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// The name of the repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Indicates the domain is valid (true) or expired (false).
	Status *bool `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates the domain when was last updated.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type DomainV2Parameters struct {

	// The name of the domain for image sharing.
	// +kubebuilder:validation:Optional
	AccessDomain *string `json:"accessDomain,omitempty" tf:"access_domain,omitempty"`

	// End date of image sharing (UTC). When the value is set to forever,
	// the image will be permanently available for the domain. The validity period is calculated by day.
	// The shared images expire at 00:00:00 on the day after the end date.
	// +kubebuilder:validation:Optional
	Deadline *string `json:"deadline,omitempty" tf:"deadline,omitempty"`

	// Specifies SWR domain description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the repository organization.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Permission to be granted. Currently, only the read permission is supported.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// The name of the repository.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

// DomainV2Spec defines the desired state of DomainV2
type DomainV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainV2InitParameters `json:"initProvider,omitempty"`
}

// DomainV2Status defines the observed state of DomainV2.
type DomainV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainV2 is the Schema for the DomainV2s API. Manages an SWR Domain resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DomainV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessDomain) || (has(self.initProvider) && has(self.initProvider.accessDomain))",message="spec.forProvider.accessDomain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deadline) || (has(self.initProvider) && has(self.initProvider.deadline))",message="spec.forProvider.deadline is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permission) || (has(self.initProvider) && has(self.initProvider.permission))",message="spec.forProvider.permission is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repository) || (has(self.initProvider) && has(self.initProvider.repository))",message="spec.forProvider.repository is a required parameter"
	Spec   DomainV2Spec   `json:"spec"`
	Status DomainV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainV2List contains a list of DomainV2s
type DomainV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainV2 `json:"items"`
}

// Repository type metadata.
var (
	DomainV2_Kind             = "DomainV2"
	DomainV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainV2_Kind}.String()
	DomainV2_KindAPIVersion   = DomainV2_Kind + "." + CRDGroupVersion.String()
	DomainV2_GroupVersionKind = CRDGroupVersion.WithKind(DomainV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainV2{}, &DomainV2List{})
}
