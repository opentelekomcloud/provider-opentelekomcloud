// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationPermissionsV2InitParameters struct {

	// User permission that is configured.
	// The value can be 1, 3, or 7. 7 ― manage, 3 ―  write, 1 ― read.
	Auth *float64 `json:"auth,omitempty" tf:"auth,omitempty"`

	// The name of the organization (namespace) to be accessed.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The ID of the existing Open Telekom Cloud user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// The username of the existing Open Telekom Cloud user.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OrganizationPermissionsV2Observation struct {

	// User permission that is configured.
	// The value can be 1, 3, or 7. 7 ― manage, 3 ―  write, 1 ― read.
	Auth *float64 `json:"auth,omitempty" tf:"auth,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the organization (namespace) to be accessed.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The ID of the existing Open Telekom Cloud user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// The username of the existing Open Telekom Cloud user.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OrganizationPermissionsV2Parameters struct {

	// User permission that is configured.
	// The value can be 1, 3, or 7. 7 ― manage, 3 ―  write, 1 ― read.
	// +kubebuilder:validation:Optional
	Auth *float64 `json:"auth,omitempty" tf:"auth,omitempty"`

	// The name of the organization (namespace) to be accessed.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The ID of the existing Open Telekom Cloud user.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// The username of the existing Open Telekom Cloud user.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// OrganizationPermissionsV2Spec defines the desired state of OrganizationPermissionsV2
type OrganizationPermissionsV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationPermissionsV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationPermissionsV2InitParameters `json:"initProvider,omitempty"`
}

// OrganizationPermissionsV2Status defines the observed state of OrganizationPermissionsV2.
type OrganizationPermissionsV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationPermissionsV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationPermissionsV2 is the Schema for the OrganizationPermissionsV2s API. Manages an SWR Organization Permissions resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type OrganizationPermissionsV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.auth) || (has(self.initProvider) && has(self.initProvider.auth))",message="spec.forProvider.auth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userId) || (has(self.initProvider) && has(self.initProvider.userId))",message="spec.forProvider.userId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   OrganizationPermissionsV2Spec   `json:"spec"`
	Status OrganizationPermissionsV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationPermissionsV2List contains a list of OrganizationPermissionsV2s
type OrganizationPermissionsV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationPermissionsV2 `json:"items"`
}

// Repository type metadata.
var (
	OrganizationPermissionsV2_Kind             = "OrganizationPermissionsV2"
	OrganizationPermissionsV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationPermissionsV2_Kind}.String()
	OrganizationPermissionsV2_KindAPIVersion   = OrganizationPermissionsV2_Kind + "." + CRDGroupVersion.String()
	OrganizationPermissionsV2_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationPermissionsV2_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationPermissionsV2{}, &OrganizationPermissionsV2List{})
}
