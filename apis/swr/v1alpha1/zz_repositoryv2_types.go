// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryV2InitParameters struct {

	// Repository category. The value can be app_server, linux, framework_app, database,
	// lang, other, windows, arm.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Repository description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the repository is public.
	// When the value is true, it indicates the repository is public.
	// When the value is false, it indicates the repository is private.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Enter 1 to 128 characters, starting and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), slashes (/), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the repository organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

type RepositoryV2Observation struct {

	// Repository category. The value can be app_server, linux, framework_app, database,
	// lang, other, windows, arm.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Repository description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Intra-cluster image address for docker pull.
	InternalPath *string `json:"internalPath,omitempty" tf:"internal_path,omitempty"`

	// Whether the repository is public.
	// When the value is true, it indicates the repository is public.
	// When the value is false, it indicates the repository is private.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Enter 1 to 128 characters, starting and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), slashes (/), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of image tags in a repository.
	NumImages *float64 `json:"numImages,omitempty" tf:"num_images,omitempty"`

	// The name of the repository organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Image address for docker pull.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Numeric ID of the repository.
	RepositoryID *float64 `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Repository size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type RepositoryV2Parameters struct {

	// Repository category. The value can be app_server, linux, framework_app, database,
	// lang, other, windows, arm.
	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Repository description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the repository is public.
	// When the value is true, it indicates the repository is public.
	// When the value is false, it indicates the repository is private.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Enter 1 to 128 characters, starting and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), slashes (/), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the repository organization.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

// RepositoryV2Spec defines the desired state of RepositoryV2
type RepositoryV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryV2InitParameters `json:"initProvider,omitempty"`
}

// RepositoryV2Status defines the observed state of RepositoryV2.
type RepositoryV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryV2 is the Schema for the RepositoryV2s API. Manages an SWR Repository resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RepositoryV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isPublic) || (has(self.initProvider) && has(self.initProvider.isPublic))",message="spec.forProvider.isPublic is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	Spec   RepositoryV2Spec   `json:"spec"`
	Status RepositoryV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryV2List contains a list of RepositoryV2s
type RepositoryV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryV2 `json:"items"`
}

// Repository type metadata.
var (
	RepositoryV2_Kind             = "RepositoryV2"
	RepositoryV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryV2_Kind}.String()
	RepositoryV2_KindAPIVersion   = RepositoryV2_Kind + "." + CRDGroupVersion.String()
	RepositoryV2_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryV2{}, &RepositoryV2List{})
}
