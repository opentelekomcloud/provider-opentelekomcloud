// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationV2InitParameters struct {

	// The name of the organization (namespace) to be created.
	// Enter 1 to 64 characters, starting with a lowercase letter and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OrganizationV2Observation struct {

	// User permission. The value can be 1, 3, or 7. 7: manage 3: write 1: read
	Auth *float64 `json:"auth,omitempty" tf:"auth,omitempty"`

	// Username of the organization creator.
	CreatorName *string `json:"creatorName,omitempty" tf:"creator_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the organization (namespace) to be created.
	// Enter 1 to 64 characters, starting with a lowercase letter and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Numeric ID of the organization.
	OrganizationID *float64 `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type OrganizationV2Parameters struct {

	// The name of the organization (namespace) to be created.
	// Enter 1 to 64 characters, starting with a lowercase letter and ending with a lowercase letter or digit.
	// Only lowercase letters, digits, periods (.), underscores (_), and hyphens (-) are allowed.
	// Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// OrganizationV2Spec defines the desired state of OrganizationV2
type OrganizationV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationV2InitParameters `json:"initProvider,omitempty"`
}

// OrganizationV2Status defines the observed state of OrganizationV2.
type OrganizationV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationV2 is the Schema for the OrganizationV2s API. Manages an SWR Organization resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type OrganizationV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OrganizationV2Spec   `json:"spec"`
	Status OrganizationV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationV2List contains a list of OrganizationV2s
type OrganizationV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationV2 `json:"items"`
}

// Repository type metadata.
var (
	OrganizationV2_Kind             = "OrganizationV2"
	OrganizationV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationV2_Kind}.String()
	OrganizationV2_KindAPIVersion   = OrganizationV2_Kind + "." + CRDGroupVersion.String()
	OrganizationV2_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationV2_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationV2{}, &OrganizationV2List{})
}
