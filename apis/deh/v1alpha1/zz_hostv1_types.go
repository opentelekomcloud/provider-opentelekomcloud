// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AvailableInstanceCapacitiesInitParameters struct {
}

type AvailableInstanceCapacitiesObservation struct {
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`
}

type AvailableInstanceCapacitiesParameters struct {
}

type HostV1InitParameters struct {

	// Allows a instance to be automatically placed onto the available Dedicated Hosts. The default value is on.
	AutoPlacement *string `json:"autoPlacement,omitempty" tf:"auto_placement,omitempty"`

	// The Availability Zone to which the Dedicated Host belongs.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The VM flavors placed on the Dedicated Host.
	AvailableInstanceCapacities []AvailableInstanceCapacitiesInitParameters `json:"availableInstanceCapacities,omitempty" tf:"available_instance_capacities,omitempty"`

	// The size of available memory for the Dedicated Host.
	AvailableMemory *float64 `json:"availableMemory,omitempty" tf:"available_memory,omitempty"`

	// The number of available vCPUs for the Dedicated Host.
	AvailableVcpus *float64 `json:"availableVcpus,omitempty" tf:"available_vcpus,omitempty"`

	// The number of host physical cores.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The Dedicated Host type.
	// Expected values are:
	HostType *string `json:"hostType,omitempty" tf:"host_type,omitempty"`

	// The name of the Dedicated Host type.
	HostTypeName *string `json:"hostTypeName,omitempty" tf:"host_type_name,omitempty"`

	// The number of the placed VMs.
	InstanceTotal *float64 `json:"instanceTotal,omitempty" tf:"instance_total,omitempty"`

	// The VMs started on the Dedicated Host.
	InstanceUuids []*string `json:"instanceUuids,omitempty" tf:"instance_uuids,omitempty"`

	// The size of host physical memory (MB).
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the Dedicated Host.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of host physical sockets.
	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	// Specifies the Dedicated Host status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags key/value pairs to associate with Host.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of host vCPUs.
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

type HostV1Observation struct {

	// Allows a instance to be automatically placed onto the available Dedicated Hosts. The default value is on.
	AutoPlacement *string `json:"autoPlacement,omitempty" tf:"auto_placement,omitempty"`

	// The Availability Zone to which the Dedicated Host belongs.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The VM flavors placed on the Dedicated Host.
	AvailableInstanceCapacities []AvailableInstanceCapacitiesObservation `json:"availableInstanceCapacities,omitempty" tf:"available_instance_capacities,omitempty"`

	// The size of available memory for the Dedicated Host.
	AvailableMemory *float64 `json:"availableMemory,omitempty" tf:"available_memory,omitempty"`

	// The number of available vCPUs for the Dedicated Host.
	AvailableVcpus *float64 `json:"availableVcpus,omitempty" tf:"available_vcpus,omitempty"`

	// The number of host physical cores.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The Dedicated Host type.
	// Expected values are:
	HostType *string `json:"hostType,omitempty" tf:"host_type,omitempty"`

	// The name of the Dedicated Host type.
	HostTypeName *string `json:"hostTypeName,omitempty" tf:"host_type_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of the placed VMs.
	InstanceTotal *float64 `json:"instanceTotal,omitempty" tf:"instance_total,omitempty"`

	// The VMs started on the Dedicated Host.
	InstanceUuids []*string `json:"instanceUuids,omitempty" tf:"instance_uuids,omitempty"`

	// The size of host physical memory (MB).
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the Dedicated Host.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of host physical sockets.
	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	// Specifies the Dedicated Host status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags key/value pairs to associate with Host.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of host vCPUs.
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

type HostV1Parameters struct {

	// Allows a instance to be automatically placed onto the available Dedicated Hosts. The default value is on.
	// +kubebuilder:validation:Optional
	AutoPlacement *string `json:"autoPlacement,omitempty" tf:"auto_placement,omitempty"`

	// The Availability Zone to which the Dedicated Host belongs.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The VM flavors placed on the Dedicated Host.
	// +kubebuilder:validation:Optional
	AvailableInstanceCapacities []AvailableInstanceCapacitiesParameters `json:"availableInstanceCapacities,omitempty" tf:"available_instance_capacities,omitempty"`

	// The size of available memory for the Dedicated Host.
	// +kubebuilder:validation:Optional
	AvailableMemory *float64 `json:"availableMemory,omitempty" tf:"available_memory,omitempty"`

	// The number of available vCPUs for the Dedicated Host.
	// +kubebuilder:validation:Optional
	AvailableVcpus *float64 `json:"availableVcpus,omitempty" tf:"available_vcpus,omitempty"`

	// The number of host physical cores.
	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The Dedicated Host type.
	// Expected values are:
	// +kubebuilder:validation:Optional
	HostType *string `json:"hostType,omitempty" tf:"host_type,omitempty"`

	// The name of the Dedicated Host type.
	// +kubebuilder:validation:Optional
	HostTypeName *string `json:"hostTypeName,omitempty" tf:"host_type_name,omitempty"`

	// The number of the placed VMs.
	// +kubebuilder:validation:Optional
	InstanceTotal *float64 `json:"instanceTotal,omitempty" tf:"instance_total,omitempty"`

	// The VMs started on the Dedicated Host.
	// +kubebuilder:validation:Optional
	InstanceUuids []*string `json:"instanceUuids,omitempty" tf:"instance_uuids,omitempty"`

	// The size of host physical memory (MB).
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the Dedicated Host.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of host physical sockets.
	// +kubebuilder:validation:Optional
	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	// Specifies the Dedicated Host status.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags key/value pairs to associate with Host.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of host vCPUs.
	// +kubebuilder:validation:Optional
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

// HostV1Spec defines the desired state of HostV1
type HostV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HostV1InitParameters `json:"initProvider,omitempty"`
}

// HostV1Status defines the observed state of HostV1.
type HostV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HostV1 is the Schema for the HostV1s API. Manages a DEH Host resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type HostV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostType) || (has(self.initProvider) && has(self.initProvider.hostType))",message="spec.forProvider.hostType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   HostV1Spec   `json:"spec"`
	Status HostV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostV1List contains a list of HostV1s
type HostV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostV1 `json:"items"`
}

// Repository type metadata.
var (
	HostV1_Kind             = "HostV1"
	HostV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostV1_Kind}.String()
	HostV1_KindAPIVersion   = HostV1_Kind + "." + CRDGroupVersion.String()
	HostV1_GroupVersionKind = CRDGroupVersion.WithKind(HostV1_Kind)
)

func init() {
	SchemeBuilder.Register(&HostV1{}, &HostV1List{})
}
