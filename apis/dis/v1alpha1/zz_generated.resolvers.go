// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/obs/v1alpha1"
	common "github.com/opentelekomcloud/provider-opentelekomcloud/config/common"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CheckpointV2.
func (mg *CheckpointV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppName),
		Extract:      common.ExtractDisAppName(),
		Reference:    mg.Spec.ForProvider.AppNameRef,
		Selector:     mg.Spec.ForProvider.AppNameSelector,
		To: reference.To{
			List:    &AppV2List{},
			Managed: &AppV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppName")
	}
	mg.Spec.ForProvider.AppName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StreamName),
		Extract:      common.ExtractDisStreamName(),
		Reference:    mg.Spec.ForProvider.StreamNameRef,
		Selector:     mg.Spec.ForProvider.StreamNameSelector,
		To: reference.To{
			List:    &StreamV2List{},
			Managed: &StreamV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamName")
	}
	mg.Spec.ForProvider.StreamName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AppName),
		Extract:      common.ExtractDisAppName(),
		Reference:    mg.Spec.InitProvider.AppNameRef,
		Selector:     mg.Spec.InitProvider.AppNameSelector,
		To: reference.To{
			List:    &AppV2List{},
			Managed: &AppV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AppName")
	}
	mg.Spec.InitProvider.AppName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AppNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StreamName),
		Extract:      common.ExtractDisStreamName(),
		Reference:    mg.Spec.InitProvider.StreamNameRef,
		Selector:     mg.Spec.InitProvider.StreamNameSelector,
		To: reference.To{
			List:    &StreamV2List{},
			Managed: &StreamV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamName")
	}
	mg.Spec.InitProvider.StreamName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DumpTaskV2.
func (mg *DumpTaskV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ObsDestinationDescriptor); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPath),
			Extract:      common.ExtractObsBucket(),
			Reference:    mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPathRef,
			Selector:     mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPathSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPath")
		}
		mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPath = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ObsDestinationDescriptor[i3].ObsBucketPathRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StreamName),
		Extract:      common.ExtractDisStreamName(),
		Reference:    mg.Spec.ForProvider.StreamNameRef,
		Selector:     mg.Spec.ForProvider.StreamNameSelector,
		To: reference.To{
			List:    &StreamV2List{},
			Managed: &StreamV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamName")
	}
	mg.Spec.ForProvider.StreamName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ObsDestinationDescriptor); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPath),
			Extract:      common.ExtractObsBucket(),
			Reference:    mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPathRef,
			Selector:     mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPathSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPath")
		}
		mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPath = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ObsDestinationDescriptor[i3].ObsBucketPathRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StreamName),
		Extract:      common.ExtractDisStreamName(),
		Reference:    mg.Spec.InitProvider.StreamNameRef,
		Selector:     mg.Spec.InitProvider.StreamNameSelector,
		To: reference.To{
			List:    &StreamV2List{},
			Managed: &StreamV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamName")
	}
	mg.Spec.InitProvider.StreamName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamNameRef = rsp.ResolvedReference

	return nil
}
