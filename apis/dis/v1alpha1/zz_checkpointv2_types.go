/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CheckpointV2InitParameters struct {

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// Type of the checkpoint. LAST_READ: Only sequence numbers are recorded in databases.
	// Default value: LAST_READ
	CheckpointType *string `json:"checkpointType,omitempty" tf:"checkpoint_type,omitempty"`

	// Metadata information of the consumer application.
	// Maximum length: 1000
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Partition ID of the stream The value can be in either of the following formats:
	PartitionID *string `json:"partitionId,omitempty" tf:"partition_id,omitempty"`

	// Sequence number to be submitted, which is used to record the consumption
	// checkpoint of the stream. Ensure that the sequence number is within the valid range.
	SequenceNumber *string `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// Name of the stream. The stream name can contain 1 to 64 characters,
	// including letters, digits, underscores (_), and hyphens (-).
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type CheckpointV2Observation struct {

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// Type of the checkpoint. LAST_READ: Only sequence numbers are recorded in databases.
	// Default value: LAST_READ
	CheckpointType *string `json:"checkpointType,omitempty" tf:"checkpoint_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata information of the consumer application.
	// Maximum length: 1000
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Partition ID of the stream The value can be in either of the following formats:
	PartitionID *string `json:"partitionId,omitempty" tf:"partition_id,omitempty"`

	// Sequence number to be submitted, which is used to record the consumption
	// checkpoint of the stream. Ensure that the sequence number is within the valid range.
	SequenceNumber *string `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// Name of the stream. The stream name can contain 1 to 64 characters,
	// including letters, digits, underscores (_), and hyphens (-).
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type CheckpointV2Parameters struct {

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	// +kubebuilder:validation:Optional
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// Type of the checkpoint. LAST_READ: Only sequence numbers are recorded in databases.
	// Default value: LAST_READ
	// +kubebuilder:validation:Optional
	CheckpointType *string `json:"checkpointType,omitempty" tf:"checkpoint_type,omitempty"`

	// Metadata information of the consumer application.
	// Maximum length: 1000
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Partition ID of the stream The value can be in either of the following formats:
	// +kubebuilder:validation:Optional
	PartitionID *string `json:"partitionId,omitempty" tf:"partition_id,omitempty"`

	// Sequence number to be submitted, which is used to record the consumption
	// checkpoint of the stream. Ensure that the sequence number is within the valid range.
	// +kubebuilder:validation:Optional
	SequenceNumber *string `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// Name of the stream. The stream name can contain 1 to 64 characters,
	// including letters, digits, underscores (_), and hyphens (-).
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

// CheckpointV2Spec defines the desired state of CheckpointV2
type CheckpointV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckpointV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckpointV2InitParameters `json:"initProvider,omitempty"`
}

// CheckpointV2Status defines the observed state of CheckpointV2.
type CheckpointV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckpointV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CheckpointV2 is the Schema for the CheckpointV2s API. Manages a DIS Checkpoint resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type CheckpointV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appName) || (has(self.initProvider) && has(self.initProvider.appName))",message="spec.forProvider.appName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.partitionId) || (has(self.initProvider) && has(self.initProvider.partitionId))",message="spec.forProvider.partitionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sequenceNumber) || (has(self.initProvider) && has(self.initProvider.sequenceNumber))",message="spec.forProvider.sequenceNumber is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.streamName) || (has(self.initProvider) && has(self.initProvider.streamName))",message="spec.forProvider.streamName is a required parameter"
	Spec   CheckpointV2Spec   `json:"spec"`
	Status CheckpointV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckpointV2List contains a list of CheckpointV2s
type CheckpointV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CheckpointV2 `json:"items"`
}

// Repository type metadata.
var (
	CheckpointV2_Kind             = "CheckpointV2"
	CheckpointV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CheckpointV2_Kind}.String()
	CheckpointV2_KindAPIVersion   = CheckpointV2_Kind + "." + CRDGroupVersion.String()
	CheckpointV2_GroupVersionKind = CRDGroupVersion.WithKind(CheckpointV2_Kind)
)

func init() {
	SchemeBuilder.Register(&CheckpointV2{}, &CheckpointV2List{})
}
