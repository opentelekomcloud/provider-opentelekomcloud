/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DumpTaskV2InitParameters struct {

	// Dump task operation. The value can only be start or stop.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Dump destination. Possible values:
	// OBS: Data is dumped to OBS.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Parameter list of OBS to which data in the DIS stream will be dumped.
	ObsDestinationDescriptor []ObsDestinationDescriptorInitParameters `json:"obsDestinationDescriptor,omitempty" tf:"obs_destination_descriptor,omitempty"`

	// Dump time directory generated based on the timestamp
	// of the source data and the configured partition_format.
	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm.
	ObsProcessingSchema []ObsProcessingSchemaInitParameters `json:"obsProcessingSchema,omitempty" tf:"obs_processing_schema,omitempty"`

	// Name of the stream.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/dis/v1alpha1.StreamV2
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractDisStreamName()
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// Reference to a StreamV2 in dis to populate streamName.
	// +kubebuilder:validation:Optional
	StreamNameRef *v1.Reference `json:"streamNameRef,omitempty" tf:"-"`

	// Selector for a StreamV2 in dis to populate streamName.
	// +kubebuilder:validation:Optional
	StreamNameSelector *v1.Selector `json:"streamNameSelector,omitempty" tf:"-"`
}

type DumpTaskV2Observation struct {

	// Dump task operation. The value can only be start or stop.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Time when the dump task is created.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Dump destination. Possible values:
	// OBS: Data is dumped to OBS.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// : Unique identifier of the partition.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Latest dump time of the dump task.
	LastTransferTimestamp *float64 `json:"lastTransferTimestamp,omitempty" tf:"last_transfer_timestamp,omitempty"`

	// Name of the dump task.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameter list of OBS to which data in the DIS stream will be dumped.
	ObsDestinationDescriptor []ObsDestinationDescriptorObservation `json:"obsDestinationDescriptor,omitempty" tf:"obs_destination_descriptor,omitempty"`

	// Dump time directory generated based on the timestamp
	// of the source data and the configured partition_format.
	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm.
	ObsProcessingSchema []ObsProcessingSchemaObservation `json:"obsProcessingSchema,omitempty" tf:"obs_processing_schema,omitempty"`

	// List of partition dump details.
	Partitions []PartitionsObservation `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Current status of the stream, can be:
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Name of the stream.
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// ID of the dump task.
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type DumpTaskV2Parameters struct {

	// Dump task operation. The value can only be start or stop.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Dump destination. Possible values:
	// OBS: Data is dumped to OBS.
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Parameter list of OBS to which data in the DIS stream will be dumped.
	// +kubebuilder:validation:Optional
	ObsDestinationDescriptor []ObsDestinationDescriptorParameters `json:"obsDestinationDescriptor,omitempty" tf:"obs_destination_descriptor,omitempty"`

	// Dump time directory generated based on the timestamp
	// of the source data and the configured partition_format.
	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm.
	// +kubebuilder:validation:Optional
	ObsProcessingSchema []ObsProcessingSchemaParameters `json:"obsProcessingSchema,omitempty" tf:"obs_processing_schema,omitempty"`

	// Name of the stream.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/dis/v1alpha1.StreamV2
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractDisStreamName()
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// Reference to a StreamV2 in dis to populate streamName.
	// +kubebuilder:validation:Optional
	StreamNameRef *v1.Reference `json:"streamNameRef,omitempty" tf:"-"`

	// Selector for a StreamV2 in dis to populate streamName.
	// +kubebuilder:validation:Optional
	StreamNameSelector *v1.Selector `json:"streamNameSelector,omitempty" tf:"-"`
}

type ObsDestinationDescriptorInitParameters struct {

	// Name of the agency created on IAM. DIS uses an agency to access your specified resources.
	// The parameters for creating an agency are as follows:
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Offset.
	// LATEST: Maximum offset, indicating that the latest data will be extracted.
	// TRIM_HORIZON: Minimum offset, indicating that the earliest data will be extracted.
	ConsumerStrategy *string `json:"consumerStrategy,omitempty" tf:"consumer_strategy,omitempty"`

	// User-defined interval at which data is imported from the current DIS stream into OBS.
	// If no data is pushed to the DIS stream during the current interval, no dump file package will be generated. Value range: 30-900.
	DeliverTimeInterval *float64 `json:"deliverTimeInterval,omitempty" tf:"deliver_time_interval,omitempty"`

	// Dump file format. Possible values: text
	DestinationFileType *string `json:"destinationFileType,omitempty" tf:"destination_file_type,omitempty"`

	// Directory to store files that will be dumped to OBS.
	// Different directory levels are separated by slashes (/) and cannot start with slashes.
	FilePrefix *string `json:"filePrefix,omitempty" tf:"file_prefix,omitempty"`

	// Name of the OBS bucket used to store data from the DIS stream.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/obs/v1alpha1.Bucket
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractObsBucket()
	ObsBucketPath *string `json:"obsBucketPath,omitempty" tf:"obs_bucket_path,omitempty"`

	// Reference to a Bucket in obs to populate obsBucketPath.
	// +kubebuilder:validation:Optional
	ObsBucketPathRef *v1.Reference `json:"obsBucketPathRef,omitempty" tf:"-"`

	// Selector for a Bucket in obs to populate obsBucketPath.
	// +kubebuilder:validation:Optional
	ObsBucketPathSelector *v1.Selector `json:"obsBucketPathSelector,omitempty" tf:"-"`

	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm (time at which the dump task was created).
	// Possible values:
	PartitionFormat *string `json:"partitionFormat,omitempty" tf:"partition_format,omitempty"`

	// Delimiter for the dump file, which is used to separate the user data that is written into the dump file.
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// Name of the dump task. The task name consists of letters, digits, hyphens (-), and underscores (_). It must be a string of 1 to 64 characters.
	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type ObsDestinationDescriptorObservation struct {

	// Name of the agency created on IAM. DIS uses an agency to access your specified resources.
	// The parameters for creating an agency are as follows:
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Offset.
	// LATEST: Maximum offset, indicating that the latest data will be extracted.
	// TRIM_HORIZON: Minimum offset, indicating that the earliest data will be extracted.
	ConsumerStrategy *string `json:"consumerStrategy,omitempty" tf:"consumer_strategy,omitempty"`

	// User-defined interval at which data is imported from the current DIS stream into OBS.
	// If no data is pushed to the DIS stream during the current interval, no dump file package will be generated. Value range: 30-900.
	DeliverTimeInterval *float64 `json:"deliverTimeInterval,omitempty" tf:"deliver_time_interval,omitempty"`

	// Dump file format. Possible values: text
	DestinationFileType *string `json:"destinationFileType,omitempty" tf:"destination_file_type,omitempty"`

	// Directory to store files that will be dumped to OBS.
	// Different directory levels are separated by slashes (/) and cannot start with slashes.
	FilePrefix *string `json:"filePrefix,omitempty" tf:"file_prefix,omitempty"`

	// Name of the OBS bucket used to store data from the DIS stream.
	ObsBucketPath *string `json:"obsBucketPath,omitempty" tf:"obs_bucket_path,omitempty"`

	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm (time at which the dump task was created).
	// Possible values:
	PartitionFormat *string `json:"partitionFormat,omitempty" tf:"partition_format,omitempty"`

	// Delimiter for the dump file, which is used to separate the user data that is written into the dump file.
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// Name of the dump task. The task name consists of letters, digits, hyphens (-), and underscores (_). It must be a string of 1 to 64 characters.
	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type ObsDestinationDescriptorParameters struct {

	// Name of the agency created on IAM. DIS uses an agency to access your specified resources.
	// The parameters for creating an agency are as follows:
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName" tf:"agency_name,omitempty"`

	// Offset.
	// LATEST: Maximum offset, indicating that the latest data will be extracted.
	// TRIM_HORIZON: Minimum offset, indicating that the earliest data will be extracted.
	// +kubebuilder:validation:Optional
	ConsumerStrategy *string `json:"consumerStrategy,omitempty" tf:"consumer_strategy,omitempty"`

	// User-defined interval at which data is imported from the current DIS stream into OBS.
	// If no data is pushed to the DIS stream during the current interval, no dump file package will be generated. Value range: 30-900.
	// +kubebuilder:validation:Optional
	DeliverTimeInterval *float64 `json:"deliverTimeInterval" tf:"deliver_time_interval,omitempty"`

	// Dump file format. Possible values: text
	// +kubebuilder:validation:Optional
	DestinationFileType *string `json:"destinationFileType,omitempty" tf:"destination_file_type,omitempty"`

	// Directory to store files that will be dumped to OBS.
	// Different directory levels are separated by slashes (/) and cannot start with slashes.
	// +kubebuilder:validation:Optional
	FilePrefix *string `json:"filePrefix,omitempty" tf:"file_prefix,omitempty"`

	// Name of the OBS bucket used to store data from the DIS stream.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/obs/v1alpha1.Bucket
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractObsBucket()
	// +kubebuilder:validation:Optional
	ObsBucketPath *string `json:"obsBucketPath,omitempty" tf:"obs_bucket_path,omitempty"`

	// Reference to a Bucket in obs to populate obsBucketPath.
	// +kubebuilder:validation:Optional
	ObsBucketPathRef *v1.Reference `json:"obsBucketPathRef,omitempty" tf:"-"`

	// Selector for a Bucket in obs to populate obsBucketPath.
	// +kubebuilder:validation:Optional
	ObsBucketPathSelector *v1.Selector `json:"obsBucketPathSelector,omitempty" tf:"-"`

	// Directory structure of the object file written into OBS.
	// The directory structure is in the format of yyyy/MM/dd/HH/mm (time at which the dump task was created).
	// Possible values:
	// +kubebuilder:validation:Optional
	PartitionFormat *string `json:"partitionFormat,omitempty" tf:"partition_format,omitempty"`

	// Delimiter for the dump file, which is used to separate the user data that is written into the dump file.
	// +kubebuilder:validation:Optional
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// Name of the dump task. The task name consists of letters, digits, hyphens (-), and underscores (_). It must be a string of 1 to 64 characters.
	// +kubebuilder:validation:Optional
	TaskName *string `json:"taskName" tf:"task_name,omitempty"`
}

type ObsProcessingSchemaInitParameters struct {

	// OBS directory generated based on the timestamp format.
	// This parameter is mandatory when the timestamp type of the source data is String.
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// Attribute name of the source data timestamp.
	TimestampName *string `json:"timestampName,omitempty" tf:"timestamp_name,omitempty"`

	// Type of the source data timestamp.
	// Possible values:
	TimestampType *string `json:"timestampType,omitempty" tf:"timestamp_type,omitempty"`
}

type ObsProcessingSchemaObservation struct {

	// OBS directory generated based on the timestamp format.
	// This parameter is mandatory when the timestamp type of the source data is String.
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// Attribute name of the source data timestamp.
	TimestampName *string `json:"timestampName,omitempty" tf:"timestamp_name,omitempty"`

	// Type of the source data timestamp.
	// Possible values:
	TimestampType *string `json:"timestampType,omitempty" tf:"timestamp_type,omitempty"`
}

type ObsProcessingSchemaParameters struct {

	// OBS directory generated based on the timestamp format.
	// This parameter is mandatory when the timestamp type of the source data is String.
	// +kubebuilder:validation:Optional
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// Attribute name of the source data timestamp.
	// +kubebuilder:validation:Optional
	TimestampName *string `json:"timestampName" tf:"timestamp_name,omitempty"`

	// Type of the source data timestamp.
	// Possible values:
	// +kubebuilder:validation:Optional
	TimestampType *string `json:"timestampType" tf:"timestamp_type,omitempty"`
}

type PartitionsInitParameters struct {
}

type PartitionsObservation struct {

	// : Possible value range of the hash key used by the partition.
	HashRange *string `json:"hashRange,omitempty" tf:"hash_range,omitempty"`

	// : Unique identifier of the partition.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// : Parent partition.
	ParentPartitions *string `json:"parentPartitions,omitempty" tf:"parent_partitions,omitempty"`

	// : Sequence number range of the partition.
	SequenceNumberRange *string `json:"sequenceNumberRange,omitempty" tf:"sequence_number_range,omitempty"`

	// Current status of the stream, can be:
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PartitionsParameters struct {
}

// DumpTaskV2Spec defines the desired state of DumpTaskV2
type DumpTaskV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DumpTaskV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DumpTaskV2InitParameters `json:"initProvider,omitempty"`
}

// DumpTaskV2Status defines the observed state of DumpTaskV2.
type DumpTaskV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DumpTaskV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DumpTaskV2 is the Schema for the DumpTaskV2s API. Manages a DIS Dump Task resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DumpTaskV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DumpTaskV2Spec   `json:"spec"`
	Status            DumpTaskV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DumpTaskV2List contains a list of DumpTaskV2s
type DumpTaskV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DumpTaskV2 `json:"items"`
}

// Repository type metadata.
var (
	DumpTaskV2_Kind             = "DumpTaskV2"
	DumpTaskV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DumpTaskV2_Kind}.String()
	DumpTaskV2_KindAPIVersion   = DumpTaskV2_Kind + "." + CRDGroupVersion.String()
	DumpTaskV2_GroupVersionKind = CRDGroupVersion.WithKind(DumpTaskV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DumpTaskV2{}, &DumpTaskV2List{})
}
