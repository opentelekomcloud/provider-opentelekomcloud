/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppV2InitParameters struct {

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AppV2Observation struct {

	// List of associated streams.
	CommitCheckpointStreamNames []*string `json:"commitCheckpointStreamNames,omitempty" tf:"commit_checkpoint_stream_names,omitempty"`

	// Time when the app is created. The value is a timestamp.
	Created *float64 `json:"created,omitempty" tf:"created,omitempty"`

	// Unique identifier of the app.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Associated partitions details.
	PartitionConsumingStates []PartitionConsumingStatesObservation `json:"partitionConsumingStates,omitempty" tf:"partition_consuming_states,omitempty"`
}

type AppV2Parameters struct {

	// Name of the consumer application to be created
	// The application name contains 1 to 200 characters. Only letters, digits, hyphens (-), and underscores (_) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PartitionConsumingStatesInitParameters struct {
}

type PartitionConsumingStatesObservation struct {

	// : Type of the checkpoint.
	CheckpointType *string `json:"checkpointType,omitempty" tf:"checkpoint_type,omitempty"`

	// : Partition data earliest offset
	EarliestOffset *float64 `json:"earliestOffset,omitempty" tf:"earliest_offset,omitempty"`

	// Unique identifier of the app.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// : Partition data latest offset
	LatestOffset *float64 `json:"latestOffset,omitempty" tf:"latest_offset,omitempty"`

	// : Partition Sequence Number
	SequenceNumber *string `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// : Partition Status, can be:
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PartitionConsumingStatesParameters struct {
}

// AppV2Spec defines the desired state of AppV2
type AppV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppV2InitParameters `json:"initProvider,omitempty"`
}

// AppV2Status defines the observed state of AppV2.
type AppV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AppV2 is the Schema for the AppV2s API. Manages a DIS App resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type AppV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AppV2Spec   `json:"spec"`
	Status AppV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppV2List contains a list of AppV2s
type AppV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppV2 `json:"items"`
}

// Repository type metadata.
var (
	AppV2_Kind             = "AppV2"
	AppV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppV2_Kind}.String()
	AppV2_KindAPIVersion   = AppV2_Kind + "." + CRDGroupVersion.String()
	AppV2_GroupVersionKind = CRDGroupVersion.WithKind(AppV2_Kind)
)

func init() {
	SchemeBuilder.Register(&AppV2{}, &AppV2List{})
}
