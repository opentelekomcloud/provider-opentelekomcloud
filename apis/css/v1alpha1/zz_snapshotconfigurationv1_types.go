// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationInitParameters struct {

	// The agency used by CSS to access OBS.
	Agency *string `json:"agency,omitempty" tf:"agency,omitempty"`

	// Storage path of the snapshot in the OBS bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// The bucket which will be used for storing snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (Options) Key ID used for snapshot encryption.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`
}

type ConfigurationObservation struct {

	// The agency used by CSS to access OBS.
	Agency *string `json:"agency,omitempty" tf:"agency,omitempty"`

	// Storage path of the snapshot in the OBS bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// The bucket which will be used for storing snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (Options) Key ID used for snapshot encryption.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`
}

type ConfigurationParameters struct {

	// The agency used by CSS to access OBS.
	// +kubebuilder:validation:Optional
	Agency *string `json:"agency" tf:"agency,omitempty"`

	// Storage path of the snapshot in the OBS bucket.
	// +kubebuilder:validation:Optional
	BasePath *string `json:"basePath" tf:"base_path,omitempty"`

	// The bucket which will be used for storing snapshots.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// (Options) Key ID used for snapshot encryption.
	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`
}

type CreationPolicyInitParameters struct {

	// Whether to delete all automatically created snapshots when the automatic
	// snapshot creation policy is disabled. The default value is false, indicating that snapshots that have been
	// automatically created are not deleted when the automatic snapshot creation function is disabled.
	// If this parameter is set to true, all automatically created snapshots are deleted when the automatic snapshot
	// creation policy is disabled.
	DeleteAuto *bool `json:"deleteAuto,omitempty" tf:"delete_auto,omitempty"`

	// Value true indicates that the automatic snapshot creation policy is enabled,
	// and value false indicates that the automatic snapshot creation policy is disabled.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Number of days that a snapshot can be retained. The value ranges from 1 to 90.
	// The system automatically deletes snapshots that have been retained for the allowed maximum duration on the half hour.
	Keepday *float64 `json:"keepday,omitempty" tf:"keepday,omitempty"`

	// Time when a snapshot is created every day. Snapshots can only be created on the hour.
	// The time format is the time followed by the time zone, specifically, HH:mm z.
	// In the format, HH:mm refers to the hour time and z refers to the time zone, for example,
	// 00:00 GMT+08:00 and 01:00 GMT+08:00.
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Prefix of the snapshot name that is automatically created.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type CreationPolicyObservation struct {

	// Whether to delete all automatically created snapshots when the automatic
	// snapshot creation policy is disabled. The default value is false, indicating that snapshots that have been
	// automatically created are not deleted when the automatic snapshot creation function is disabled.
	// If this parameter is set to true, all automatically created snapshots are deleted when the automatic snapshot
	// creation policy is disabled.
	DeleteAuto *bool `json:"deleteAuto,omitempty" tf:"delete_auto,omitempty"`

	// Value true indicates that the automatic snapshot creation policy is enabled,
	// and value false indicates that the automatic snapshot creation policy is disabled.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Number of days that a snapshot can be retained. The value ranges from 1 to 90.
	// The system automatically deletes snapshots that have been retained for the allowed maximum duration on the half hour.
	Keepday *float64 `json:"keepday,omitempty" tf:"keepday,omitempty"`

	// Time when a snapshot is created every day. Snapshots can only be created on the hour.
	// The time format is the time followed by the time zone, specifically, HH:mm z.
	// In the format, HH:mm refers to the hour time and z refers to the time zone, for example,
	// 00:00 GMT+08:00 and 01:00 GMT+08:00.
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Prefix of the snapshot name that is automatically created.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type CreationPolicyParameters struct {

	// Whether to delete all automatically created snapshots when the automatic
	// snapshot creation policy is disabled. The default value is false, indicating that snapshots that have been
	// automatically created are not deleted when the automatic snapshot creation function is disabled.
	// If this parameter is set to true, all automatically created snapshots are deleted when the automatic snapshot
	// creation policy is disabled.
	// +kubebuilder:validation:Optional
	DeleteAuto *bool `json:"deleteAuto,omitempty" tf:"delete_auto,omitempty"`

	// Value true indicates that the automatic snapshot creation policy is enabled,
	// and value false indicates that the automatic snapshot creation policy is disabled.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable" tf:"enable,omitempty"`

	// Number of days that a snapshot can be retained. The value ranges from 1 to 90.
	// The system automatically deletes snapshots that have been retained for the allowed maximum duration on the half hour.
	// +kubebuilder:validation:Optional
	Keepday *float64 `json:"keepday" tf:"keepday,omitempty"`

	// Time when a snapshot is created every day. Snapshots can only be created on the hour.
	// The time format is the time followed by the time zone, specifically, HH:mm z.
	// In the format, HH:mm refers to the hour time and z refers to the time zone, for example,
	// 00:00 GMT+08:00 and 01:00 GMT+08:00.
	// +kubebuilder:validation:Optional
	Period *string `json:"period" tf:"period,omitempty"`

	// Prefix of the snapshot name that is automatically created.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`
}

type SnapshotConfigurationV1InitParameters struct {

	// Use automatic configuration for CCS cluster screenshots.
	// Mutually exclusive with configuration/creation_policy.
	Automatic *bool `json:"automatic,omitempty" tf:"automatic,omitempty"`

	// ID of the CSS cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The basic configurations of a cluster snapshot. Structure is documented below.
	// Mutually exclusive with automatic.
	Configuration []ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// Parameters related to automatic snapshot creation. Structure is documented below.
	// Mutually exclusive with automatic.
	CreationPolicy []CreationPolicyInitParameters `json:"creationPolicy,omitempty" tf:"creation_policy,omitempty"`
}

type SnapshotConfigurationV1Observation struct {

	// Use automatic configuration for CCS cluster screenshots.
	// Mutually exclusive with configuration/creation_policy.
	Automatic *bool `json:"automatic,omitempty" tf:"automatic,omitempty"`

	// ID of the CSS cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The basic configurations of a cluster snapshot. Structure is documented below.
	// Mutually exclusive with automatic.
	Configuration []ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// Parameters related to automatic snapshot creation. Structure is documented below.
	// Mutually exclusive with automatic.
	CreationPolicy []CreationPolicyObservation `json:"creationPolicy,omitempty" tf:"creation_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnapshotConfigurationV1Parameters struct {

	// Use automatic configuration for CCS cluster screenshots.
	// Mutually exclusive with configuration/creation_policy.
	// +kubebuilder:validation:Optional
	Automatic *bool `json:"automatic,omitempty" tf:"automatic,omitempty"`

	// ID of the CSS cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The basic configurations of a cluster snapshot. Structure is documented below.
	// Mutually exclusive with automatic.
	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// Parameters related to automatic snapshot creation. Structure is documented below.
	// Mutually exclusive with automatic.
	// +kubebuilder:validation:Optional
	CreationPolicy []CreationPolicyParameters `json:"creationPolicy,omitempty" tf:"creation_policy,omitempty"`
}

// SnapshotConfigurationV1Spec defines the desired state of SnapshotConfigurationV1
type SnapshotConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotConfigurationV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotConfigurationV1InitParameters `json:"initProvider,omitempty"`
}

// SnapshotConfigurationV1Status defines the observed state of SnapshotConfigurationV1.
type SnapshotConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SnapshotConfigurationV1 is the Schema for the SnapshotConfigurationV1s API. Manages a CSS Snapshot resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SnapshotConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	Spec   SnapshotConfigurationV1Spec   `json:"spec"`
	Status SnapshotConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotConfigurationV1List contains a list of SnapshotConfigurationV1s
type SnapshotConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	SnapshotConfigurationV1_Kind             = "SnapshotConfigurationV1"
	SnapshotConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotConfigurationV1_Kind}.String()
	SnapshotConfigurationV1_KindAPIVersion   = SnapshotConfigurationV1_Kind + "." + CRDGroupVersion.String()
	SnapshotConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotConfigurationV1{}, &SnapshotConfigurationV1List{})
}
