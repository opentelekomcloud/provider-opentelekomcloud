// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationV1InitParameters struct {

	// Whether to auto-create an index.
	// The value can be true or false.
	// Whether to auto-create index.
	AutoCreateIndex *string `json:"autoCreateIndex,omitempty" tf:"auto_create_index,omitempty"`

	// The CSS cluster ID.
	// The CSS cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
	HTTPCorsAllowCredentials *string `json:"httpCorsAllowCredentials,omitempty" tf:"http_cors_allow_credentials,omitempty"`

	// Headers allowed for cross-domain access.
	// Including X-Requested-With, Content-Type, and Content-Length.
	// Use commas (,) and spaces to separate headers.
	// Headers allowed for cross-domain access.
	HTTPCorsAllowHeaders *string `json:"httpCorsAllowHeaders,omitempty" tf:"http_cors_allow_headers,omitempty"`

	// Methods allowed for cross-domain access.
	// Including OPTIONS, HEAD, GET, POST, PUT, and DELETE.
	// Use commas (,) and spaces to separate methods.
	// Methods allowed for cross-domain access.
	HTTPCorsAllowMethods *string `json:"httpCorsAllowMethods,omitempty" tf:"http_cors_allow_methods,omitempty"`

	// Origin IP address allowed for cross-domain access, for example, 122.122.122.122:9200.
	// Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
	HTTPCorsAllowOrigin *string `json:"httpCorsAllowOrigin,omitempty" tf:"http_cors_allow_origin,omitempty"`

	// Whether to allow cross-domain access.
	// The value can be true or false. Default value: false.
	// Whether to allow cross-domain access.
	HTTPCorsEnabled *string `json:"httpCorsEnabled,omitempty" tf:"http_cors_enabled,omitempty"`

	// Cache duration of the browser. The cache is automatically cleared
	// after the time range you specify.
	// Unit: s, Default value: 1,728,000.
	// Cache duration of the browser. The cache is automatically cleared after the time range you specify.
	HTTPCorsMaxAge *string `json:"httpCorsMaxAge,omitempty" tf:"http_cors_max_age,omitempty"`

	// Cache size in the query phase. Value range: 1% to 100%.
	// Unit: %, Default value: 10%.
	// Cache size in the query phase. Value range: **1** to **100**.
	IndicesQueriesCacheSize *string `json:"indicesQueriesCacheSize,omitempty" tf:"indices_queries_cache_size,omitempty"`

	// Configured for migrating data from the current cluster to
	// the target cluster through the reindex API.
	// The example value is 122.122.122.122:9200.
	// Configured for migrating data from the current cluster to the target cluster through the reindex API.
	ReindexRemoteWhitelist *string `json:"reindexRemoteWhitelist,omitempty" tf:"reindex_remote_whitelist,omitempty"`

	// Queue size in the force merge thread pool.
	// Default value: 1.
	// Queue size in the force merge thread pool.
	ThreadPoolForceMergeSize *string `json:"threadPoolForceMergeSize,omitempty" tf:"thread_pool_force_merge_size,omitempty"`
}

type ConfigurationV1Observation struct {

	// Whether to auto-create an index.
	// The value can be true or false.
	// Whether to auto-create index.
	AutoCreateIndex *string `json:"autoCreateIndex,omitempty" tf:"auto_create_index,omitempty"`

	// The CSS cluster ID.
	// The CSS cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
	HTTPCorsAllowCredentials *string `json:"httpCorsAllowCredentials,omitempty" tf:"http_cors_allow_credentials,omitempty"`

	// Headers allowed for cross-domain access.
	// Including X-Requested-With, Content-Type, and Content-Length.
	// Use commas (,) and spaces to separate headers.
	// Headers allowed for cross-domain access.
	HTTPCorsAllowHeaders *string `json:"httpCorsAllowHeaders,omitempty" tf:"http_cors_allow_headers,omitempty"`

	// Methods allowed for cross-domain access.
	// Including OPTIONS, HEAD, GET, POST, PUT, and DELETE.
	// Use commas (,) and spaces to separate methods.
	// Methods allowed for cross-domain access.
	HTTPCorsAllowMethods *string `json:"httpCorsAllowMethods,omitempty" tf:"http_cors_allow_methods,omitempty"`

	// Origin IP address allowed for cross-domain access, for example, 122.122.122.122:9200.
	// Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
	HTTPCorsAllowOrigin *string `json:"httpCorsAllowOrigin,omitempty" tf:"http_cors_allow_origin,omitempty"`

	// Whether to allow cross-domain access.
	// The value can be true or false. Default value: false.
	// Whether to allow cross-domain access.
	HTTPCorsEnabled *string `json:"httpCorsEnabled,omitempty" tf:"http_cors_enabled,omitempty"`

	// Cache duration of the browser. The cache is automatically cleared
	// after the time range you specify.
	// Unit: s, Default value: 1,728,000.
	// Cache duration of the browser. The cache is automatically cleared after the time range you specify.
	HTTPCorsMaxAge *string `json:"httpCorsMaxAge,omitempty" tf:"http_cors_max_age,omitempty"`

	// The resource ID which equals the cluster_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Cache size in the query phase. Value range: 1% to 100%.
	// Unit: %, Default value: 10%.
	// Cache size in the query phase. Value range: **1** to **100**.
	IndicesQueriesCacheSize *string `json:"indicesQueriesCacheSize,omitempty" tf:"indices_queries_cache_size,omitempty"`

	// The region where the CSS cluster is deployed.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Configured for migrating data from the current cluster to
	// the target cluster through the reindex API.
	// The example value is 122.122.122.122:9200.
	// Configured for migrating data from the current cluster to the target cluster through the reindex API.
	ReindexRemoteWhitelist *string `json:"reindexRemoteWhitelist,omitempty" tf:"reindex_remote_whitelist,omitempty"`

	// Queue size in the force merge thread pool.
	// Default value: 1.
	// Queue size in the force merge thread pool.
	ThreadPoolForceMergeSize *string `json:"threadPoolForceMergeSize,omitempty" tf:"thread_pool_force_merge_size,omitempty"`
}

type ConfigurationV1Parameters struct {

	// Whether to auto-create an index.
	// The value can be true or false.
	// Whether to auto-create index.
	// +kubebuilder:validation:Optional
	AutoCreateIndex *string `json:"autoCreateIndex,omitempty" tf:"auto_create_index,omitempty"`

	// The CSS cluster ID.
	// The CSS cluster ID.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
	// +kubebuilder:validation:Optional
	HTTPCorsAllowCredentials *string `json:"httpCorsAllowCredentials,omitempty" tf:"http_cors_allow_credentials,omitempty"`

	// Headers allowed for cross-domain access.
	// Including X-Requested-With, Content-Type, and Content-Length.
	// Use commas (,) and spaces to separate headers.
	// Headers allowed for cross-domain access.
	// +kubebuilder:validation:Optional
	HTTPCorsAllowHeaders *string `json:"httpCorsAllowHeaders,omitempty" tf:"http_cors_allow_headers,omitempty"`

	// Methods allowed for cross-domain access.
	// Including OPTIONS, HEAD, GET, POST, PUT, and DELETE.
	// Use commas (,) and spaces to separate methods.
	// Methods allowed for cross-domain access.
	// +kubebuilder:validation:Optional
	HTTPCorsAllowMethods *string `json:"httpCorsAllowMethods,omitempty" tf:"http_cors_allow_methods,omitempty"`

	// Origin IP address allowed for cross-domain access, for example, 122.122.122.122:9200.
	// Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
	// +kubebuilder:validation:Optional
	HTTPCorsAllowOrigin *string `json:"httpCorsAllowOrigin,omitempty" tf:"http_cors_allow_origin,omitempty"`

	// Whether to allow cross-domain access.
	// The value can be true or false. Default value: false.
	// Whether to allow cross-domain access.
	// +kubebuilder:validation:Optional
	HTTPCorsEnabled *string `json:"httpCorsEnabled,omitempty" tf:"http_cors_enabled,omitempty"`

	// Cache duration of the browser. The cache is automatically cleared
	// after the time range you specify.
	// Unit: s, Default value: 1,728,000.
	// Cache duration of the browser. The cache is automatically cleared after the time range you specify.
	// +kubebuilder:validation:Optional
	HTTPCorsMaxAge *string `json:"httpCorsMaxAge,omitempty" tf:"http_cors_max_age,omitempty"`

	// Cache size in the query phase. Value range: 1% to 100%.
	// Unit: %, Default value: 10%.
	// Cache size in the query phase. Value range: **1** to **100**.
	// +kubebuilder:validation:Optional
	IndicesQueriesCacheSize *string `json:"indicesQueriesCacheSize,omitempty" tf:"indices_queries_cache_size,omitempty"`

	// Configured for migrating data from the current cluster to
	// the target cluster through the reindex API.
	// The example value is 122.122.122.122:9200.
	// Configured for migrating data from the current cluster to the target cluster through the reindex API.
	// +kubebuilder:validation:Optional
	ReindexRemoteWhitelist *string `json:"reindexRemoteWhitelist,omitempty" tf:"reindex_remote_whitelist,omitempty"`

	// Queue size in the force merge thread pool.
	// Default value: 1.
	// Queue size in the force merge thread pool.
	// +kubebuilder:validation:Optional
	ThreadPoolForceMergeSize *string `json:"threadPoolForceMergeSize,omitempty" tf:"thread_pool_force_merge_size,omitempty"`
}

// ConfigurationV1Spec defines the desired state of ConfigurationV1
type ConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigurationV1InitParameters `json:"initProvider,omitempty"`
}

// ConfigurationV1Status defines the observed state of ConfigurationV1.
type ConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConfigurationV1 is the Schema for the ConfigurationV1s API. Manage CSS cluster configurations in OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	Spec   ConfigurationV1Spec   `json:"spec"`
	Status ConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1List contains a list of ConfigurationV1s
type ConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationV1_Kind             = "ConfigurationV1"
	ConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationV1_Kind}.String()
	ConfigurationV1_KindAPIVersion   = ConfigurationV1_Kind + "." + CRDGroupVersion.String()
	ConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationV1{}, &ConfigurationV1List{})
}
