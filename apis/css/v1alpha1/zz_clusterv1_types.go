// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupStrategyInitParameters struct {

	// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
	// for seven days by default.
	KeepDays *float64 `json:"keepDays,omitempty" tf:"keep_days,omitempty"`

	// Specifies the prefix of the snapshot that is automatically created.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Specifies the time when a snapshot is automatically created everyday. Snapshots can
	// only be created on the hour. The time format is the time followed by the time zone, specifically, HH:mm z. In the
	// format, HH:mm refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
	// and "01:00 GMT+08:00".
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type BackupStrategyObservation struct {

	// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
	// for seven days by default.
	KeepDays *float64 `json:"keepDays,omitempty" tf:"keep_days,omitempty"`

	// Specifies the prefix of the snapshot that is automatically created.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Specifies the time when a snapshot is automatically created everyday. Snapshots can
	// only be created on the hour. The time format is the time followed by the time zone, specifically, HH:mm z. In the
	// format, HH:mm refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
	// and "01:00 GMT+08:00".
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type BackupStrategyParameters struct {

	// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
	// for seven days by default.
	// +kubebuilder:validation:Optional
	KeepDays *float64 `json:"keepDays" tf:"keep_days,omitempty"`

	// Specifies the prefix of the snapshot that is automatically created.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// Specifies the time when a snapshot is automatically created everyday. Snapshots can
	// only be created on the hour. The time format is the time followed by the time zone, specifically, HH:mm z. In the
	// format, HH:mm refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
	// and "01:00 GMT+08:00".
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

type ClusterV1InitParameters struct {

	// Password of the cluster user admin in security mode.
	// This parameter is mandatory only when enable_authority is set to true.
	AdminPass *string `json:"adminPass,omitempty" tf:"admin_pass,omitempty"`

	// Specifies the advanced backup policy. Structure is documented below.
	BackupStrategy []BackupStrategyInitParameters `json:"backupStrategy,omitempty" tf:"backup_strategy,omitempty"`

	// Type of the data search engine. Structure is documented below.
	// Changing this parameter will create a new resource.
	Datastore []DatastoreInitParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Whether to enable authentication.
	// Authentication is disabled by default.
	// When authentication is enabled, enable_https must be set to true.
	// Changing this parameter will create a new resource.
	EnableAuthority *bool `json:"enableAuthority,omitempty" tf:"enable_authority,omitempty"`

	// Whether communication encryption is performed on the cluster.
	// By default, communication encryption is disabled.
	// Value true indicates that communication encryption is performed on the cluster.
	// Value false indicates that communication encryption is not performed on the cluster.
	// Changing this parameter will create a new resource.
	EnableHTTPS *bool `json:"enableHttps,omitempty" tf:"enable_https,omitempty"`

	// Number of cluster instances. The value range is 1 to 32.
	ExpectNodeNum *float64 `json:"expectNodeNum,omitempty" tf:"expect_node_num,omitempty"`

	// Cluster name. It contains 4 to 32 characters. Only letters, digits,
	// hyphens (-), and underscores (_) are allowed. The value must start with a letter.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Instance object. Structure is documented below.
	// Changing this parameter will create a new resource.
	NodeConfig []NodeConfigInitParameters `json:"nodeConfig,omitempty" tf:"node_config,omitempty"`

	// Specifies the public network access information.
	PublicAccess []PublicAccessInitParameters `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// Tags key/value pairs to associate with the cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ClusterV1Observation struct {

	// Password of the cluster user admin in security mode.
	// This parameter is mandatory only when enable_authority is set to true.
	AdminPass *string `json:"adminPass,omitempty" tf:"admin_pass,omitempty"`

	// Indicates whether the snapshot function is enabled.
	BackupAvailable *bool `json:"backupAvailable,omitempty" tf:"backup_available,omitempty"`

	// Specifies the advanced backup policy. Structure is documented below.
	BackupStrategy []BackupStrategyObservation `json:"backupStrategy,omitempty" tf:"backup_strategy,omitempty"`

	// Time when a cluster is created. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Type of the data search engine. Structure is documented below.
	// Changing this parameter will create a new resource.
	Datastore []DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Whether to enable authentication.
	// Authentication is disabled by default.
	// When authentication is enabled, enable_https must be set to true.
	// Changing this parameter will create a new resource.
	EnableAuthority *bool `json:"enableAuthority,omitempty" tf:"enable_authority,omitempty"`

	// Whether communication encryption is performed on the cluster.
	// By default, communication encryption is disabled.
	// Value true indicates that communication encryption is performed on the cluster.
	// Value false indicates that communication encryption is not performed on the cluster.
	// Changing this parameter will create a new resource.
	EnableHTTPS *bool `json:"enableHttps,omitempty" tf:"enable_https,omitempty"`

	// Indicates the IP address and port number of the user used to access the VPC.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Number of cluster instances. The value range is 1 to 32.
	ExpectNodeNum *float64 `json:"expectNodeNum,omitempty" tf:"expect_node_num,omitempty"`

	// Instance ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Cluster name. It contains 4 to 32 characters. Only letters, digits,
	// hyphens (-), and underscores (_) are allowed. The value must start with a letter.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Instance object. Structure is documented below.
	// Changing this parameter will create a new resource.
	NodeConfig []NodeConfigObservation `json:"nodeConfig,omitempty" tf:"node_config,omitempty"`

	// List of node objects. Structure is documented below.
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Specifies the public network access information.
	PublicAccess []PublicAccessObservation `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// Tags key/value pairs to associate with the cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Last modification time of a cluster. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type ClusterV1Parameters struct {

	// Password of the cluster user admin in security mode.
	// This parameter is mandatory only when enable_authority is set to true.
	// +kubebuilder:validation:Optional
	AdminPass *string `json:"adminPass,omitempty" tf:"admin_pass,omitempty"`

	// Specifies the advanced backup policy. Structure is documented below.
	// +kubebuilder:validation:Optional
	BackupStrategy []BackupStrategyParameters `json:"backupStrategy,omitempty" tf:"backup_strategy,omitempty"`

	// Type of the data search engine. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Datastore []DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Whether to enable authentication.
	// Authentication is disabled by default.
	// When authentication is enabled, enable_https must be set to true.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EnableAuthority *bool `json:"enableAuthority,omitempty" tf:"enable_authority,omitempty"`

	// Whether communication encryption is performed on the cluster.
	// By default, communication encryption is disabled.
	// Value true indicates that communication encryption is performed on the cluster.
	// Value false indicates that communication encryption is not performed on the cluster.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EnableHTTPS *bool `json:"enableHttps,omitempty" tf:"enable_https,omitempty"`

	// Number of cluster instances. The value range is 1 to 32.
	// +kubebuilder:validation:Optional
	ExpectNodeNum *float64 `json:"expectNodeNum,omitempty" tf:"expect_node_num,omitempty"`

	// Cluster name. It contains 4 to 32 characters. Only letters, digits,
	// hyphens (-), and underscores (_) are allowed. The value must start with a letter.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Instance object. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeConfig []NodeConfigParameters `json:"nodeConfig,omitempty" tf:"node_config,omitempty"`

	// Specifies the public network access information.
	// +kubebuilder:validation:Optional
	PublicAccess []PublicAccessParameters `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// Tags key/value pairs to associate with the cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DatastoreInitParameters struct {

	// Engine type. The default value is elasticsearch. Currently, the value can be elasticsearch or opensearch.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Engine version. The value can be 7.6.2, 7.9.3, 7.10.2 or 1.3.6 for opensearch.
	// The default value is 7.6.2.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreObservation struct {

	// Engine type. The default value is elasticsearch. Currently, the value can be elasticsearch or opensearch.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Engine version. The value can be 7.6.2, 7.9.3, 7.10.2 or 1.3.6 for opensearch.
	// The default value is 7.6.2.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreParameters struct {

	// Engine type. The default value is elasticsearch. Currently, the value can be elasticsearch or opensearch.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Engine version. The value can be 7.6.2, 7.9.3, 7.10.2 or 1.3.6 for opensearch.
	// The default value is 7.6.2.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkInfoInitParameters struct {

	// Network ID. All instances in a cluster must have the same
	// networks and security groups. Changing this parameter will create a new resource.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Security group ID. All instances in a cluster must have the
	// same subnets and security groups. Changing this parameter will create a new resource.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// VPC ID, which is used for configuring cluster network.
	// Changing this parameter will create a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type NetworkInfoObservation struct {

	// Network ID. All instances in a cluster must have the same
	// networks and security groups. Changing this parameter will create a new resource.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Security group ID. All instances in a cluster must have the
	// same subnets and security groups. Changing this parameter will create a new resource.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// VPC ID, which is used for configuring cluster network.
	// Changing this parameter will create a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type NetworkInfoParameters struct {

	// Network ID. All instances in a cluster must have the same
	// networks and security groups. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`

	// Security group ID. All instances in a cluster must have the
	// same subnets and security groups. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// VPC ID, which is used for configuring cluster network.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type NodeConfigInitParameters struct {

	// Availability zone (AZ). Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Instance flavor name.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Network information. Structure is documented below.
	// Changing this parameter will create a new resource.
	NetworkInfo []NetworkInfoInitParameters `json:"networkInfo,omitempty" tf:"network_info,omitempty"`

	// Information about the volume. Structure is documented below.
	// Changing this parameter will create a new resource.
	Volume []VolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type NodeConfigObservation struct {

	// Availability zone (AZ). Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Instance flavor name.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Network information. Structure is documented below.
	// Changing this parameter will create a new resource.
	NetworkInfo []NetworkInfoObservation `json:"networkInfo,omitempty" tf:"network_info,omitempty"`

	// Information about the volume. Structure is documented below.
	// Changing this parameter will create a new resource.
	Volume []VolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`
}

type NodeConfigParameters struct {

	// Availability zone (AZ). Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Instance flavor name.
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Network information. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NetworkInfo []NetworkInfoParameters `json:"networkInfo" tf:"network_info,omitempty"`

	// Information about the volume. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Volume []VolumeParameters `json:"volume" tf:"volume,omitempty"`
}

type NodesInitParameters struct {
}

type NodesObservation struct {

	// Instance ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Supported type: ess (indicating the Elasticsearch node)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesParameters struct {
}

type PublicAccessInitParameters struct {

	// Specifies the public network bandwidth.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the whitelist of Kibana access control.
	// Separate the whitelisted network segments or IP addresses with commas (,), and each of them must be unique.
	Whitelist *string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`

	// Specifies whether to enable the Kibana access control.
	WhitelistEnabled *bool `json:"whitelistEnabled,omitempty" tf:"whitelist_enabled,omitempty"`
}

type PublicAccessObservation struct {

	// Specifies the public network bandwidth.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// Specifies the whitelist of Kibana access control.
	// Separate the whitelisted network segments or IP addresses with commas (,), and each of them must be unique.
	Whitelist *string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`

	// Specifies whether to enable the Kibana access control.
	WhitelistEnabled *bool `json:"whitelistEnabled,omitempty" tf:"whitelist_enabled,omitempty"`
}

type PublicAccessParameters struct {

	// Specifies the public network bandwidth.
	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// Specifies the whitelist of Kibana access control.
	// Separate the whitelisted network segments or IP addresses with commas (,), and each of them must be unique.
	// +kubebuilder:validation:Optional
	Whitelist *string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`

	// Specifies whether to enable the Kibana access control.
	// +kubebuilder:validation:Optional
	WhitelistEnabled *bool `json:"whitelistEnabled" tf:"whitelist_enabled,omitempty"`
}

type VolumeInitParameters struct {

	// Key ID. The Default Master Keys cannot be used to create
	// grants. Specifically, you cannot use Default Master Keys
	// whose aliases end with /default in KMS to create clusters.
	// After a cluster is created, do not delete the key used by the cluster.
	// Otherwise, the cluster will become unavailable.
	// Changing this parameter will create a new resource.
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// Volume size, which must be a multiple of 4 and 10.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// COMMON: Common I/O. The SATA disk is used. HIGH: High I/O.
	// The SAS disk is used. ULTRAHIGH: Ultra-high I/O. The solid-state drive (SSD) is used.
	// Changing this parameter will create a new resource.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeObservation struct {

	// Key ID. The Default Master Keys cannot be used to create
	// grants. Specifically, you cannot use Default Master Keys
	// whose aliases end with /default in KMS to create clusters.
	// After a cluster is created, do not delete the key used by the cluster.
	// Otherwise, the cluster will become unavailable.
	// Changing this parameter will create a new resource.
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// Volume size, which must be a multiple of 4 and 10.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// COMMON: Common I/O. The SATA disk is used. HIGH: High I/O.
	// The SAS disk is used. ULTRAHIGH: Ultra-high I/O. The solid-state drive (SSD) is used.
	// Changing this parameter will create a new resource.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeParameters struct {

	// Key ID. The Default Master Keys cannot be used to create
	// grants. Specifically, you cannot use Default Master Keys
	// whose aliases end with /default in KMS to create clusters.
	// After a cluster is created, do not delete the key used by the cluster.
	// Otherwise, the cluster will become unavailable.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// Volume size, which must be a multiple of 4 and 10.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// COMMON: Common I/O. The SATA disk is used. HIGH: High I/O.
	// The SAS disk is used. ULTRAHIGH: Ultra-high I/O. The solid-state drive (SSD) is used.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType" tf:"volume_type,omitempty"`
}

// ClusterV1Spec defines the desired state of ClusterV1
type ClusterV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterV1InitParameters `json:"initProvider,omitempty"`
}

// ClusterV1Status defines the observed state of ClusterV1.
type ClusterV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClusterV1 is the Schema for the ClusterV1s API. Manages a CSS Cluster resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ClusterV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeConfig) || (has(self.initProvider) && has(self.initProvider.nodeConfig))",message="spec.forProvider.nodeConfig is a required parameter"
	Spec   ClusterV1Spec   `json:"spec"`
	Status ClusterV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1List contains a list of ClusterV1s
type ClusterV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV1 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV1_Kind             = "ClusterV1"
	ClusterV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV1_Kind}.String()
	ClusterV1_KindAPIVersion   = ClusterV1_Kind + "." + CRDGroupVersion.String()
	ClusterV1_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV1{}, &ClusterV1List{})
}
