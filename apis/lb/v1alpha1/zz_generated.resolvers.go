/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/identity/v1alpha1"
	v1alpha1 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1"
	common "github.com/opentelekomcloud/provider-opentelekomcloud/config/common"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this IpgroupV3.
func (mg *IpgroupV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.IPList); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPList[i3].IP),
			Extract:      common.ExtractEipAddress(),
			Reference:    mg.Spec.ForProvider.IPList[i3].IPRef,
			Selector:     mg.Spec.ForProvider.IPList[i3].IPSelector,
			To: reference.To{
				List:    &v1alpha1.EIPV1List{},
				Managed: &v1alpha1.EIPV1{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IPList[i3].IP")
		}
		mg.Spec.ForProvider.IPList[i3].IP = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IPList[i3].IPRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.IPList); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPList[i3].IP),
			Extract:      common.ExtractEipAddress(),
			Reference:    mg.Spec.InitProvider.IPList[i3].IPRef,
			Selector:     mg.Spec.InitProvider.IPList[i3].IPSelector,
			To: reference.To{
				List:    &v1alpha1.EIPV1List{},
				Managed: &v1alpha1.EIPV1{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.IPList[i3].IP")
		}
		mg.Spec.InitProvider.IPList[i3].IP = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.IPList[i3].IPRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ListenerV3.
func (mg *ListenerV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DefaultPoolIDRef,
		Selector:     mg.Spec.ForProvider.DefaultPoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultPoolID")
	}
	mg.Spec.ForProvider.DefaultPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultTLSContainerRef),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DefaultTLSContainerRefRef,
		Selector:     mg.Spec.ForProvider.DefaultTLSContainerRefSelector,
		To: reference.To{
			List:    &CertificateV3List{},
			Managed: &CertificateV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultTLSContainerRef")
	}
	mg.Spec.ForProvider.DefaultTLSContainerRef = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultTLSContainerRefRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.IPGroup); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPGroup[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.IPGroup[i3].IDRef,
			Selector:     mg.Spec.ForProvider.IPGroup[i3].IDSelector,
			To: reference.To{
				List:    &IpgroupV3List{},
				Managed: &IpgroupV3{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IPGroup[i3].ID")
		}
		mg.Spec.ForProvider.IPGroup[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IPGroup[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV3List{},
			Managed: &LoadbalancerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadbalancerID")
	}
	mg.Spec.ForProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityPolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityPolicyIDRef,
		Selector:     mg.Spec.ForProvider.SecurityPolicyIDSelector,
		To: reference.To{
			List:    &SecurityPolicyV3List{},
			Managed: &SecurityPolicyV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityPolicyID")
	}
	mg.Spec.ForProvider.SecurityPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityPolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DefaultPoolIDRef,
		Selector:     mg.Spec.InitProvider.DefaultPoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultPoolID")
	}
	mg.Spec.InitProvider.DefaultPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultTLSContainerRef),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DefaultTLSContainerRefRef,
		Selector:     mg.Spec.InitProvider.DefaultTLSContainerRefSelector,
		To: reference.To{
			List:    &CertificateV3List{},
			Managed: &CertificateV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultTLSContainerRef")
	}
	mg.Spec.InitProvider.DefaultTLSContainerRef = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultTLSContainerRefRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.IPGroup); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPGroup[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.IPGroup[i3].IDRef,
			Selector:     mg.Spec.InitProvider.IPGroup[i3].IDSelector,
			To: reference.To{
				List:    &IpgroupV3List{},
				Managed: &IpgroupV3{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.IPGroup[i3].ID")
		}
		mg.Spec.InitProvider.IPGroup[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.IPGroup[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.InitProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV3List{},
			Managed: &LoadbalancerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LoadbalancerID")
	}
	mg.Spec.InitProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityPolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityPolicyIDRef,
		Selector:     mg.Spec.InitProvider.SecurityPolicyIDSelector,
		To: reference.To{
			List:    &SecurityPolicyV3List{},
			Managed: &SecurityPolicyV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityPolicyID")
	}
	mg.Spec.InitProvider.SecurityPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityPolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoadbalancerV3.
func (mg *LoadbalancerV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.NetworkIds),
		Extract:       common.ExtractNetworkID(),
		References:    mg.Spec.ForProvider.NetworkIdsRefs,
		Selector:      mg.Spec.ForProvider.NetworkIdsSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkIds")
	}
	mg.Spec.ForProvider.NetworkIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.NetworkIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PublicIP); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PublicIP[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PublicIP[i3].IDRef,
			Selector:     mg.Spec.ForProvider.PublicIP[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.EIPV1List{},
				Managed: &v1alpha1.EIPV1{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PublicIP[i3].ID")
		}
		mg.Spec.ForProvider.PublicIP[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PublicIP[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouterIDRef,
		Selector:     mg.Spec.ForProvider.RouterIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouterID")
	}
	mg.Spec.ForProvider.RouterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.NetworkIds),
		Extract:       common.ExtractNetworkID(),
		References:    mg.Spec.InitProvider.NetworkIdsRefs,
		Selector:      mg.Spec.InitProvider.NetworkIdsSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkIds")
	}
	mg.Spec.InitProvider.NetworkIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.NetworkIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PublicIP); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PublicIP[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.PublicIP[i3].IDRef,
			Selector:     mg.Spec.InitProvider.PublicIP[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.EIPV1List{},
				Managed: &v1alpha1.EIPV1{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PublicIP[i3].ID")
		}
		mg.Spec.InitProvider.PublicIP[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PublicIP[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.RouterIDRef,
		Selector:     mg.Spec.InitProvider.RouterIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RouterID")
	}
	mg.Spec.InitProvider.RouterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MemberV3.
func (mg *MemberV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PoolIDRef,
		Selector:     mg.Spec.InitProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PoolID")
	}
	mg.Spec.InitProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorV3.
func (mg *MonitorV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PoolIDRef,
		Selector:     mg.Spec.InitProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PoolID")
	}
	mg.Spec.InitProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PolicyV3.
func (mg *PolicyV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ListenerIDRef,
		Selector:     mg.Spec.ForProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ListenerID")
	}
	mg.Spec.ForProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedirectListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RedirectListenerIDRef,
		Selector:     mg.Spec.ForProvider.RedirectListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedirectListenerID")
	}
	mg.Spec.ForProvider.RedirectListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedirectListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedirectPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RedirectPoolIDRef,
		Selector:     mg.Spec.ForProvider.RedirectPoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedirectPoolID")
	}
	mg.Spec.ForProvider.RedirectPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedirectPoolIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedirectPoolsConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolIDRef,
			Selector:     mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolIDSelector,
			To: reference.To{
				List:    &PoolV3List{},
				Managed: &PoolV3{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolID")
		}
		mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RedirectPoolsConfig[i3].PoolIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ListenerIDRef,
		Selector:     mg.Spec.InitProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ListenerID")
	}
	mg.Spec.InitProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedirectListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.RedirectListenerIDRef,
		Selector:     mg.Spec.InitProvider.RedirectListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedirectListenerID")
	}
	mg.Spec.InitProvider.RedirectListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedirectListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedirectPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.RedirectPoolIDRef,
		Selector:     mg.Spec.InitProvider.RedirectPoolIDSelector,
		To: reference.To{
			List:    &PoolV3List{},
			Managed: &PoolV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedirectPoolID")
	}
	mg.Spec.InitProvider.RedirectPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedirectPoolIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedirectPoolsConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolIDRef,
			Selector:     mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolIDSelector,
			To: reference.To{
				List:    &PoolV3List{},
				Managed: &PoolV3{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolID")
		}
		mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.RedirectPoolsConfig[i3].PoolIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this PoolV3.
func (mg *PoolV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ListenerIDRef,
		Selector:     mg.Spec.ForProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ListenerID")
	}
	mg.Spec.ForProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV3List{},
			Managed: &LoadbalancerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadbalancerID")
	}
	mg.Spec.ForProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ListenerIDRef,
		Selector:     mg.Spec.InitProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV3List{},
			Managed: &ListenerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ListenerID")
	}
	mg.Spec.InitProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.InitProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV3List{},
			Managed: &LoadbalancerV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LoadbalancerID")
	}
	mg.Spec.InitProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RuleV3.
func (mg *RuleV3) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PolicyIDRef,
		Selector:     mg.Spec.ForProvider.PolicyIDSelector,
		To: reference.To{
			List:    &PolicyV3List{},
			Managed: &PolicyV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyID")
	}
	mg.Spec.ForProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PolicyIDRef,
		Selector:     mg.Spec.InitProvider.PolicyIDSelector,
		To: reference.To{
			List:    &PolicyV3List{},
			Managed: &PolicyV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyID")
	}
	mg.Spec.InitProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}
