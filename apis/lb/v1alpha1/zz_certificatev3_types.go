/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateV3InitParameters struct {

	// The public encrypted key of the Certificate, PEM format.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Provides supplementary information about the certificate.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain of the Certificate.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Specifies the certificate name. Only letters,
	// digits, underscores, and hyphens are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The private encrypted key of the Certificate, PEM format.
	// Required for certificates of type server.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// The region in which to obtain the V3 ELB client.
	// An ELB client is needed to create an LB certificate. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// LB certificate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of certificate the container holds. Either server or client.
	// Defaults to server if not set. Changing this creates a new LB certificate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CertificateV3Observation struct {

	// The public encrypted key of the Certificate, PEM format.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Provides supplementary information about the certificate.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain of the Certificate.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Indicates the expiration time.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the certificate name. Only letters,
	// digits, underscores, and hyphens are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The private encrypted key of the Certificate, PEM format.
	// Required for certificates of type server.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// The region in which to obtain the V3 ELB client.
	// An ELB client is needed to create an LB certificate. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// LB certificate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of certificate the container holds. Either server or client.
	// Defaults to server if not set. Changing this creates a new LB certificate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type CertificateV3Parameters struct {

	// The public encrypted key of the Certificate, PEM format.
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Provides supplementary information about the certificate.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain of the Certificate.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Specifies the certificate name. Only letters,
	// digits, underscores, and hyphens are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The private encrypted key of the Certificate, PEM format.
	// Required for certificates of type server.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// The region in which to obtain the V3 ELB client.
	// An ELB client is needed to create an LB certificate. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// LB certificate.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of certificate the container holds. Either server or client.
	// Defaults to server if not set. Changing this creates a new LB certificate.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CertificateV3Spec defines the desired state of CertificateV3
type CertificateV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CertificateV3InitParameters `json:"initProvider,omitempty"`
}

// CertificateV3Status defines the observed state of CertificateV3.
type CertificateV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CertificateV3 is the Schema for the CertificateV3s API. Manages a LB Certificate resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type CertificateV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificate) || (has(self.initProvider) && has(self.initProvider.certificate))",message="spec.forProvider.certificate is a required parameter"
	Spec   CertificateV3Spec   `json:"spec"`
	Status CertificateV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateV3List contains a list of CertificateV3s
type CertificateV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateV3 `json:"items"`
}

// Repository type metadata.
var (
	CertificateV3_Kind             = "CertificateV3"
	CertificateV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateV3_Kind}.String()
	CertificateV3_KindAPIVersion   = CertificateV3_Kind + "." + CRDGroupVersion.String()
	CertificateV3_GroupVersionKind = CRDGroupVersion.WithKind(CertificateV3_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateV3{}, &CertificateV3List{})
}
