// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LtsLogV3InitParameters struct {

	// Specifies the ID of a load balancer.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Specifies the ID of a log group.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the ID of the subscribe stream.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`
}

type LtsLogV3Observation struct {

	// The log ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of a load balancer.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Specifies the ID of a log group.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the ID of the subscribe stream.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// The region where resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type LtsLogV3Parameters struct {

	// Specifies the ID of a load balancer.
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Specifies the ID of a log group.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the ID of the subscribe stream.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`
}

// LtsLogV3Spec defines the desired state of LtsLogV3
type LtsLogV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LtsLogV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LtsLogV3InitParameters `json:"initProvider,omitempty"`
}

// LtsLogV3Status defines the observed state of LtsLogV3.
type LtsLogV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LtsLogV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LtsLogV3 is the Schema for the LtsLogV3s API. Manages a LB Access Log resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type LtsLogV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadbalancerId) || (has(self.initProvider) && has(self.initProvider.loadbalancerId))",message="spec.forProvider.loadbalancerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupId) || (has(self.initProvider) && has(self.initProvider.logGroupId))",message="spec.forProvider.logGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreamId) || (has(self.initProvider) && has(self.initProvider.logStreamId))",message="spec.forProvider.logStreamId is a required parameter"
	Spec   LtsLogV3Spec   `json:"spec"`
	Status LtsLogV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LtsLogV3List contains a list of LtsLogV3s
type LtsLogV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LtsLogV3 `json:"items"`
}

// Repository type metadata.
var (
	LtsLogV3_Kind             = "LtsLogV3"
	LtsLogV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LtsLogV3_Kind}.String()
	LtsLogV3_KindAPIVersion   = LtsLogV3_Kind + "." + CRDGroupVersion.String()
	LtsLogV3_GroupVersionKind = CRDGroupVersion.WithKind(LtsLogV3_Kind)
)

func init() {
	SchemeBuilder.Register(&LtsLogV3{}, &LtsLogV3List{})
}
