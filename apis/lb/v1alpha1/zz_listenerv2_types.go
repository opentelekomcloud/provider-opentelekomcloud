/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPGroupInitParameters struct {

	// Specifies whether to enable access control.
	// true: Access control will be enabled.
	// false (default): Access control will be disabled.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the ID of the IP address group associated with the listener.
	// Specifies the ID of the IP address group associated with the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to whitelist, no IP addresses are allowed to access the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to blacklist, any IP address is allowed to access the listener.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies how access to the listener is controlled.
	// white (default): A whitelist will be configured. Only IP addresses in the whitelist can access the listener.
	// black: A blacklist will be configured. IP addresses in the blacklist are not allowed to access the listener.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPGroupObservation struct {

	// Specifies whether to enable access control.
	// true: Access control will be enabled.
	// false (default): Access control will be disabled.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the ID of the IP address group associated with the listener.
	// Specifies the ID of the IP address group associated with the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to whitelist, no IP addresses are allowed to access the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to blacklist, any IP address is allowed to access the listener.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies how access to the listener is controlled.
	// white (default): A whitelist will be configured. Only IP addresses in the whitelist can access the listener.
	// black: A blacklist will be configured. IP addresses in the blacklist are not allowed to access the listener.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPGroupParameters struct {

	// Specifies whether to enable access control.
	// true: Access control will be enabled.
	// false (default): Access control will be disabled.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the ID of the IP address group associated with the listener.
	// Specifies the ID of the IP address group associated with the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to whitelist, no IP addresses are allowed to access the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to blacklist, any IP address is allowed to access the listener.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Specifies how access to the listener is controlled.
	// white (default): A whitelist will be configured. Only IP addresses in the whitelist can access the listener.
	// black: A blacklist will be configured. IP addresses in the blacklist are not allowed to access the listener.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ListenerV2InitParameters struct {

	// The administrative state of the Listener.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the ID of a certificate container of type client
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// The loadbalancer only establishes a TLS connection if the client presents a certificate delivered by
	// the client CA whose certificate is registered in the referenced certificate container. The option is
	// effective only in conjunction with TERMINATED_HTTPS.
	ClientCATLSContainerRef *string `json:"clientCaTlsContainerRef,omitempty" tf:"client_ca_tls_container_ref,omitempty"`

	// The ID of the default pool with which the
	// Listener is associated. Changing this creates a new Listener.
	DefaultPoolID *string `json:"defaultPoolId,omitempty" tf:"default_pool_id,omitempty"`

	// Specifies the ID of a certificate container of type server
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// This parameter is required when protocol is set to TERMINATED_HTTPS.
	// See here
	// for more information.
	DefaultTLSContainerRef *string `json:"defaultTlsContainerRef,omitempty" tf:"default_tls_container_ref,omitempty"`

	// Human-readable description for the Listener.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// true to enable HTTP/2 mode of ELB.
	// HTTP/2 is disabled by default if not set.
	Http2Enable *bool `json:"http2Enable,omitempty" tf:"http2_enable,omitempty"`

	// Specifies the IP address group associated with the listener.
	IPGroup []IPGroupInitParameters `json:"ipGroup,omitempty" tf:"ip_group,omitempty"`

	// The load balancer on which to provision this
	// Listener. Changing this creates a new Listener.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the Listener. Does not have
	// to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS or TERMINATED_HTTPS.
	// Changing this creates a new Listener.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The port on which to listen for client traffic.
	// Changing this creates a new Listener.
	ProtocolPort *float64 `json:"protocolPort,omitempty" tf:"protocol_port,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Lists the IDs of SNI certificates (server certificates with a domain name) used
	// by the listener. If the parameter value is an empty list, the SNI feature is disabled.
	// The default value is []. It only works in conjunction with TERMINATED_HTTPS.
	// +listType=set
	SniContainerRefs []*string `json:"sniContainerRefs,omitempty" tf:"sni_container_refs,omitempty"`

	// Controls the TLS version used. Supported values are tls-1-0, tls-1-1,
	// tls-1-2 and tls-1-2-strict. If not set, the loadbalancer uses tls-1-0. See
	// here for details about the supported cipher
	// suites. The option is effective only in conjunction with TERMINATED_HTTPS.
	TLSCiphersPolicy *string `json:"tlsCiphersPolicy,omitempty" tf:"tls_ciphers_policy,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer listener.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Listener.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new Listener.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies whether to pass source IP addresses of the clients to
	// backend servers. The value is always true for HTTP and HTTPS listeners. For TCP and UDP listeners the
	// value can be true or false with false by default.
	TransparentClientIPEnable *bool `json:"transparentClientIpEnable,omitempty" tf:"transparent_client_ip_enable,omitempty"`
}

type ListenerV2Observation struct {

	// The administrative state of the Listener.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the ID of a certificate container of type client
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// The loadbalancer only establishes a TLS connection if the client presents a certificate delivered by
	// the client CA whose certificate is registered in the referenced certificate container. The option is
	// effective only in conjunction with TERMINATED_HTTPS.
	ClientCATLSContainerRef *string `json:"clientCaTlsContainerRef,omitempty" tf:"client_ca_tls_container_ref,omitempty"`

	// The ID of the default pool with which the
	// Listener is associated. Changing this creates a new Listener.
	DefaultPoolID *string `json:"defaultPoolId,omitempty" tf:"default_pool_id,omitempty"`

	// Specifies the ID of a certificate container of type server
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// This parameter is required when protocol is set to TERMINATED_HTTPS.
	// See here
	// for more information.
	DefaultTLSContainerRef *string `json:"defaultTlsContainerRef,omitempty" tf:"default_tls_container_ref,omitempty"`

	// Human-readable description for the Listener.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// true to enable HTTP/2 mode of ELB.
	// HTTP/2 is disabled by default if not set.
	Http2Enable *bool `json:"http2Enable,omitempty" tf:"http2_enable,omitempty"`

	// Specifies the ID of the IP address group associated with the listener.
	// Specifies the ID of the IP address group associated with the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to whitelist, no IP addresses are allowed to access the listener.
	// If ip_list in opentelekomcloud_lb_ipgroup_v3 is set to an empty array [] and type to blacklist, any IP address is allowed to access the listener.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the IP address group associated with the listener.
	IPGroup []IPGroupObservation `json:"ipGroup,omitempty" tf:"ip_group,omitempty"`

	// The load balancer on which to provision this
	// Listener. Changing this creates a new Listener.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the Listener. Does not have
	// to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS or TERMINATED_HTTPS.
	// Changing this creates a new Listener.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The port on which to listen for client traffic.
	// Changing this creates a new Listener.
	ProtocolPort *float64 `json:"protocolPort,omitempty" tf:"protocol_port,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Lists the IDs of SNI certificates (server certificates with a domain name) used
	// by the listener. If the parameter value is an empty list, the SNI feature is disabled.
	// The default value is []. It only works in conjunction with TERMINATED_HTTPS.
	// +listType=set
	SniContainerRefs []*string `json:"sniContainerRefs,omitempty" tf:"sni_container_refs,omitempty"`

	// Controls the TLS version used. Supported values are tls-1-0, tls-1-1,
	// tls-1-2 and tls-1-2-strict. If not set, the loadbalancer uses tls-1-0. See
	// here for details about the supported cipher
	// suites. The option is effective only in conjunction with TERMINATED_HTTPS.
	TLSCiphersPolicy *string `json:"tlsCiphersPolicy,omitempty" tf:"tls_ciphers_policy,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer listener.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Listener.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new Listener.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies whether to pass source IP addresses of the clients to
	// backend servers. The value is always true for HTTP and HTTPS listeners. For TCP and UDP listeners the
	// value can be true or false with false by default.
	TransparentClientIPEnable *bool `json:"transparentClientIpEnable,omitempty" tf:"transparent_client_ip_enable,omitempty"`
}

type ListenerV2Parameters struct {

	// The administrative state of the Listener.
	// A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the ID of a certificate container of type client
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// The loadbalancer only establishes a TLS connection if the client presents a certificate delivered by
	// the client CA whose certificate is registered in the referenced certificate container. The option is
	// effective only in conjunction with TERMINATED_HTTPS.
	// +kubebuilder:validation:Optional
	ClientCATLSContainerRef *string `json:"clientCaTlsContainerRef,omitempty" tf:"client_ca_tls_container_ref,omitempty"`

	// The ID of the default pool with which the
	// Listener is associated. Changing this creates a new Listener.
	// +kubebuilder:validation:Optional
	DefaultPoolID *string `json:"defaultPoolId,omitempty" tf:"default_pool_id,omitempty"`

	// Specifies the ID of a certificate container of type server
	// used by the listener. The value contains a maximum of 128 characters. The default value is null.
	// This parameter is required when protocol is set to TERMINATED_HTTPS.
	// See here
	// for more information.
	// +kubebuilder:validation:Optional
	DefaultTLSContainerRef *string `json:"defaultTlsContainerRef,omitempty" tf:"default_tls_container_ref,omitempty"`

	// Human-readable description for the Listener.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// true to enable HTTP/2 mode of ELB.
	// HTTP/2 is disabled by default if not set.
	// +kubebuilder:validation:Optional
	Http2Enable *bool `json:"http2Enable,omitempty" tf:"http2_enable,omitempty"`

	// Specifies the IP address group associated with the listener.
	// +kubebuilder:validation:Optional
	IPGroup []IPGroupParameters `json:"ipGroup,omitempty" tf:"ip_group,omitempty"`

	// The load balancer on which to provision this
	// Listener. Changing this creates a new Listener.
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the Listener. Does not have
	// to be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS or TERMINATED_HTTPS.
	// Changing this creates a new Listener.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The port on which to listen for client traffic.
	// Changing this creates a new Listener.
	// +kubebuilder:validation:Optional
	ProtocolPort *float64 `json:"protocolPort,omitempty" tf:"protocol_port,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Lists the IDs of SNI certificates (server certificates with a domain name) used
	// by the listener. If the parameter value is an empty list, the SNI feature is disabled.
	// The default value is []. It only works in conjunction with TERMINATED_HTTPS.
	// +kubebuilder:validation:Optional
	// +listType=set
	SniContainerRefs []*string `json:"sniContainerRefs,omitempty" tf:"sni_container_refs,omitempty"`

	// Controls the TLS version used. Supported values are tls-1-0, tls-1-1,
	// tls-1-2 and tls-1-2-strict. If not set, the loadbalancer uses tls-1-0. See
	// here for details about the supported cipher
	// suites. The option is effective only in conjunction with TERMINATED_HTTPS.
	// +kubebuilder:validation:Optional
	TLSCiphersPolicy *string `json:"tlsCiphersPolicy,omitempty" tf:"tls_ciphers_policy,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer listener.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Listener.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new Listener.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies whether to pass source IP addresses of the clients to
	// backend servers. The value is always true for HTTP and HTTPS listeners. For TCP and UDP listeners the
	// value can be true or false with false by default.
	// +kubebuilder:validation:Optional
	TransparentClientIPEnable *bool `json:"transparentClientIpEnable,omitempty" tf:"transparent_client_ip_enable,omitempty"`
}

// ListenerV2Spec defines the desired state of ListenerV2
type ListenerV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ListenerV2InitParameters `json:"initProvider,omitempty"`
}

// ListenerV2Status defines the observed state of ListenerV2.
type ListenerV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ListenerV2 is the Schema for the ListenerV2s API. Manages a ELB Listener resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ListenerV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadbalancerId) || (has(self.initProvider) && has(self.initProvider.loadbalancerId))",message="spec.forProvider.loadbalancerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocolPort) || (has(self.initProvider) && has(self.initProvider.protocolPort))",message="spec.forProvider.protocolPort is a required parameter"
	Spec   ListenerV2Spec   `json:"spec"`
	Status ListenerV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerV2List contains a list of ListenerV2s
type ListenerV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ListenerV2 `json:"items"`
}

// Repository type metadata.
var (
	ListenerV2_Kind             = "ListenerV2"
	ListenerV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ListenerV2_Kind}.String()
	ListenerV2_KindAPIVersion   = ListenerV2_Kind + "." + CRDGroupVersion.String()
	ListenerV2_GroupVersionKind = CRDGroupVersion.WithKind(ListenerV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ListenerV2{}, &ListenerV2List{})
}
