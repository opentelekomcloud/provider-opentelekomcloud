/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadbalancerV2InitParameters struct {

	// The administrative state of the loadbalancer.
	// A valid value is only true (UP).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Human-readable description for the loadbalancer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the provider. Changing this
	// creates a new loadbalancer.
	LoadbalancerProvider *string `json:"loadbalancerProvider,omitempty" tf:"loadbalancer_provider,omitempty"`

	// Human-readable name for the loadbalancer. Does not have
	// to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Loadbalancer.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new loadbalancer.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The ip address of the load balancer.
	// Changing this creates a new loadbalancer.
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// The network on which to allocate the
	// loadbalancer's address. A tenant can only create loadalancers on networks
	// authorized by policy (e.g. networks that belong to them or networks that
	// are shared). Changing this creates a new loadbalancer.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type LoadbalancerV2Observation struct {

	// The administrative state of the loadbalancer.
	// A valid value is only true (UP).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Human-readable description for the loadbalancer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the provider. Changing this
	// creates a new loadbalancer.
	LoadbalancerProvider *string `json:"loadbalancerProvider,omitempty" tf:"loadbalancer_provider,omitempty"`

	// Human-readable name for the loadbalancer. Does not have
	// to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Loadbalancer.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new loadbalancer.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The ip address of the load balancer.
	// Changing this creates a new loadbalancer.
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// The Port ID of the Load Balancer IP.
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// The network on which to allocate the
	// loadbalancer's address. A tenant can only create loadalancers on networks
	// authorized by policy (e.g. networks that belong to them or networks that
	// are shared). Changing this creates a new loadbalancer.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type LoadbalancerV2Parameters struct {

	// The administrative state of the loadbalancer.
	// A valid value is only true (UP).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Human-readable description for the loadbalancer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the provider. Changing this
	// creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	LoadbalancerProvider *string `json:"loadbalancerProvider,omitempty" tf:"loadbalancer_provider,omitempty"`

	// Human-readable name for the loadbalancer. Does not have
	// to be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags key/value pairs to associate with the loadbalancer.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the Loadbalancer.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The ip address of the load balancer.
	// Changing this creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// The network on which to allocate the
	// loadbalancer's address. A tenant can only create loadalancers on networks
	// authorized by policy (e.g. networks that belong to them or networks that
	// are shared). Changing this creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

// LoadbalancerV2Spec defines the desired state of LoadbalancerV2
type LoadbalancerV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadbalancerV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LoadbalancerV2InitParameters `json:"initProvider,omitempty"`
}

// LoadbalancerV2Status defines the observed state of LoadbalancerV2.
type LoadbalancerV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadbalancerV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LoadbalancerV2 is the Schema for the LoadbalancerV2s API. Manages a ELB Loadbalancer resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type LoadbalancerV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vipSubnetId) || (has(self.initProvider) && has(self.initProvider.vipSubnetId))",message="spec.forProvider.vipSubnetId is a required parameter"
	Spec   LoadbalancerV2Spec   `json:"spec"`
	Status LoadbalancerV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerV2List contains a list of LoadbalancerV2s
type LoadbalancerV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadbalancerV2 `json:"items"`
}

// Repository type metadata.
var (
	LoadbalancerV2_Kind             = "LoadbalancerV2"
	LoadbalancerV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadbalancerV2_Kind}.String()
	LoadbalancerV2_KindAPIVersion   = LoadbalancerV2_Kind + "." + CRDGroupVersion.String()
	LoadbalancerV2_GroupVersionKind = CRDGroupVersion.WithKind(LoadbalancerV2_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadbalancerV2{}, &LoadbalancerV2List{})
}
