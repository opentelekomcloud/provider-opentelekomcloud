/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MonitorV3InitParameters struct {

	// Specifies the administrative status of the health check.
	// true indicates that the health check is enabled, and false indicates that the health check is disabled.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the interval between health checks, in seconds.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Specifies the domain name that HTTP requests are sent to during the health check.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the expected HTTP status code. This parameter will take effect only
	// when type is set to HTTP.
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// Specifies the HTTP method.
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a backend
	// server changes from OFFLINE to ONLINE.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a
	// backend server changes from ONLINE to OFFLINE.
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// Specifies the port used for the health check. If this parameter is left blank, the port of
	// the backend server group will be used by default.
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Specifies the health check name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the backend server group for which the health check is configured.
	// Changing this creates a new monitor.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/lb/v1alpha1.PoolV3
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a PoolV3 in lb to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a PoolV3 in lb to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// Specifies the project ID. Changing this creates a new monitor.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/identity/v1alpha1.ProjectV3
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Specifies the maximum time required for waiting for a response from the health check, in
	// seconds.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the health check protocol.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the HTTP request path for the health check.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

type MonitorV3Observation struct {

	// Specifies the administrative status of the health check.
	// true indicates that the health check is enabled, and false indicates that the health check is disabled.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the interval between health checks, in seconds.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Specifies the domain name that HTTP requests are sent to during the health check.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the expected HTTP status code. This parameter will take effect only
	// when type is set to HTTP.
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// Specifies the HTTP method.
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// Specifies the health check (monitor) ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a backend
	// server changes from OFFLINE to ONLINE.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a
	// backend server changes from ONLINE to OFFLINE.
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// Specifies the port used for the health check. If this parameter is left blank, the port of
	// the backend server group will be used by default.
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Specifies the health check name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the backend server group for which the health check is configured.
	// Changing this creates a new monitor.
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Specifies the project ID. Changing this creates a new monitor.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the maximum time required for waiting for a response from the health check, in
	// seconds.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the health check protocol.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the HTTP request path for the health check.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

type MonitorV3Parameters struct {

	// Specifies the administrative status of the health check.
	// true indicates that the health check is enabled, and false indicates that the health check is disabled.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Specifies the interval between health checks, in seconds.
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Specifies the domain name that HTTP requests are sent to during the health check.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the expected HTTP status code. This parameter will take effect only
	// when type is set to HTTP.
	// +kubebuilder:validation:Optional
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// Specifies the HTTP method.
	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a backend
	// server changes from OFFLINE to ONLINE.
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Specifies the number of consecutive health checks when the health check result of a
	// backend server changes from ONLINE to OFFLINE.
	// +kubebuilder:validation:Optional
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// Specifies the port used for the health check. If this parameter is left blank, the port of
	// the backend server group will be used by default.
	// +kubebuilder:validation:Optional
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Specifies the health check name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the backend server group for which the health check is configured.
	// Changing this creates a new monitor.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/lb/v1alpha1.PoolV3
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a PoolV3 in lb to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a PoolV3 in lb to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// Specifies the project ID. Changing this creates a new monitor.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/identity/v1alpha1.ProjectV3
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Specifies the maximum time required for waiting for a response from the health check, in
	// seconds.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the health check protocol.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the HTTP request path for the health check.
	// +kubebuilder:validation:Optional
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

// MonitorV3Spec defines the desired state of MonitorV3
type MonitorV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorV3InitParameters `json:"initProvider,omitempty"`
}

// MonitorV3Status defines the observed state of MonitorV3.
type MonitorV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MonitorV3 is the Schema for the MonitorV3s API. Manages a LB Monitor resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type MonitorV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.delay) || (has(self.initProvider) && has(self.initProvider.delay))",message="spec.forProvider.delay is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxRetries) || (has(self.initProvider) && has(self.initProvider.maxRetries))",message="spec.forProvider.maxRetries is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeout) || (has(self.initProvider) && has(self.initProvider.timeout))",message="spec.forProvider.timeout is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MonitorV3Spec   `json:"spec"`
	Status MonitorV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorV3List contains a list of MonitorV3s
type MonitorV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorV3 `json:"items"`
}

// Repository type metadata.
var (
	MonitorV3_Kind             = "MonitorV3"
	MonitorV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorV3_Kind}.String()
	MonitorV3_KindAPIVersion   = MonitorV3_Kind + "." + CRDGroupVersion.String()
	MonitorV3_GroupVersionKind = CRDGroupVersion.WithKind(MonitorV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorV3{}, &MonitorV3List{})
}
