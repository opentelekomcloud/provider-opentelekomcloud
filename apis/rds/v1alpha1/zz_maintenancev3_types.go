// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MaintenanceV3InitParameters struct {

	// Specifies the end time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The ID of the RDS instance to which the maintenance window belongs.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the start time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenanceV3Observation struct {

	// Specifies the end time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the RDS instance to which the maintenance window belongs.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the start time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenanceV3Parameters struct {

	// Specifies the end time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The ID of the RDS instance to which the maintenance window belongs.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the start time.
	// The value must be a valid value in the "HH:MM" format. The current time is in the UTC format.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

// MaintenanceV3Spec defines the desired state of MaintenanceV3
type MaintenanceV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MaintenanceV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MaintenanceV3InitParameters `json:"initProvider,omitempty"`
}

// MaintenanceV3Status defines the observed state of MaintenanceV3.
type MaintenanceV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MaintenanceV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MaintenanceV3 is the Schema for the MaintenanceV3s API. Manages an RDS Maintenance windows resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type MaintenanceV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endTime) || (has(self.initProvider) && has(self.initProvider.endTime))",message="spec.forProvider.endTime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startTime) || (has(self.initProvider) && has(self.initProvider.startTime))",message="spec.forProvider.startTime is a required parameter"
	Spec   MaintenanceV3Spec   `json:"spec"`
	Status MaintenanceV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceV3List contains a list of MaintenanceV3s
type MaintenanceV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MaintenanceV3 `json:"items"`
}

// Repository type metadata.
var (
	MaintenanceV3_Kind             = "MaintenanceV3"
	MaintenanceV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MaintenanceV3_Kind}.String()
	MaintenanceV3_KindAPIVersion   = MaintenanceV3_Kind + "." + CRDGroupVersion.String()
	MaintenanceV3_GroupVersionKind = CRDGroupVersion.WithKind(MaintenanceV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MaintenanceV3{}, &MaintenanceV3List{})
}
