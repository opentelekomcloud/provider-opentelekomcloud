/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyInitParameters struct {

	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	BackupAt []*float64 `json:"backupAt,omitempty" tf:"backup_at,omitempty"`

	// Backup type. Default value is auto. The valid values are as follows:
	BackupType *string `json:"backupType,omitempty" tf:"backup_type,omitempty"`

	// Time at which backup starts.
	// Format: hh24:00-hh24:00, "00:00-01:00" indicates that backup starts at 00:00:00.
	BeginAt *string `json:"beginAt,omitempty" tf:"begin_at,omitempty"`

	// Interval at which backup is performed. Default value is weekly.
	// Currently, only weekly backup is supported.
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Retention time. Unit: day, the value ranges from 1 to 7.
	// This parameter is required if the backup_type is auto.
	SaveDays *float64 `json:"saveDays,omitempty" tf:"save_days,omitempty"`
}

type BackupPolicyObservation struct {

	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	BackupAt []*float64 `json:"backupAt,omitempty" tf:"backup_at,omitempty"`

	// Backup type. Default value is auto. The valid values are as follows:
	BackupType *string `json:"backupType,omitempty" tf:"backup_type,omitempty"`

	// Time at which backup starts.
	// Format: hh24:00-hh24:00, "00:00-01:00" indicates that backup starts at 00:00:00.
	BeginAt *string `json:"beginAt,omitempty" tf:"begin_at,omitempty"`

	// Interval at which backup is performed. Default value is weekly.
	// Currently, only weekly backup is supported.
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Retention time. Unit: day, the value ranges from 1 to 7.
	// This parameter is required if the backup_type is auto.
	SaveDays *float64 `json:"saveDays,omitempty" tf:"save_days,omitempty"`
}

type BackupPolicyParameters struct {

	// Day in a week on which backup starts, the value ranges from 1 to 7.
	// Where: 1 indicates Monday; 7 indicates Sunday.
	// +kubebuilder:validation:Optional
	BackupAt []*float64 `json:"backupAt" tf:"backup_at,omitempty"`

	// Backup type. Default value is auto. The valid values are as follows:
	// +kubebuilder:validation:Optional
	BackupType *string `json:"backupType,omitempty" tf:"backup_type,omitempty"`

	// Time at which backup starts.
	// Format: hh24:00-hh24:00, "00:00-01:00" indicates that backup starts at 00:00:00.
	// +kubebuilder:validation:Optional
	BeginAt *string `json:"beginAt" tf:"begin_at,omitempty"`

	// Interval at which backup is performed. Default value is weekly.
	// Currently, only weekly backup is supported.
	// +kubebuilder:validation:Optional
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Retention time. Unit: day, the value ranges from 1 to 7.
	// This parameter is required if the backup_type is auto.
	// +kubebuilder:validation:Optional
	SaveDays *float64 `json:"saveDays,omitempty" tf:"save_days,omitempty"`
}

type BandwidthInfoInitParameters struct {
}

type BandwidthInfoObservation struct {

	// Indicates the bandwidth size, the unit is GB.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Indicates the begin time of temporary increase.
	BeginTime *string `json:"beginTime,omitempty" tf:"begin_time,omitempty"`

	// Indicates the current time.
	CurrentTime *string `json:"currentTime,omitempty" tf:"current_time,omitempty"`

	// Indicates the end time of temporary increase.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Indicates the number of increases.
	ExpandCount *float64 `json:"expandCount,omitempty" tf:"expand_count,omitempty"`

	// Indicates the interval between temporary increases, the unit is ms.
	ExpandEffectTime *float64 `json:"expandEffectTime,omitempty" tf:"expand_effect_time,omitempty"`

	// Indicates the time interval to the next increase, the unit is ms.
	ExpandIntervalTime *float64 `json:"expandIntervalTime,omitempty" tf:"expand_interval_time,omitempty"`

	// Indicates the maximum number of increases.
	MaxExpandCount *float64 `json:"maxExpandCount,omitempty" tf:"max_expand_count,omitempty"`

	// Indicates the next increase time.
	NextExpandTime *string `json:"nextExpandTime,omitempty" tf:"next_expand_time,omitempty"`

	// Indicates whether the increase task is running.
	TaskRunning *bool `json:"taskRunning,omitempty" tf:"task_running,omitempty"`
}

type BandwidthInfoParameters struct {
}

type InstanceV2InitParameters struct {

	// Specifies the username used for accessing a DCS instance.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser *string `json:"accessUser,omitempty" tf:"access_user,omitempty"`

	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy []BackupPolicyInitParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// Specifies the cache capacity. Unit: GB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Specifies the ID of the replica to delete. This parameter is mandatory when
	// you delete replicas of a master/standby DCS Redis 4.0 or 5.0 instance. Currently, only one replica can be deleted
	// at a time.
	DeletedNodes []*string `json:"deletedNodes,omitempty" tf:"deleted_nodes,omitempty"`

	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// Specifies a cache engine. Options: Redis and Memcached.
	// Changing this creates a new instance.
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Specifies the version of a cache engine.
	// It is mandatory when the engine is Redis, the value can be 3.0, 4.0, 5.0 or 6.0.
	// Changing this creates a new instance.
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the flavor as follows:
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Time at which the maintenance time window starts. Defaults to 02:00:00.
	MaintainBegin *string `json:"maintainBegin,omitempty" tf:"maintain_begin,omitempty"`

	// Time at which the maintenance time window ends. Defaults to 06:00:00.
	MaintainEnd *string `json:"maintainEnd,omitempty" tf:"maintain_end,omitempty"`

	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify an array of one or more parameters to be set to the DCS instance after
	// launched. You can check on console to see which parameters supported.
	// The parameters structure is documented below.
	Parameters []ParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the password of a DCS instance.
	// The password of a DCS instance must meet the following complexity requirements:
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	// Redis instance defaults to 6379. Memcached instance does not use this argument.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: command, keys, flushdb, flushall and hgetall.
	// +mapType=granular
	RenameCommands map[string]*string `json:"renameCommands,omitempty" tf:"rename_commands,omitempty"`

	// Specifies IP addresses to retain. Mandatory during cluster scale-in. If this
	// parameter is not set, the system randomly deletes unnecessary shards.
	ReservedIps []*string `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// Specifies whether to enable the SSL. Value options: true, false.
	SSLEnable *bool `json:"sslEnable,omitempty" tf:"ssl_enable,omitempty"`

	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.SecgroupV2
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecgroupV2 in compute to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecgroupV2 in compute to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.SubnetV1
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractNetworkID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a SubnetV1 in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a SubnetV1 in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The key/value pairs to associate with the dcs instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Parameter Template ID.
	// Changing this creates a new instance resource.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.VpcV1
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VpcV1 in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VpcV1 in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelist []WhitelistInitParameters `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type InstanceV2Observation struct {

	// Specifies the username used for accessing a DCS instance.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	AccessUser *string `json:"accessUser,omitempty" tf:"access_user,omitempty"`

	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	BackupPolicy []BackupPolicyObservation `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// Indicates the bandwidth information of the instance.
	// The bandwidth_info structure is documented below.
	BandwidthInfo []BandwidthInfoObservation `json:"bandwidthInfo,omitempty" tf:"bandwidth_info,omitempty"`

	// Indicates the CPU type of the instance. The value can be x86_64 or aarch64.
	CPUType *string `json:"cpuType,omitempty" tf:"cpu_type,omitempty"`

	// Indicates the instance type. The value can be single, ha, cluster or proxy.
	CacheMode *string `json:"cacheMode,omitempty" tf:"cache_mode,omitempty"`

	// Specifies the cache capacity. Unit: GB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Indicates the time when the instance is created, in RFC3339 format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the ID of the replica to delete. This parameter is mandatory when
	// you delete replicas of a master/standby DCS Redis 4.0 or 5.0 instance. Currently, only one replica can be deleted
	// at a time.
	DeletedNodes []*string `json:"deletedNodes,omitempty" tf:"deleted_nodes,omitempty"`

	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Domain name of the instance. Usually, we use domain name and port to connect to the DCS instances.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// Specifies a cache engine. Options: Redis and Memcached.
	// Changing this creates a new instance.
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Specifies the version of a cache engine.
	// It is mandatory when the engine is Redis, the value can be 3.0, 4.0, 5.0 or 6.0.
	// Changing this creates a new instance.
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the flavor as follows:
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// A resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the time when the instance is started, in RFC3339 format.
	LaunchedAt *string `json:"launchedAt,omitempty" tf:"launched_at,omitempty"`

	// Time at which the maintenance time window starts. Defaults to 02:00:00.
	MaintainBegin *string `json:"maintainBegin,omitempty" tf:"maintain_begin,omitempty"`

	// Time at which the maintenance time window ends. Defaults to 06:00:00.
	MaintainEnd *string `json:"maintainEnd,omitempty" tf:"maintain_end,omitempty"`

	// Total memory size. Unit: MB.
	MaxMemory *float64 `json:"maxMemory,omitempty" tf:"max_memory,omitempty"`

	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify an array of one or more parameters to be set to the DCS instance after
	// launched. You can check on console to see which parameters supported.
	// The parameters structure is documented below.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	// Redis instance defaults to 6379. Memcached instance does not use this argument.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Indicates the product type of the instance. The value can be: generic or enterprise.
	ProductType *string `json:"productType,omitempty" tf:"product_type,omitempty"`

	// Indicates the read-only domain name of the instance. This parameter is available
	// only for master/standby instances.
	ReadonlyDomainName *string `json:"readonlyDomainName,omitempty" tf:"readonly_domain_name,omitempty"`

	// Indicates the region in which DCS instance resource is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: command, keys, flushdb, flushall and hgetall.
	// +mapType=granular
	RenameCommands map[string]*string `json:"renameCommands,omitempty" tf:"rename_commands,omitempty"`

	// Indicates the number of replicas in the instance.
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Specifies IP addresses to retain. Mandatory during cluster scale-in. If this
	// parameter is not set, the system randomly deletes unnecessary shards.
	ReservedIps []*string `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// Specifies whether to enable the SSL. Value options: true, false.
	SSLEnable *bool `json:"sslEnable,omitempty" tf:"ssl_enable,omitempty"`

	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// The name of security group which the instance belongs to.
	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`

	// Indicates the number of shards in a cluster instance.
	ShardingCount *float64 `json:"shardingCount,omitempty" tf:"sharding_count,omitempty"`

	// Cache instance status. The valid values are as follows:
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates the subnet segment.
	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr,omitempty"`

	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The name of subnet which the instance belongs to.
	SubnetName *string `json:"subnetName,omitempty" tf:"subnet_name,omitempty"`

	// The key/value pairs to associate with the dcs instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Parameter Template ID.
	// Changing this creates a new instance resource.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// Indicates whether client IP pass-through is enabled.
	TransparentClientIPEnable *bool `json:"transparentClientIpEnable,omitempty" tf:"transparent_client_ip_enable,omitempty"`

	// Size of the used memory. Unit: MB.
	UsedMemory *float64 `json:"usedMemory,omitempty" tf:"used_memory,omitempty"`

	// A resource ID in UUID format.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The name of VPC which the instance belongs to.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`

	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	Whitelist []WhitelistObservation `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type InstanceV2Parameters struct {

	// Specifies the username used for accessing a DCS instance.
	// The username starts with a letter, consists of 1 to 64 characters, and supports only letters, digits, and
	// hyphens (-). Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	AccessUser *string `json:"accessUser,omitempty" tf:"access_user,omitempty"`

	// The code of the AZ where the cache node resides.
	// Master/Standby, Proxy Cluster, and Redis Cluster DCS instances support cross-AZ deployment.
	// You can specify an AZ for the standby node. When specifying AZs for nodes, use commas (,) to separate AZs.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Specifies the backup configuration to be used with the instance.
	// The structure is described below.
	// +kubebuilder:validation:Optional
	BackupPolicy []BackupPolicyParameters `json:"backupPolicy,omitempty" tf:"backup_policy,omitempty"`

	// Specifies the cache capacity. Unit: GB.
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Specifies the ID of the replica to delete. This parameter is mandatory when
	// you delete replicas of a master/standby DCS Redis 4.0 or 5.0 instance. Currently, only one replica can be deleted
	// at a time.
	// +kubebuilder:validation:Optional
	DeletedNodes []*string `json:"deletedNodes,omitempty" tf:"deleted_nodes,omitempty"`

	// Specifies the description of an instance.
	// It is a string that contains a maximum of 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable or disable the IP address whitelists. Defaults to true.
	// If the whitelist is disabled, all IP addresses connected to the VPC can access the instance.
	// +kubebuilder:validation:Optional
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// Specifies a cache engine. Options: Redis and Memcached.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Specifies the version of a cache engine.
	// It is mandatory when the engine is Redis, the value can be 3.0, 4.0, 5.0 or 6.0.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// The flavor of the cache instance, which including the total memory, available memory,
	// maximum number of connections allowed, maximum/assured bandwidth and reference performance.
	// It also includes the modes of Redis instances. You can query the flavor as follows:
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Time at which the maintenance time window starts. Defaults to 02:00:00.
	// +kubebuilder:validation:Optional
	MaintainBegin *string `json:"maintainBegin,omitempty" tf:"maintain_begin,omitempty"`

	// Time at which the maintenance time window ends. Defaults to 06:00:00.
	// +kubebuilder:validation:Optional
	MaintainEnd *string `json:"maintainEnd,omitempty" tf:"maintain_end,omitempty"`

	// Specifies the name of an instance.
	// The name must be 4 to 64 characters and start with a letter.
	// Only chinese, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify an array of one or more parameters to be set to the DCS instance after
	// launched. You can check on console to see which parameters supported.
	// The parameters structure is documented below.
	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the password of a DCS instance.
	// The password of a DCS instance must meet the following complexity requirements:
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances.
	// Redis instance defaults to 6379. Memcached instance does not use this argument.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The IP address of the DCS instance,
	// which can only be the currently available IP address the selected subnet.
	// You can specify an available IP for the Redis instance (except for the Redis Cluster type).
	// If omitted, the system will automatically allocate an available IP address to the Redis instance.
	// Changing this creates a new instance resource.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Critical command renaming, which is supported only by Redis 4.0 and
	// Redis 5.0 instances but not by Redis 3.0 instance.
	// The valid commands that can be renamed are: command, keys, flushdb, flushall and hgetall.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RenameCommands map[string]*string `json:"renameCommands,omitempty" tf:"rename_commands,omitempty"`

	// Specifies IP addresses to retain. Mandatory during cluster scale-in. If this
	// parameter is not set, the system randomly deletes unnecessary shards.
	// +kubebuilder:validation:Optional
	ReservedIps []*string `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// Specifies whether to enable the SSL. Value options: true, false.
	// +kubebuilder:validation:Optional
	SSLEnable *bool `json:"sslEnable,omitempty" tf:"ssl_enable,omitempty"`

	// The ID of the security group which the instance belongs to.
	// This parameter is mandatory for Memcached and Redis 3.0 version.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.SecgroupV2
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecgroupV2 in compute to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecgroupV2 in compute to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// The ID of subnet which the instance belongs to.
	// Changing this creates a new instance resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.SubnetV1
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractNetworkID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a SubnetV1 in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a SubnetV1 in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The key/value pairs to associate with the dcs instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Parameter Template ID.
	// Changing this creates a new instance resource.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// The ID of VPC which the instance belongs to.
	// Changing this creates a new instance resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.VpcV1
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VpcV1 in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VpcV1 in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// Specifies the IP addresses which can access the instance.
	// This parameter is valid for Redis 4.0 and 5.0 versions. The structure is described below.
	// +kubebuilder:validation:Optional
	Whitelist []WhitelistParameters `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type ParametersInitParameters struct {

	// Specifies the ID of the configuration item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the configuration item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the value of the configuration item.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParametersObservation struct {

	// Specifies the ID of the configuration item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the configuration item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the value of the configuration item.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParametersParameters struct {

	// Specifies the ID of the configuration item.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Specifies the name of the configuration item.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the value of the configuration item.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type WhitelistInitParameters struct {

	// Specifies the name of IP address group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the list of IP address or CIDR which can be whitelisted for an instance.
	// The maximum is 20.
	IPList []*string `json:"ipList,omitempty" tf:"ip_list,omitempty"`
}

type WhitelistObservation struct {

	// Specifies the name of IP address group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the list of IP address or CIDR which can be whitelisted for an instance.
	// The maximum is 20.
	IPList []*string `json:"ipList,omitempty" tf:"ip_list,omitempty"`
}

type WhitelistParameters struct {

	// Specifies the name of IP address group.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`

	// Specifies the list of IP address or CIDR which can be whitelisted for an instance.
	// The maximum is 20.
	// +kubebuilder:validation:Optional
	IPList []*string `json:"ipList" tf:"ip_list,omitempty"`
}

// InstanceV2Spec defines the desired state of InstanceV2
type InstanceV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceV2InitParameters `json:"initProvider,omitempty"`
}

// InstanceV2Status defines the observed state of InstanceV2.
type InstanceV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceV2 is the Schema for the InstanceV2s API. Manages a DCS Instance v2 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type InstanceV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZones) || (has(self.initProvider) && has(self.initProvider.availabilityZones))",message="spec.forProvider.availabilityZones is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) && has(self.initProvider.capacity))",message="spec.forProvider.capacity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engine) || (has(self.initProvider) && has(self.initProvider.engine))",message="spec.forProvider.engine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   InstanceV2Spec   `json:"spec"`
	Status InstanceV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV2List contains a list of InstanceV2s
type InstanceV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV2 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV2_Kind             = "InstanceV2"
	InstanceV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV2_Kind}.String()
	InstanceV2_KindAPIVersion   = InstanceV2_Kind + "." + CRDGroupVersion.String()
	InstanceV2_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV2_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV2{}, &InstanceV2List{})
}
