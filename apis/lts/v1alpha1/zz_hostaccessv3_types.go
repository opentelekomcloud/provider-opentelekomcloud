// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessConfigMultiLogFormatInitParameters struct {

	// Specifies mode of single-line log format. The options are as follows:
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccessConfigMultiLogFormatObservation struct {

	// Specifies mode of single-line log format. The options are as follows:
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccessConfigMultiLogFormatParameters struct {

	// Specifies mode of single-line log format. The options are as follows:
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccessConfigSingleLogFormatInitParameters struct {

	// Specifies mode of single-line log format. The options are as follows:
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccessConfigSingleLogFormatObservation struct {

	// Specifies mode of single-line log format. The options are as follows:
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccessConfigSingleLogFormatParameters struct {

	// Specifies mode of single-line log format. The options are as follows:
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Specifies value of single-line log format.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostAccessV3AccessConfigInitParameters struct {

	// Specifies the collection path blacklist.
	// +listType=set
	BlackPaths []*string `json:"blackPaths,omitempty" tf:"black_paths,omitempty"`

	// Specifies the configuration multi-line logs. Multiple lines of exception log events
	// can be displayed as a single log event. This is helpful when you check logs to locate problems.
	// The multi_log_format structure is documented below.
	MultiLogFormat []AccessConfigMultiLogFormatInitParameters `json:"multiLogFormat,omitempty" tf:"multi_log_format,omitempty"`

	// Specifies the collection paths.
	// +listType=set
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// Specifies the configuration single-line logs. Each log line is displayed as a
	// single log event. The single_log_format structure is documented below.
	SingleLogFormat []AccessConfigSingleLogFormatInitParameters `json:"singleLogFormat,omitempty" tf:"single_log_format,omitempty"`

	// Specifies the configuration of Windows event logs.
	// The windows_log_info structure is documented below.
	WindowsLogInfo []WindowsLogInfoInitParameters `json:"windowsLogInfo,omitempty" tf:"windows_log_info,omitempty"`
}

type HostAccessV3AccessConfigObservation struct {

	// Specifies the collection path blacklist.
	// +listType=set
	BlackPaths []*string `json:"blackPaths,omitempty" tf:"black_paths,omitempty"`

	// Specifies the configuration multi-line logs. Multiple lines of exception log events
	// can be displayed as a single log event. This is helpful when you check logs to locate problems.
	// The multi_log_format structure is documented below.
	MultiLogFormat []AccessConfigMultiLogFormatObservation `json:"multiLogFormat,omitempty" tf:"multi_log_format,omitempty"`

	// Specifies the collection paths.
	// +listType=set
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// Specifies the configuration single-line logs. Each log line is displayed as a
	// single log event. The single_log_format structure is documented below.
	SingleLogFormat []AccessConfigSingleLogFormatObservation `json:"singleLogFormat,omitempty" tf:"single_log_format,omitempty"`

	// Specifies the configuration of Windows event logs.
	// The windows_log_info structure is documented below.
	WindowsLogInfo []WindowsLogInfoObservation `json:"windowsLogInfo,omitempty" tf:"windows_log_info,omitempty"`
}

type HostAccessV3AccessConfigParameters struct {

	// Specifies the collection path blacklist.
	// +kubebuilder:validation:Optional
	// +listType=set
	BlackPaths []*string `json:"blackPaths,omitempty" tf:"black_paths,omitempty"`

	// Specifies the configuration multi-line logs. Multiple lines of exception log events
	// can be displayed as a single log event. This is helpful when you check logs to locate problems.
	// The multi_log_format structure is documented below.
	// +kubebuilder:validation:Optional
	MultiLogFormat []AccessConfigMultiLogFormatParameters `json:"multiLogFormat,omitempty" tf:"multi_log_format,omitempty"`

	// Specifies the collection paths.
	// +kubebuilder:validation:Optional
	// +listType=set
	Paths []*string `json:"paths" tf:"paths,omitempty"`

	// Specifies the configuration single-line logs. Each log line is displayed as a
	// single log event. The single_log_format structure is documented below.
	// +kubebuilder:validation:Optional
	SingleLogFormat []AccessConfigSingleLogFormatParameters `json:"singleLogFormat,omitempty" tf:"single_log_format,omitempty"`

	// Specifies the configuration of Windows event logs.
	// The windows_log_info structure is documented below.
	// +kubebuilder:validation:Optional
	WindowsLogInfo []WindowsLogInfoParameters `json:"windowsLogInfo,omitempty" tf:"windows_log_info,omitempty"`
}

type HostAccessV3InitParameters struct {

	// Specifies the configurations of host access.
	// The access_config structure is documented below.
	AccessConfig []HostAccessV3AccessConfigInitParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// Specifies whether collect in binary format. Default is false.
	BinaryCollect *bool `json:"binaryCollect,omitempty" tf:"binary_collect,omitempty"`

	// Specifies the log access host group ID list.
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	// Specifies the log group ID.
	// Changing this parameter will create a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies whether to split log. Default is false.
	LogSplit *bool `json:"logSplit,omitempty" tf:"log_split,omitempty"`

	// Specifies the log stream ID.
	// Changing this parameter will create a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the host access name. The name consists of 1 to 64 characters.
	// Only letters, digits, underscores (_), and periods (.) are allowed, and the period cannot be the first or last character.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the key/value to attach to the host access.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type HostAccessV3Observation struct {

	// Specifies the configurations of host access.
	// The access_config structure is documented below.
	AccessConfig []HostAccessV3AccessConfigObservation `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// The log access type.
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies whether collect in binary format. Default is false.
	BinaryCollect *bool `json:"binaryCollect,omitempty" tf:"binary_collect,omitempty"`

	// The creation time of the Host access, in RFC3339 format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the log access host group ID list.
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	// The ID of the host access.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the log group ID.
	// Changing this parameter will create a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// The log group name.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// Specifies whether to split log. Default is false.
	LogSplit *bool `json:"logSplit,omitempty" tf:"log_split,omitempty"`

	// Specifies the log stream ID.
	// Changing this parameter will create a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// The log stream name.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// Specifies the host access name. The name consists of 1 to 64 characters.
	// Only letters, digits, underscores (_), and periods (.) are allowed, and the period cannot be the first or last character.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Shows the region in the host access resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value to attach to the host access.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type HostAccessV3Parameters struct {

	// Specifies the configurations of host access.
	// The access_config structure is documented below.
	// +kubebuilder:validation:Optional
	AccessConfig []HostAccessV3AccessConfigParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// Specifies whether collect in binary format. Default is false.
	// +kubebuilder:validation:Optional
	BinaryCollect *bool `json:"binaryCollect,omitempty" tf:"binary_collect,omitempty"`

	// Specifies the log access host group ID list.
	// +kubebuilder:validation:Optional
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	// Specifies the log group ID.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies whether to split log. Default is false.
	// +kubebuilder:validation:Optional
	LogSplit *bool `json:"logSplit,omitempty" tf:"log_split,omitempty"`

	// Specifies the log stream ID.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the host access name. The name consists of 1 to 64 characters.
	// Only letters, digits, underscores (_), and periods (.) are allowed, and the period cannot be the first or last character.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the key/value to attach to the host access.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type WindowsLogInfoInitParameters struct {

	// Specifies the types of Windows event logs to collect. The valid values are
	// Application, System, Security and Setup.
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// Specifies the Windows event severity. The valid values are information, warning,
	// error, critical and verbose.
	EventLevel []*string `json:"eventLevel,omitempty" tf:"event_level,omitempty"`

	// Specifies the collection time offset. This time takes effect only for the first
	// time to ensure that the logs are not collected repeatedly.
	TimeOffset *float64 `json:"timeOffset,omitempty" tf:"time_offset,omitempty"`

	// Specifies the collection time offset unit. The valid values are
	// day, hour and sec.
	TimeOffsetUnit *string `json:"timeOffsetUnit,omitempty" tf:"time_offset_unit,omitempty"`
}

type WindowsLogInfoObservation struct {

	// Specifies the types of Windows event logs to collect. The valid values are
	// Application, System, Security and Setup.
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// Specifies the Windows event severity. The valid values are information, warning,
	// error, critical and verbose.
	EventLevel []*string `json:"eventLevel,omitempty" tf:"event_level,omitempty"`

	// Specifies the collection time offset. This time takes effect only for the first
	// time to ensure that the logs are not collected repeatedly.
	TimeOffset *float64 `json:"timeOffset,omitempty" tf:"time_offset,omitempty"`

	// Specifies the collection time offset unit. The valid values are
	// day, hour and sec.
	TimeOffsetUnit *string `json:"timeOffsetUnit,omitempty" tf:"time_offset_unit,omitempty"`
}

type WindowsLogInfoParameters struct {

	// Specifies the types of Windows event logs to collect. The valid values are
	// Application, System, Security and Setup.
	// +kubebuilder:validation:Optional
	Categories []*string `json:"categories" tf:"categories,omitempty"`

	// Specifies the Windows event severity. The valid values are information, warning,
	// error, critical and verbose.
	// +kubebuilder:validation:Optional
	EventLevel []*string `json:"eventLevel" tf:"event_level,omitempty"`

	// Specifies the collection time offset. This time takes effect only for the first
	// time to ensure that the logs are not collected repeatedly.
	// +kubebuilder:validation:Optional
	TimeOffset *float64 `json:"timeOffset" tf:"time_offset,omitempty"`

	// Specifies the collection time offset unit. The valid values are
	// day, hour and sec.
	// +kubebuilder:validation:Optional
	TimeOffsetUnit *string `json:"timeOffsetUnit" tf:"time_offset_unit,omitempty"`
}

// HostAccessV3Spec defines the desired state of HostAccessV3
type HostAccessV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostAccessV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HostAccessV3InitParameters `json:"initProvider,omitempty"`
}

// HostAccessV3Status defines the observed state of HostAccessV3.
type HostAccessV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostAccessV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HostAccessV3 is the Schema for the HostAccessV3s API. Manages a LTS Host Access resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type HostAccessV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessConfig) || (has(self.initProvider) && has(self.initProvider.accessConfig))",message="spec.forProvider.accessConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupId) || (has(self.initProvider) && has(self.initProvider.logGroupId))",message="spec.forProvider.logGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreamId) || (has(self.initProvider) && has(self.initProvider.logStreamId))",message="spec.forProvider.logStreamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   HostAccessV3Spec   `json:"spec"`
	Status HostAccessV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostAccessV3List contains a list of HostAccessV3s
type HostAccessV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostAccessV3 `json:"items"`
}

// Repository type metadata.
var (
	HostAccessV3_Kind             = "HostAccessV3"
	HostAccessV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostAccessV3_Kind}.String()
	HostAccessV3_KindAPIVersion   = HostAccessV3_Kind + "." + CRDGroupVersion.String()
	HostAccessV3_GroupVersionKind = CRDGroupVersion.WithKind(HostAccessV3_Kind)
)

func init() {
	SchemeBuilder.Register(&HostAccessV3{}, &HostAccessV3List{})
}
