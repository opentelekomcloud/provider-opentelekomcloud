// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StreamV2InitParameters struct {

	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	StreamAlias *string `json:"streamAlias,omitempty" tf:"stream_alias,omitempty"`

	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from -1 to 365, defaults to -1 which means inherit the log group settings.
	TTLInDays *float64 `json:"ttlInDays,omitempty" tf:"ttl_in_days,omitempty"`

	// Specifies the key/value pairs of the log stream.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StreamV2Observation struct {

	// The creation time of the log stream.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Shows the enterprise project ID to which the log stream belongs.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Number of log stream filters.
	FilterCount *float64 `json:"filterCount,omitempty" tf:"filter_count,omitempty"`

	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The log stream ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Shows the region in the log group resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	StreamAlias *string `json:"streamAlias,omitempty" tf:"stream_alias,omitempty"`

	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from -1 to 365, defaults to -1 which means inherit the log group settings.
	TTLInDays *float64 `json:"ttlInDays,omitempty" tf:"ttl_in_days,omitempty"`

	// Specifies the key/value pairs of the log stream.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StreamV2Parameters struct {

	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	StreamAlias *string `json:"streamAlias,omitempty" tf:"stream_alias,omitempty"`

	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from -1 to 365, defaults to -1 which means inherit the log group settings.
	// +kubebuilder:validation:Optional
	TTLInDays *float64 `json:"ttlInDays,omitempty" tf:"ttl_in_days,omitempty"`

	// Specifies the key/value pairs of the log stream.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// StreamV2Spec defines the desired state of StreamV2
type StreamV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StreamV2InitParameters `json:"initProvider,omitempty"`
}

// StreamV2Status defines the observed state of StreamV2.
type StreamV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StreamV2 is the Schema for the StreamV2s API. Manages a LTS Log Stream resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type StreamV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.streamName) || (has(self.initProvider) && has(self.initProvider.streamName))",message="spec.forProvider.streamName is a required parameter"
	Spec   StreamV2Spec   `json:"spec"`
	Status StreamV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamV2List contains a list of StreamV2s
type StreamV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamV2 `json:"items"`
}

// Repository type metadata.
var (
	StreamV2_Kind             = "StreamV2"
	StreamV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StreamV2_Kind}.String()
	StreamV2_KindAPIVersion   = StreamV2_Kind + "." + CRDGroupVersion.String()
	StreamV2_GroupVersionKind = CRDGroupVersion.WithKind(StreamV2_Kind)
)

func init() {
	SchemeBuilder.Register(&StreamV2{}, &StreamV2List{})
}
