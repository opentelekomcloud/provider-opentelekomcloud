//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigInitParameters) DeepCopyInto(out *AccessConfigInitParameters) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerNameRegex != nil {
		in, out := &in.ContainerNameRegex, &out.ContainerNameRegex
		*out = new(string)
		**out = **in
	}
	if in.ExcludeEnvs != nil {
		in, out := &in.ExcludeEnvs, &out.ExcludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeK8SLabels != nil {
		in, out := &in.ExcludeK8SLabels, &out.ExcludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeLabels != nil {
		in, out := &in.ExcludeLabels, &out.ExcludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeEnvs != nil {
		in, out := &in.IncludeEnvs, &out.IncludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeK8SLabels != nil {
		in, out := &in.IncludeK8SLabels, &out.IncludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeLabels != nil {
		in, out := &in.IncludeLabels, &out.IncludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogEnvs != nil {
		in, out := &in.LogEnvs, &out.LogEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogK8S != nil {
		in, out := &in.LogK8S, &out.LogK8S
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogLabels != nil {
		in, out := &in.LogLabels, &out.LogLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]MultiLogFormatInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NameSpaceRegex != nil {
		in, out := &in.NameSpaceRegex, &out.NameSpaceRegex
		*out = new(string)
		**out = **in
	}
	if in.PathType != nil {
		in, out := &in.PathType, &out.PathType
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PodNameRegex != nil {
		in, out := &in.PodNameRegex, &out.PodNameRegex
		*out = new(string)
		**out = **in
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]SingleLogFormatInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Stderr != nil {
		in, out := &in.Stderr, &out.Stderr
		*out = new(bool)
		**out = **in
	}
	if in.Stdout != nil {
		in, out := &in.Stdout, &out.Stdout
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigInitParameters.
func (in *AccessConfigInitParameters) DeepCopy() *AccessConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigMultiLogFormatInitParameters) DeepCopyInto(out *AccessConfigMultiLogFormatInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigMultiLogFormatInitParameters.
func (in *AccessConfigMultiLogFormatInitParameters) DeepCopy() *AccessConfigMultiLogFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigMultiLogFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigMultiLogFormatObservation) DeepCopyInto(out *AccessConfigMultiLogFormatObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigMultiLogFormatObservation.
func (in *AccessConfigMultiLogFormatObservation) DeepCopy() *AccessConfigMultiLogFormatObservation {
	if in == nil {
		return nil
	}
	out := new(AccessConfigMultiLogFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigMultiLogFormatParameters) DeepCopyInto(out *AccessConfigMultiLogFormatParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigMultiLogFormatParameters.
func (in *AccessConfigMultiLogFormatParameters) DeepCopy() *AccessConfigMultiLogFormatParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigMultiLogFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigObservation) DeepCopyInto(out *AccessConfigObservation) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerNameRegex != nil {
		in, out := &in.ContainerNameRegex, &out.ContainerNameRegex
		*out = new(string)
		**out = **in
	}
	if in.ExcludeEnvs != nil {
		in, out := &in.ExcludeEnvs, &out.ExcludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeK8SLabels != nil {
		in, out := &in.ExcludeK8SLabels, &out.ExcludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeLabels != nil {
		in, out := &in.ExcludeLabels, &out.ExcludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeEnvs != nil {
		in, out := &in.IncludeEnvs, &out.IncludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeK8SLabels != nil {
		in, out := &in.IncludeK8SLabels, &out.IncludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeLabels != nil {
		in, out := &in.IncludeLabels, &out.IncludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogEnvs != nil {
		in, out := &in.LogEnvs, &out.LogEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogK8S != nil {
		in, out := &in.LogK8S, &out.LogK8S
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogLabels != nil {
		in, out := &in.LogLabels, &out.LogLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]MultiLogFormatObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NameSpaceRegex != nil {
		in, out := &in.NameSpaceRegex, &out.NameSpaceRegex
		*out = new(string)
		**out = **in
	}
	if in.PathType != nil {
		in, out := &in.PathType, &out.PathType
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PodNameRegex != nil {
		in, out := &in.PodNameRegex, &out.PodNameRegex
		*out = new(string)
		**out = **in
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]SingleLogFormatObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Stderr != nil {
		in, out := &in.Stderr, &out.Stderr
		*out = new(bool)
		**out = **in
	}
	if in.Stdout != nil {
		in, out := &in.Stdout, &out.Stdout
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigObservation.
func (in *AccessConfigObservation) DeepCopy() *AccessConfigObservation {
	if in == nil {
		return nil
	}
	out := new(AccessConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigParameters) DeepCopyInto(out *AccessConfigParameters) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerNameRegex != nil {
		in, out := &in.ContainerNameRegex, &out.ContainerNameRegex
		*out = new(string)
		**out = **in
	}
	if in.ExcludeEnvs != nil {
		in, out := &in.ExcludeEnvs, &out.ExcludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeK8SLabels != nil {
		in, out := &in.ExcludeK8SLabels, &out.ExcludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeLabels != nil {
		in, out := &in.ExcludeLabels, &out.ExcludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeEnvs != nil {
		in, out := &in.IncludeEnvs, &out.IncludeEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeK8SLabels != nil {
		in, out := &in.IncludeK8SLabels, &out.IncludeK8SLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IncludeLabels != nil {
		in, out := &in.IncludeLabels, &out.IncludeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogEnvs != nil {
		in, out := &in.LogEnvs, &out.LogEnvs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogK8S != nil {
		in, out := &in.LogK8S, &out.LogK8S
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogLabels != nil {
		in, out := &in.LogLabels, &out.LogLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]MultiLogFormatParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NameSpaceRegex != nil {
		in, out := &in.NameSpaceRegex, &out.NameSpaceRegex
		*out = new(string)
		**out = **in
	}
	if in.PathType != nil {
		in, out := &in.PathType, &out.PathType
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PodNameRegex != nil {
		in, out := &in.PodNameRegex, &out.PodNameRegex
		*out = new(string)
		**out = **in
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]SingleLogFormatParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Stderr != nil {
		in, out := &in.Stderr, &out.Stderr
		*out = new(bool)
		**out = **in
	}
	if in.Stdout != nil {
		in, out := &in.Stdout, &out.Stdout
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigParameters.
func (in *AccessConfigParameters) DeepCopy() *AccessConfigParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigSingleLogFormatInitParameters) DeepCopyInto(out *AccessConfigSingleLogFormatInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigSingleLogFormatInitParameters.
func (in *AccessConfigSingleLogFormatInitParameters) DeepCopy() *AccessConfigSingleLogFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigSingleLogFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigSingleLogFormatObservation) DeepCopyInto(out *AccessConfigSingleLogFormatObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigSingleLogFormatObservation.
func (in *AccessConfigSingleLogFormatObservation) DeepCopy() *AccessConfigSingleLogFormatObservation {
	if in == nil {
		return nil
	}
	out := new(AccessConfigSingleLogFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessConfigSingleLogFormatParameters) DeepCopyInto(out *AccessConfigSingleLogFormatParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessConfigSingleLogFormatParameters.
func (in *AccessConfigSingleLogFormatParameters) DeepCopy() *AccessConfigSingleLogFormatParameters {
	if in == nil {
		return nil
	}
	out := new(AccessConfigSingleLogFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3) DeepCopyInto(out *CceAccessV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3.
func (in *CceAccessV3) DeepCopy() *CceAccessV3 {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CceAccessV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3InitParameters) DeepCopyInto(out *CceAccessV3InitParameters) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]AccessConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3InitParameters.
func (in *CceAccessV3InitParameters) DeepCopy() *CceAccessV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3List) DeepCopyInto(out *CceAccessV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CceAccessV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3List.
func (in *CceAccessV3List) DeepCopy() *CceAccessV3List {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CceAccessV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3Observation) DeepCopyInto(out *CceAccessV3Observation) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]AccessConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AccessType != nil {
		in, out := &in.AccessType, &out.AccessType
		*out = new(string)
		**out = **in
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3Observation.
func (in *CceAccessV3Observation) DeepCopy() *CceAccessV3Observation {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3Parameters) DeepCopyInto(out *CceAccessV3Parameters) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]AccessConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3Parameters.
func (in *CceAccessV3Parameters) DeepCopy() *CceAccessV3Parameters {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3Spec) DeepCopyInto(out *CceAccessV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3Spec.
func (in *CceAccessV3Spec) DeepCopy() *CceAccessV3Spec {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CceAccessV3Status) DeepCopyInto(out *CceAccessV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CceAccessV3Status.
func (in *CceAccessV3Status) DeepCopy() *CceAccessV3Status {
	if in == nil {
		return nil
	}
	out := new(CceAccessV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2) DeepCopyInto(out *CrossAccountAccessV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2.
func (in *CrossAccountAccessV2) DeepCopy() *CrossAccountAccessV2 {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CrossAccountAccessV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2InitParameters) DeepCopyInto(out *CrossAccountAccessV2InitParameters) {
	*out = *in
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupID != nil {
		in, out := &in.LogAgencyGroupID, &out.LogAgencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupName != nil {
		in, out := &in.LogAgencyGroupName, &out.LogAgencyGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamID != nil {
		in, out := &in.LogAgencyStreamID, &out.LogAgencyStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamName != nil {
		in, out := &in.LogAgencyStreamName, &out.LogAgencyStreamName
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2InitParameters.
func (in *CrossAccountAccessV2InitParameters) DeepCopy() *CrossAccountAccessV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2List) DeepCopyInto(out *CrossAccountAccessV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CrossAccountAccessV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2List.
func (in *CrossAccountAccessV2List) DeepCopy() *CrossAccountAccessV2List {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CrossAccountAccessV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2Observation) DeepCopyInto(out *CrossAccountAccessV2Observation) {
	*out = *in
	if in.AccessConfigType != nil {
		in, out := &in.AccessConfigType, &out.AccessConfigType
		*out = new(string)
		**out = **in
	}
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupID != nil {
		in, out := &in.LogAgencyGroupID, &out.LogAgencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupName != nil {
		in, out := &in.LogAgencyGroupName, &out.LogAgencyGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamID != nil {
		in, out := &in.LogAgencyStreamID, &out.LogAgencyStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamName != nil {
		in, out := &in.LogAgencyStreamName, &out.LogAgencyStreamName
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2Observation.
func (in *CrossAccountAccessV2Observation) DeepCopy() *CrossAccountAccessV2Observation {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2Parameters) DeepCopyInto(out *CrossAccountAccessV2Parameters) {
	*out = *in
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupID != nil {
		in, out := &in.LogAgencyGroupID, &out.LogAgencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyGroupName != nil {
		in, out := &in.LogAgencyGroupName, &out.LogAgencyGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamID != nil {
		in, out := &in.LogAgencyStreamID, &out.LogAgencyStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogAgencyStreamName != nil {
		in, out := &in.LogAgencyStreamName, &out.LogAgencyStreamName
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2Parameters.
func (in *CrossAccountAccessV2Parameters) DeepCopy() *CrossAccountAccessV2Parameters {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2Spec) DeepCopyInto(out *CrossAccountAccessV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2Spec.
func (in *CrossAccountAccessV2Spec) DeepCopy() *CrossAccountAccessV2Spec {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossAccountAccessV2Status) DeepCopyInto(out *CrossAccountAccessV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossAccountAccessV2Status.
func (in *CrossAccountAccessV2Status) DeepCopy() *CrossAccountAccessV2Status {
	if in == nil {
		return nil
	}
	out := new(CrossAccountAccessV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FrequencyInitParameters) DeepCopyInto(out *FrequencyInitParameters) {
	*out = *in
	if in.CronExpression != nil {
		in, out := &in.CronExpression, &out.CronExpression
		*out = new(string)
		**out = **in
	}
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = new(float64)
		**out = **in
	}
	if in.FixedRate != nil {
		in, out := &in.FixedRate, &out.FixedRate
		*out = new(float64)
		**out = **in
	}
	if in.FixedRateUnit != nil {
		in, out := &in.FixedRateUnit, &out.FixedRateUnit
		*out = new(string)
		**out = **in
	}
	if in.HourOfDay != nil {
		in, out := &in.HourOfDay, &out.HourOfDay
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FrequencyInitParameters.
func (in *FrequencyInitParameters) DeepCopy() *FrequencyInitParameters {
	if in == nil {
		return nil
	}
	out := new(FrequencyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FrequencyObservation) DeepCopyInto(out *FrequencyObservation) {
	*out = *in
	if in.CronExpression != nil {
		in, out := &in.CronExpression, &out.CronExpression
		*out = new(string)
		**out = **in
	}
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = new(float64)
		**out = **in
	}
	if in.FixedRate != nil {
		in, out := &in.FixedRate, &out.FixedRate
		*out = new(float64)
		**out = **in
	}
	if in.FixedRateUnit != nil {
		in, out := &in.FixedRateUnit, &out.FixedRateUnit
		*out = new(string)
		**out = **in
	}
	if in.HourOfDay != nil {
		in, out := &in.HourOfDay, &out.HourOfDay
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FrequencyObservation.
func (in *FrequencyObservation) DeepCopy() *FrequencyObservation {
	if in == nil {
		return nil
	}
	out := new(FrequencyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FrequencyParameters) DeepCopyInto(out *FrequencyParameters) {
	*out = *in
	if in.CronExpression != nil {
		in, out := &in.CronExpression, &out.CronExpression
		*out = new(string)
		**out = **in
	}
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = new(float64)
		**out = **in
	}
	if in.FixedRate != nil {
		in, out := &in.FixedRate, &out.FixedRate
		*out = new(float64)
		**out = **in
	}
	if in.FixedRateUnit != nil {
		in, out := &in.FixedRateUnit, &out.FixedRateUnit
		*out = new(string)
		**out = **in
	}
	if in.HourOfDay != nil {
		in, out := &in.HourOfDay, &out.HourOfDay
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FrequencyParameters.
func (in *FrequencyParameters) DeepCopy() *FrequencyParameters {
	if in == nil {
		return nil
	}
	out := new(FrequencyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2) DeepCopyInto(out *GroupV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2.
func (in *GroupV2) DeepCopy() *GroupV2 {
	if in == nil {
		return nil
	}
	out := new(GroupV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GroupV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2InitParameters) DeepCopyInto(out *GroupV2InitParameters) {
	*out = *in
	if in.GroupAlias != nil {
		in, out := &in.GroupAlias, &out.GroupAlias
		*out = new(string)
		**out = **in
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2InitParameters.
func (in *GroupV2InitParameters) DeepCopy() *GroupV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(GroupV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2List) DeepCopyInto(out *GroupV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GroupV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2List.
func (in *GroupV2List) DeepCopy() *GroupV2List {
	if in == nil {
		return nil
	}
	out := new(GroupV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GroupV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2Observation) DeepCopyInto(out *GroupV2Observation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.GroupAlias != nil {
		in, out := &in.GroupAlias, &out.GroupAlias
		*out = new(string)
		**out = **in
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2Observation.
func (in *GroupV2Observation) DeepCopy() *GroupV2Observation {
	if in == nil {
		return nil
	}
	out := new(GroupV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2Parameters) DeepCopyInto(out *GroupV2Parameters) {
	*out = *in
	if in.GroupAlias != nil {
		in, out := &in.GroupAlias, &out.GroupAlias
		*out = new(string)
		**out = **in
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2Parameters.
func (in *GroupV2Parameters) DeepCopy() *GroupV2Parameters {
	if in == nil {
		return nil
	}
	out := new(GroupV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2Spec) DeepCopyInto(out *GroupV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2Spec.
func (in *GroupV2Spec) DeepCopy() *GroupV2Spec {
	if in == nil {
		return nil
	}
	out := new(GroupV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupV2Status) DeepCopyInto(out *GroupV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupV2Status.
func (in *GroupV2Status) DeepCopy() *GroupV2Status {
	if in == nil {
		return nil
	}
	out := new(GroupV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3) DeepCopyInto(out *HostAccessV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3.
func (in *HostAccessV3) DeepCopy() *HostAccessV3 {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostAccessV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3AccessConfigInitParameters) DeepCopyInto(out *HostAccessV3AccessConfigInitParameters) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]AccessConfigMultiLogFormatInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]AccessConfigSingleLogFormatInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsLogInfo != nil {
		in, out := &in.WindowsLogInfo, &out.WindowsLogInfo
		*out = make([]WindowsLogInfoInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3AccessConfigInitParameters.
func (in *HostAccessV3AccessConfigInitParameters) DeepCopy() *HostAccessV3AccessConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3AccessConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3AccessConfigObservation) DeepCopyInto(out *HostAccessV3AccessConfigObservation) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]AccessConfigMultiLogFormatObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]AccessConfigSingleLogFormatObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsLogInfo != nil {
		in, out := &in.WindowsLogInfo, &out.WindowsLogInfo
		*out = make([]WindowsLogInfoObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3AccessConfigObservation.
func (in *HostAccessV3AccessConfigObservation) DeepCopy() *HostAccessV3AccessConfigObservation {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3AccessConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3AccessConfigParameters) DeepCopyInto(out *HostAccessV3AccessConfigParameters) {
	*out = *in
	if in.BlackPaths != nil {
		in, out := &in.BlackPaths, &out.BlackPaths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MultiLogFormat != nil {
		in, out := &in.MultiLogFormat, &out.MultiLogFormat
		*out = make([]AccessConfigMultiLogFormatParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SingleLogFormat != nil {
		in, out := &in.SingleLogFormat, &out.SingleLogFormat
		*out = make([]AccessConfigSingleLogFormatParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsLogInfo != nil {
		in, out := &in.WindowsLogInfo, &out.WindowsLogInfo
		*out = make([]WindowsLogInfoParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3AccessConfigParameters.
func (in *HostAccessV3AccessConfigParameters) DeepCopy() *HostAccessV3AccessConfigParameters {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3AccessConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3InitParameters) DeepCopyInto(out *HostAccessV3InitParameters) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]HostAccessV3AccessConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3InitParameters.
func (in *HostAccessV3InitParameters) DeepCopy() *HostAccessV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3List) DeepCopyInto(out *HostAccessV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HostAccessV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3List.
func (in *HostAccessV3List) DeepCopy() *HostAccessV3List {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostAccessV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3Observation) DeepCopyInto(out *HostAccessV3Observation) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]HostAccessV3AccessConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AccessType != nil {
		in, out := &in.AccessType, &out.AccessType
		*out = new(string)
		**out = **in
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3Observation.
func (in *HostAccessV3Observation) DeepCopy() *HostAccessV3Observation {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3Parameters) DeepCopyInto(out *HostAccessV3Parameters) {
	*out = *in
	if in.AccessConfig != nil {
		in, out := &in.AccessConfig, &out.AccessConfig
		*out = make([]HostAccessV3AccessConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BinaryCollect != nil {
		in, out := &in.BinaryCollect, &out.BinaryCollect
		*out = new(bool)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogSplit != nil {
		in, out := &in.LogSplit, &out.LogSplit
		*out = new(bool)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3Parameters.
func (in *HostAccessV3Parameters) DeepCopy() *HostAccessV3Parameters {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3Spec) DeepCopyInto(out *HostAccessV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3Spec.
func (in *HostAccessV3Spec) DeepCopy() *HostAccessV3Spec {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostAccessV3Status) DeepCopyInto(out *HostAccessV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostAccessV3Status.
func (in *HostAccessV3Status) DeepCopy() *HostAccessV3Status {
	if in == nil {
		return nil
	}
	out := new(HostAccessV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3) DeepCopyInto(out *HostGroupV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3.
func (in *HostGroupV3) DeepCopy() *HostGroupV3 {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostGroupV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3InitParameters) DeepCopyInto(out *HostGroupV3InitParameters) {
	*out = *in
	if in.AgentAccessType != nil {
		in, out := &in.AgentAccessType, &out.AgentAccessType
		*out = new(string)
		**out = **in
	}
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3InitParameters.
func (in *HostGroupV3InitParameters) DeepCopy() *HostGroupV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3List) DeepCopyInto(out *HostGroupV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HostGroupV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3List.
func (in *HostGroupV3List) DeepCopy() *HostGroupV3List {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostGroupV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3Observation) DeepCopyInto(out *HostGroupV3Observation) {
	*out = *in
	if in.AgentAccessType != nil {
		in, out := &in.AgentAccessType, &out.AgentAccessType
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3Observation.
func (in *HostGroupV3Observation) DeepCopy() *HostGroupV3Observation {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3Parameters) DeepCopyInto(out *HostGroupV3Parameters) {
	*out = *in
	if in.AgentAccessType != nil {
		in, out := &in.AgentAccessType, &out.AgentAccessType
		*out = new(string)
		**out = **in
	}
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3Parameters.
func (in *HostGroupV3Parameters) DeepCopy() *HostGroupV3Parameters {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3Spec) DeepCopyInto(out *HostGroupV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3Spec.
func (in *HostGroupV3Spec) DeepCopy() *HostGroupV3Spec {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostGroupV3Status) DeepCopyInto(out *HostGroupV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostGroupV3Status.
func (in *HostGroupV3Status) DeepCopy() *HostGroupV3Status {
	if in == nil {
		return nil
	}
	out := new(HostGroupV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2) DeepCopyInto(out *KeywordsAlarmRuleV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2.
func (in *KeywordsAlarmRuleV2) DeepCopy() *KeywordsAlarmRuleV2 {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeywordsAlarmRuleV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2InitParameters) DeepCopyInto(out *KeywordsAlarmRuleV2InitParameters) {
	*out = *in
	if in.AlarmActionRuleName != nil {
		in, out := &in.AlarmActionRuleName, &out.AlarmActionRuleName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Frequency != nil {
		in, out := &in.Frequency, &out.Frequency
		*out = make([]FrequencyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeywordsRequests != nil {
		in, out := &in.KeywordsRequests, &out.KeywordsRequests
		*out = make([]KeywordsRequestsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotificationFrequency != nil {
		in, out := &in.NotificationFrequency, &out.NotificationFrequency
		*out = new(float64)
		**out = **in
	}
	if in.NotificationRule != nil {
		in, out := &in.NotificationRule, &out.NotificationRule
		*out = make([]NotificationRuleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecoveryPolicy != nil {
		in, out := &in.RecoveryPolicy, &out.RecoveryPolicy
		*out = new(float64)
		**out = **in
	}
	if in.SendNotifications != nil {
		in, out := &in.SendNotifications, &out.SendNotifications
		*out = new(bool)
		**out = **in
	}
	if in.SendRecoveryNotifications != nil {
		in, out := &in.SendRecoveryNotifications, &out.SendRecoveryNotifications
		*out = new(bool)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.TriggerConditionCount != nil {
		in, out := &in.TriggerConditionCount, &out.TriggerConditionCount
		*out = new(float64)
		**out = **in
	}
	if in.TriggerConditionFrequency != nil {
		in, out := &in.TriggerConditionFrequency, &out.TriggerConditionFrequency
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2InitParameters.
func (in *KeywordsAlarmRuleV2InitParameters) DeepCopy() *KeywordsAlarmRuleV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2List) DeepCopyInto(out *KeywordsAlarmRuleV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KeywordsAlarmRuleV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2List.
func (in *KeywordsAlarmRuleV2List) DeepCopy() *KeywordsAlarmRuleV2List {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeywordsAlarmRuleV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2Observation) DeepCopyInto(out *KeywordsAlarmRuleV2Observation) {
	*out = *in
	if in.AlarmActionRuleName != nil {
		in, out := &in.AlarmActionRuleName, &out.AlarmActionRuleName
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DomainID != nil {
		in, out := &in.DomainID, &out.DomainID
		*out = new(string)
		**out = **in
	}
	if in.Frequency != nil {
		in, out := &in.Frequency, &out.Frequency
		*out = make([]FrequencyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KeywordsRequests != nil {
		in, out := &in.KeywordsRequests, &out.KeywordsRequests
		*out = make([]KeywordsRequestsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotificationFrequency != nil {
		in, out := &in.NotificationFrequency, &out.NotificationFrequency
		*out = new(float64)
		**out = **in
	}
	if in.NotificationRule != nil {
		in, out := &in.NotificationRule, &out.NotificationRule
		*out = make([]NotificationRuleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecoveryPolicy != nil {
		in, out := &in.RecoveryPolicy, &out.RecoveryPolicy
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SendNotifications != nil {
		in, out := &in.SendNotifications, &out.SendNotifications
		*out = new(bool)
		**out = **in
	}
	if in.SendRecoveryNotifications != nil {
		in, out := &in.SendRecoveryNotifications, &out.SendRecoveryNotifications
		*out = new(bool)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TriggerConditionCount != nil {
		in, out := &in.TriggerConditionCount, &out.TriggerConditionCount
		*out = new(float64)
		**out = **in
	}
	if in.TriggerConditionFrequency != nil {
		in, out := &in.TriggerConditionFrequency, &out.TriggerConditionFrequency
		*out = new(float64)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2Observation.
func (in *KeywordsAlarmRuleV2Observation) DeepCopy() *KeywordsAlarmRuleV2Observation {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2Parameters) DeepCopyInto(out *KeywordsAlarmRuleV2Parameters) {
	*out = *in
	if in.AlarmActionRuleName != nil {
		in, out := &in.AlarmActionRuleName, &out.AlarmActionRuleName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Frequency != nil {
		in, out := &in.Frequency, &out.Frequency
		*out = make([]FrequencyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeywordsRequests != nil {
		in, out := &in.KeywordsRequests, &out.KeywordsRequests
		*out = make([]KeywordsRequestsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotificationFrequency != nil {
		in, out := &in.NotificationFrequency, &out.NotificationFrequency
		*out = new(float64)
		**out = **in
	}
	if in.NotificationRule != nil {
		in, out := &in.NotificationRule, &out.NotificationRule
		*out = make([]NotificationRuleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecoveryPolicy != nil {
		in, out := &in.RecoveryPolicy, &out.RecoveryPolicy
		*out = new(float64)
		**out = **in
	}
	if in.SendNotifications != nil {
		in, out := &in.SendNotifications, &out.SendNotifications
		*out = new(bool)
		**out = **in
	}
	if in.SendRecoveryNotifications != nil {
		in, out := &in.SendRecoveryNotifications, &out.SendRecoveryNotifications
		*out = new(bool)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.TriggerConditionCount != nil {
		in, out := &in.TriggerConditionCount, &out.TriggerConditionCount
		*out = new(float64)
		**out = **in
	}
	if in.TriggerConditionFrequency != nil {
		in, out := &in.TriggerConditionFrequency, &out.TriggerConditionFrequency
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2Parameters.
func (in *KeywordsAlarmRuleV2Parameters) DeepCopy() *KeywordsAlarmRuleV2Parameters {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2Spec) DeepCopyInto(out *KeywordsAlarmRuleV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2Spec.
func (in *KeywordsAlarmRuleV2Spec) DeepCopy() *KeywordsAlarmRuleV2Spec {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsAlarmRuleV2Status) DeepCopyInto(out *KeywordsAlarmRuleV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsAlarmRuleV2Status.
func (in *KeywordsAlarmRuleV2Status) DeepCopy() *KeywordsAlarmRuleV2Status {
	if in == nil {
		return nil
	}
	out := new(KeywordsAlarmRuleV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsRequestsInitParameters) DeepCopyInto(out *KeywordsRequestsInitParameters) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Keyword != nil {
		in, out := &in.Keyword, &out.Keyword
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRange != nil {
		in, out := &in.SearchTimeRange, &out.SearchTimeRange
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRangeUnit != nil {
		in, out := &in.SearchTimeRangeUnit, &out.SearchTimeRangeUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsRequestsInitParameters.
func (in *KeywordsRequestsInitParameters) DeepCopy() *KeywordsRequestsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KeywordsRequestsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsRequestsObservation) DeepCopyInto(out *KeywordsRequestsObservation) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Keyword != nil {
		in, out := &in.Keyword, &out.Keyword
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRange != nil {
		in, out := &in.SearchTimeRange, &out.SearchTimeRange
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRangeUnit != nil {
		in, out := &in.SearchTimeRangeUnit, &out.SearchTimeRangeUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsRequestsObservation.
func (in *KeywordsRequestsObservation) DeepCopy() *KeywordsRequestsObservation {
	if in == nil {
		return nil
	}
	out := new(KeywordsRequestsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeywordsRequestsParameters) DeepCopyInto(out *KeywordsRequestsParameters) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Keyword != nil {
		in, out := &in.Keyword, &out.Keyword
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRange != nil {
		in, out := &in.SearchTimeRange, &out.SearchTimeRange
		*out = new(float64)
		**out = **in
	}
	if in.SearchTimeRangeUnit != nil {
		in, out := &in.SearchTimeRangeUnit, &out.SearchTimeRangeUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeywordsRequestsParameters.
func (in *KeywordsRequestsParameters) DeepCopy() *KeywordsRequestsParameters {
	if in == nil {
		return nil
	}
	out := new(KeywordsRequestsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgencyTransferInitParameters) DeepCopyInto(out *LogAgencyTransferInitParameters) {
	*out = *in
	if in.AgencyDomainID != nil {
		in, out := &in.AgencyDomainID, &out.AgencyDomainID
		*out = new(string)
		**out = **in
	}
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgencyTransferInitParameters.
func (in *LogAgencyTransferInitParameters) DeepCopy() *LogAgencyTransferInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogAgencyTransferInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgencyTransferObservation) DeepCopyInto(out *LogAgencyTransferObservation) {
	*out = *in
	if in.AgencyDomainID != nil {
		in, out := &in.AgencyDomainID, &out.AgencyDomainID
		*out = new(string)
		**out = **in
	}
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgencyTransferObservation.
func (in *LogAgencyTransferObservation) DeepCopy() *LogAgencyTransferObservation {
	if in == nil {
		return nil
	}
	out := new(LogAgencyTransferObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgencyTransferParameters) DeepCopyInto(out *LogAgencyTransferParameters) {
	*out = *in
	if in.AgencyDomainID != nil {
		in, out := &in.AgencyDomainID, &out.AgencyDomainID
		*out = new(string)
		**out = **in
	}
	if in.AgencyDomainName != nil {
		in, out := &in.AgencyDomainName, &out.AgencyDomainName
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgencyProjectID != nil {
		in, out := &in.AgencyProjectID, &out.AgencyProjectID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgencyTransferParameters.
func (in *LogAgencyTransferParameters) DeepCopy() *LogAgencyTransferParameters {
	if in == nil {
		return nil
	}
	out := new(LogAgencyTransferParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogStreamsInitParameters) DeepCopyInto(out *LogStreamsInitParameters) {
	*out = *in
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogStreamsInitParameters.
func (in *LogStreamsInitParameters) DeepCopy() *LogStreamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogStreamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogStreamsObservation) DeepCopyInto(out *LogStreamsObservation) {
	*out = *in
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogStreamsObservation.
func (in *LogStreamsObservation) DeepCopy() *LogStreamsObservation {
	if in == nil {
		return nil
	}
	out := new(LogStreamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogStreamsParameters) DeepCopyInto(out *LogStreamsParameters) {
	*out = *in
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamName != nil {
		in, out := &in.LogStreamName, &out.LogStreamName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogStreamsParameters.
func (in *LogStreamsParameters) DeepCopy() *LogStreamsParameters {
	if in == nil {
		return nil
	}
	out := new(LogStreamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferDetailInitParameters) DeepCopyInto(out *LogTransferDetailInitParameters) {
	*out = *in
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsDirPrefixName != nil {
		in, out := &in.ObsDirPrefixName, &out.ObsDirPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsEncryptedEnable != nil {
		in, out := &in.ObsEncryptedEnable, &out.ObsEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.ObsEncryptedID != nil {
		in, out := &in.ObsEncryptedID, &out.ObsEncryptedID
		*out = new(string)
		**out = **in
	}
	if in.ObsEpsID != nil {
		in, out := &in.ObsEpsID, &out.ObsEpsID
		*out = new(string)
		**out = **in
	}
	if in.ObsPeriod != nil {
		in, out := &in.ObsPeriod, &out.ObsPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ObsPeriodUnit != nil {
		in, out := &in.ObsPeriodUnit, &out.ObsPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.ObsPrefixName != nil {
		in, out := &in.ObsPrefixName, &out.ObsPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZone != nil {
		in, out := &in.ObsTimeZone, &out.ObsTimeZone
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZoneID != nil {
		in, out := &in.ObsTimeZoneID, &out.ObsTimeZoneID
		*out = new(string)
		**out = **in
	}
	if in.ObsTransferPath != nil {
		in, out := &in.ObsTransferPath, &out.ObsTransferPath
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferDetailInitParameters.
func (in *LogTransferDetailInitParameters) DeepCopy() *LogTransferDetailInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogTransferDetailInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferDetailObservation) DeepCopyInto(out *LogTransferDetailObservation) {
	*out = *in
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsDirPrefixName != nil {
		in, out := &in.ObsDirPrefixName, &out.ObsDirPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsEncryptedEnable != nil {
		in, out := &in.ObsEncryptedEnable, &out.ObsEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.ObsEncryptedID != nil {
		in, out := &in.ObsEncryptedID, &out.ObsEncryptedID
		*out = new(string)
		**out = **in
	}
	if in.ObsEpsID != nil {
		in, out := &in.ObsEpsID, &out.ObsEpsID
		*out = new(string)
		**out = **in
	}
	if in.ObsPeriod != nil {
		in, out := &in.ObsPeriod, &out.ObsPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ObsPeriodUnit != nil {
		in, out := &in.ObsPeriodUnit, &out.ObsPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.ObsPrefixName != nil {
		in, out := &in.ObsPrefixName, &out.ObsPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZone != nil {
		in, out := &in.ObsTimeZone, &out.ObsTimeZone
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZoneID != nil {
		in, out := &in.ObsTimeZoneID, &out.ObsTimeZoneID
		*out = new(string)
		**out = **in
	}
	if in.ObsTransferPath != nil {
		in, out := &in.ObsTransferPath, &out.ObsTransferPath
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferDetailObservation.
func (in *LogTransferDetailObservation) DeepCopy() *LogTransferDetailObservation {
	if in == nil {
		return nil
	}
	out := new(LogTransferDetailObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferDetailParameters) DeepCopyInto(out *LogTransferDetailParameters) {
	*out = *in
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsDirPrefixName != nil {
		in, out := &in.ObsDirPrefixName, &out.ObsDirPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsEncryptedEnable != nil {
		in, out := &in.ObsEncryptedEnable, &out.ObsEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.ObsEncryptedID != nil {
		in, out := &in.ObsEncryptedID, &out.ObsEncryptedID
		*out = new(string)
		**out = **in
	}
	if in.ObsEpsID != nil {
		in, out := &in.ObsEpsID, &out.ObsEpsID
		*out = new(string)
		**out = **in
	}
	if in.ObsPeriod != nil {
		in, out := &in.ObsPeriod, &out.ObsPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ObsPeriodUnit != nil {
		in, out := &in.ObsPeriodUnit, &out.ObsPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.ObsPrefixName != nil {
		in, out := &in.ObsPrefixName, &out.ObsPrefixName
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZone != nil {
		in, out := &in.ObsTimeZone, &out.ObsTimeZone
		*out = new(string)
		**out = **in
	}
	if in.ObsTimeZoneID != nil {
		in, out := &in.ObsTimeZoneID, &out.ObsTimeZoneID
		*out = new(string)
		**out = **in
	}
	if in.ObsTransferPath != nil {
		in, out := &in.ObsTransferPath, &out.ObsTransferPath
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferDetailParameters.
func (in *LogTransferDetailParameters) DeepCopy() *LogTransferDetailParameters {
	if in == nil {
		return nil
	}
	out := new(LogTransferDetailParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferInfoInitParameters) DeepCopyInto(out *LogTransferInfoInitParameters) {
	*out = *in
	if in.LogAgencyTransfer != nil {
		in, out := &in.LogAgencyTransfer, &out.LogAgencyTransfer
		*out = make([]LogAgencyTransferInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogStorageFormat != nil {
		in, out := &in.LogStorageFormat, &out.LogStorageFormat
		*out = new(string)
		**out = **in
	}
	if in.LogTransferDetail != nil {
		in, out := &in.LogTransferDetail, &out.LogTransferDetail
		*out = make([]LogTransferDetailInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferMode != nil {
		in, out := &in.LogTransferMode, &out.LogTransferMode
		*out = new(string)
		**out = **in
	}
	if in.LogTransferStatus != nil {
		in, out := &in.LogTransferStatus, &out.LogTransferStatus
		*out = new(string)
		**out = **in
	}
	if in.LogTransferType != nil {
		in, out := &in.LogTransferType, &out.LogTransferType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferInfoInitParameters.
func (in *LogTransferInfoInitParameters) DeepCopy() *LogTransferInfoInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogTransferInfoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferInfoObservation) DeepCopyInto(out *LogTransferInfoObservation) {
	*out = *in
	if in.LogAgencyTransfer != nil {
		in, out := &in.LogAgencyTransfer, &out.LogAgencyTransfer
		*out = make([]LogAgencyTransferObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogCreatedAt != nil {
		in, out := &in.LogCreatedAt, &out.LogCreatedAt
		*out = new(string)
		**out = **in
	}
	if in.LogStorageFormat != nil {
		in, out := &in.LogStorageFormat, &out.LogStorageFormat
		*out = new(string)
		**out = **in
	}
	if in.LogTransferDetail != nil {
		in, out := &in.LogTransferDetail, &out.LogTransferDetail
		*out = make([]LogTransferDetailObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferMode != nil {
		in, out := &in.LogTransferMode, &out.LogTransferMode
		*out = new(string)
		**out = **in
	}
	if in.LogTransferStatus != nil {
		in, out := &in.LogTransferStatus, &out.LogTransferStatus
		*out = new(string)
		**out = **in
	}
	if in.LogTransferType != nil {
		in, out := &in.LogTransferType, &out.LogTransferType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferInfoObservation.
func (in *LogTransferInfoObservation) DeepCopy() *LogTransferInfoObservation {
	if in == nil {
		return nil
	}
	out := new(LogTransferInfoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogTransferInfoParameters) DeepCopyInto(out *LogTransferInfoParameters) {
	*out = *in
	if in.LogAgencyTransfer != nil {
		in, out := &in.LogAgencyTransfer, &out.LogAgencyTransfer
		*out = make([]LogAgencyTransferParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogStorageFormat != nil {
		in, out := &in.LogStorageFormat, &out.LogStorageFormat
		*out = new(string)
		**out = **in
	}
	if in.LogTransferDetail != nil {
		in, out := &in.LogTransferDetail, &out.LogTransferDetail
		*out = make([]LogTransferDetailParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferMode != nil {
		in, out := &in.LogTransferMode, &out.LogTransferMode
		*out = new(string)
		**out = **in
	}
	if in.LogTransferStatus != nil {
		in, out := &in.LogTransferStatus, &out.LogTransferStatus
		*out = new(string)
		**out = **in
	}
	if in.LogTransferType != nil {
		in, out := &in.LogTransferType, &out.LogTransferType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogTransferInfoParameters.
func (in *LogTransferInfoParameters) DeepCopy() *LogTransferInfoParameters {
	if in == nil {
		return nil
	}
	out := new(LogTransferInfoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiLogFormatInitParameters) DeepCopyInto(out *MultiLogFormatInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MultiLogFormatInitParameters.
func (in *MultiLogFormatInitParameters) DeepCopy() *MultiLogFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(MultiLogFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiLogFormatObservation) DeepCopyInto(out *MultiLogFormatObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MultiLogFormatObservation.
func (in *MultiLogFormatObservation) DeepCopy() *MultiLogFormatObservation {
	if in == nil {
		return nil
	}
	out := new(MultiLogFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiLogFormatParameters) DeepCopyInto(out *MultiLogFormatParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MultiLogFormatParameters.
func (in *MultiLogFormatParameters) DeepCopy() *MultiLogFormatParameters {
	if in == nil {
		return nil
	}
	out := new(MultiLogFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationRuleInitParameters) DeepCopyInto(out *NotificationRuleInitParameters) {
	*out = *in
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]TopicsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationRuleInitParameters.
func (in *NotificationRuleInitParameters) DeepCopy() *NotificationRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationRuleObservation) DeepCopyInto(out *NotificationRuleObservation) {
	*out = *in
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]TopicsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationRuleObservation.
func (in *NotificationRuleObservation) DeepCopy() *NotificationRuleObservation {
	if in == nil {
		return nil
	}
	out := new(NotificationRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationRuleParameters) DeepCopyInto(out *NotificationRuleParameters) {
	*out = *in
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]TopicsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationRuleParameters.
func (in *NotificationRuleParameters) DeepCopy() *NotificationRuleParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2) DeepCopyInto(out *NotificationTemplateV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2.
func (in *NotificationTemplateV2) DeepCopy() *NotificationTemplateV2 {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NotificationTemplateV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2InitParameters) DeepCopyInto(out *NotificationTemplateV2InitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Templates != nil {
		in, out := &in.Templates, &out.Templates
		*out = make([]TemplatesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2InitParameters.
func (in *NotificationTemplateV2InitParameters) DeepCopy() *NotificationTemplateV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2List) DeepCopyInto(out *NotificationTemplateV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NotificationTemplateV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2List.
func (in *NotificationTemplateV2List) DeepCopy() *NotificationTemplateV2List {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NotificationTemplateV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2Observation) DeepCopyInto(out *NotificationTemplateV2Observation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Templates != nil {
		in, out := &in.Templates, &out.Templates
		*out = make([]TemplatesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2Observation.
func (in *NotificationTemplateV2Observation) DeepCopy() *NotificationTemplateV2Observation {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2Parameters) DeepCopyInto(out *NotificationTemplateV2Parameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Templates != nil {
		in, out := &in.Templates, &out.Templates
		*out = make([]TemplatesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2Parameters.
func (in *NotificationTemplateV2Parameters) DeepCopy() *NotificationTemplateV2Parameters {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2Spec) DeepCopyInto(out *NotificationTemplateV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2Spec.
func (in *NotificationTemplateV2Spec) DeepCopy() *NotificationTemplateV2Spec {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationTemplateV2Status) DeepCopyInto(out *NotificationTemplateV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationTemplateV2Status.
func (in *NotificationTemplateV2Status) DeepCopy() *NotificationTemplateV2Status {
	if in == nil {
		return nil
	}
	out := new(NotificationTemplateV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1) DeepCopyInto(out *QuickSearchCriteriaV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1.
func (in *QuickSearchCriteriaV1) DeepCopy() *QuickSearchCriteriaV1 {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QuickSearchCriteriaV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1InitParameters) DeepCopyInto(out *QuickSearchCriteriaV1InitParameters) {
	*out = *in
	if in.Criteria != nil {
		in, out := &in.Criteria, &out.Criteria
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1InitParameters.
func (in *QuickSearchCriteriaV1InitParameters) DeepCopy() *QuickSearchCriteriaV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1List) DeepCopyInto(out *QuickSearchCriteriaV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]QuickSearchCriteriaV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1List.
func (in *QuickSearchCriteriaV1List) DeepCopy() *QuickSearchCriteriaV1List {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QuickSearchCriteriaV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1Observation) DeepCopyInto(out *QuickSearchCriteriaV1Observation) {
	*out = *in
	if in.Criteria != nil {
		in, out := &in.Criteria, &out.Criteria
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1Observation.
func (in *QuickSearchCriteriaV1Observation) DeepCopy() *QuickSearchCriteriaV1Observation {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1Parameters) DeepCopyInto(out *QuickSearchCriteriaV1Parameters) {
	*out = *in
	if in.Criteria != nil {
		in, out := &in.Criteria, &out.Criteria
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreamID != nil {
		in, out := &in.LogStreamID, &out.LogStreamID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1Parameters.
func (in *QuickSearchCriteriaV1Parameters) DeepCopy() *QuickSearchCriteriaV1Parameters {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1Spec) DeepCopyInto(out *QuickSearchCriteriaV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1Spec.
func (in *QuickSearchCriteriaV1Spec) DeepCopy() *QuickSearchCriteriaV1Spec {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuickSearchCriteriaV1Status) DeepCopyInto(out *QuickSearchCriteriaV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuickSearchCriteriaV1Status.
func (in *QuickSearchCriteriaV1Status) DeepCopy() *QuickSearchCriteriaV1Status {
	if in == nil {
		return nil
	}
	out := new(QuickSearchCriteriaV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SingleLogFormatInitParameters) DeepCopyInto(out *SingleLogFormatInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SingleLogFormatInitParameters.
func (in *SingleLogFormatInitParameters) DeepCopy() *SingleLogFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(SingleLogFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SingleLogFormatObservation) DeepCopyInto(out *SingleLogFormatObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SingleLogFormatObservation.
func (in *SingleLogFormatObservation) DeepCopy() *SingleLogFormatObservation {
	if in == nil {
		return nil
	}
	out := new(SingleLogFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SingleLogFormatParameters) DeepCopyInto(out *SingleLogFormatParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SingleLogFormatParameters.
func (in *SingleLogFormatParameters) DeepCopy() *SingleLogFormatParameters {
	if in == nil {
		return nil
	}
	out := new(SingleLogFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2) DeepCopyInto(out *StreamV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2.
func (in *StreamV2) DeepCopy() *StreamV2 {
	if in == nil {
		return nil
	}
	out := new(StreamV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *StreamV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2InitParameters) DeepCopyInto(out *StreamV2InitParameters) {
	*out = *in
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.StreamAlias != nil {
		in, out := &in.StreamAlias, &out.StreamAlias
		*out = new(string)
		**out = **in
	}
	if in.StreamName != nil {
		in, out := &in.StreamName, &out.StreamName
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2InitParameters.
func (in *StreamV2InitParameters) DeepCopy() *StreamV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(StreamV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2List) DeepCopyInto(out *StreamV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]StreamV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2List.
func (in *StreamV2List) DeepCopy() *StreamV2List {
	if in == nil {
		return nil
	}
	out := new(StreamV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *StreamV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2Observation) DeepCopyInto(out *StreamV2Observation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.FilterCount != nil {
		in, out := &in.FilterCount, &out.FilterCount
		*out = new(float64)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.StreamAlias != nil {
		in, out := &in.StreamAlias, &out.StreamAlias
		*out = new(string)
		**out = **in
	}
	if in.StreamName != nil {
		in, out := &in.StreamName, &out.StreamName
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2Observation.
func (in *StreamV2Observation) DeepCopy() *StreamV2Observation {
	if in == nil {
		return nil
	}
	out := new(StreamV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2Parameters) DeepCopyInto(out *StreamV2Parameters) {
	*out = *in
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.StreamAlias != nil {
		in, out := &in.StreamAlias, &out.StreamAlias
		*out = new(string)
		**out = **in
	}
	if in.StreamName != nil {
		in, out := &in.StreamName, &out.StreamName
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2Parameters.
func (in *StreamV2Parameters) DeepCopy() *StreamV2Parameters {
	if in == nil {
		return nil
	}
	out := new(StreamV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2Spec) DeepCopyInto(out *StreamV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2Spec.
func (in *StreamV2Spec) DeepCopy() *StreamV2Spec {
	if in == nil {
		return nil
	}
	out := new(StreamV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamV2Status) DeepCopyInto(out *StreamV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamV2Status.
func (in *StreamV2Status) DeepCopy() *StreamV2Status {
	if in == nil {
		return nil
	}
	out := new(StreamV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TemplatesInitParameters) DeepCopyInto(out *TemplatesInitParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.SubType != nil {
		in, out := &in.SubType, &out.SubType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TemplatesInitParameters.
func (in *TemplatesInitParameters) DeepCopy() *TemplatesInitParameters {
	if in == nil {
		return nil
	}
	out := new(TemplatesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TemplatesObservation) DeepCopyInto(out *TemplatesObservation) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.SubType != nil {
		in, out := &in.SubType, &out.SubType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TemplatesObservation.
func (in *TemplatesObservation) DeepCopy() *TemplatesObservation {
	if in == nil {
		return nil
	}
	out := new(TemplatesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TemplatesParameters) DeepCopyInto(out *TemplatesParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.SubType != nil {
		in, out := &in.SubType, &out.SubType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TemplatesParameters.
func (in *TemplatesParameters) DeepCopy() *TemplatesParameters {
	if in == nil {
		return nil
	}
	out := new(TemplatesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicsInitParameters) DeepCopyInto(out *TopicsInitParameters) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PushPolicy != nil {
		in, out := &in.PushPolicy, &out.PushPolicy
		*out = new(float64)
		**out = **in
	}
	if in.TopicUrn != nil {
		in, out := &in.TopicUrn, &out.TopicUrn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicsInitParameters.
func (in *TopicsInitParameters) DeepCopy() *TopicsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicsObservation) DeepCopyInto(out *TopicsObservation) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PushPolicy != nil {
		in, out := &in.PushPolicy, &out.PushPolicy
		*out = new(float64)
		**out = **in
	}
	if in.TopicUrn != nil {
		in, out := &in.TopicUrn, &out.TopicUrn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicsObservation.
func (in *TopicsObservation) DeepCopy() *TopicsObservation {
	if in == nil {
		return nil
	}
	out := new(TopicsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicsParameters) DeepCopyInto(out *TopicsParameters) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PushPolicy != nil {
		in, out := &in.PushPolicy, &out.PushPolicy
		*out = new(float64)
		**out = **in
	}
	if in.TopicUrn != nil {
		in, out := &in.TopicUrn, &out.TopicUrn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicsParameters.
func (in *TopicsParameters) DeepCopy() *TopicsParameters {
	if in == nil {
		return nil
	}
	out := new(TopicsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2) DeepCopyInto(out *TransferV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2.
func (in *TransferV2) DeepCopy() *TransferV2 {
	if in == nil {
		return nil
	}
	out := new(TransferV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TransferV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2InitParameters) DeepCopyInto(out *TransferV2InitParameters) {
	*out = *in
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreams != nil {
		in, out := &in.LogStreams, &out.LogStreams
		*out = make([]LogStreamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferInfo != nil {
		in, out := &in.LogTransferInfo, &out.LogTransferInfo
		*out = make([]LogTransferInfoInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2InitParameters.
func (in *TransferV2InitParameters) DeepCopy() *TransferV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(TransferV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2List) DeepCopyInto(out *TransferV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TransferV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2List.
func (in *TransferV2List) DeepCopy() *TransferV2List {
	if in == nil {
		return nil
	}
	out := new(TransferV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TransferV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2Observation) DeepCopyInto(out *TransferV2Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogGroupName != nil {
		in, out := &in.LogGroupName, &out.LogGroupName
		*out = new(string)
		**out = **in
	}
	if in.LogStreams != nil {
		in, out := &in.LogStreams, &out.LogStreams
		*out = make([]LogStreamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferInfo != nil {
		in, out := &in.LogTransferInfo, &out.LogTransferInfo
		*out = make([]LogTransferInfoObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2Observation.
func (in *TransferV2Observation) DeepCopy() *TransferV2Observation {
	if in == nil {
		return nil
	}
	out := new(TransferV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2Parameters) DeepCopyInto(out *TransferV2Parameters) {
	*out = *in
	if in.LogGroupID != nil {
		in, out := &in.LogGroupID, &out.LogGroupID
		*out = new(string)
		**out = **in
	}
	if in.LogStreams != nil {
		in, out := &in.LogStreams, &out.LogStreams
		*out = make([]LogStreamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LogTransferInfo != nil {
		in, out := &in.LogTransferInfo, &out.LogTransferInfo
		*out = make([]LogTransferInfoParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2Parameters.
func (in *TransferV2Parameters) DeepCopy() *TransferV2Parameters {
	if in == nil {
		return nil
	}
	out := new(TransferV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2Spec) DeepCopyInto(out *TransferV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2Spec.
func (in *TransferV2Spec) DeepCopy() *TransferV2Spec {
	if in == nil {
		return nil
	}
	out := new(TransferV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferV2Status) DeepCopyInto(out *TransferV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferV2Status.
func (in *TransferV2Status) DeepCopy() *TransferV2Status {
	if in == nil {
		return nil
	}
	out := new(TransferV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsLogInfoInitParameters) DeepCopyInto(out *WindowsLogInfoInitParameters) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventLevel != nil {
		in, out := &in.EventLevel, &out.EventLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeOffset != nil {
		in, out := &in.TimeOffset, &out.TimeOffset
		*out = new(float64)
		**out = **in
	}
	if in.TimeOffsetUnit != nil {
		in, out := &in.TimeOffsetUnit, &out.TimeOffsetUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsLogInfoInitParameters.
func (in *WindowsLogInfoInitParameters) DeepCopy() *WindowsLogInfoInitParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsLogInfoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsLogInfoObservation) DeepCopyInto(out *WindowsLogInfoObservation) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventLevel != nil {
		in, out := &in.EventLevel, &out.EventLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeOffset != nil {
		in, out := &in.TimeOffset, &out.TimeOffset
		*out = new(float64)
		**out = **in
	}
	if in.TimeOffsetUnit != nil {
		in, out := &in.TimeOffsetUnit, &out.TimeOffsetUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsLogInfoObservation.
func (in *WindowsLogInfoObservation) DeepCopy() *WindowsLogInfoObservation {
	if in == nil {
		return nil
	}
	out := new(WindowsLogInfoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsLogInfoParameters) DeepCopyInto(out *WindowsLogInfoParameters) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventLevel != nil {
		in, out := &in.EventLevel, &out.EventLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeOffset != nil {
		in, out := &in.TimeOffset, &out.TimeOffset
		*out = new(float64)
		**out = **in
	}
	if in.TimeOffsetUnit != nil {
		in, out := &in.TimeOffsetUnit, &out.TimeOffsetUnit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsLogInfoParameters.
func (in *WindowsLogInfoParameters) DeepCopy() *WindowsLogInfoParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsLogInfoParameters)
	in.DeepCopyInto(out)
	return out
}
