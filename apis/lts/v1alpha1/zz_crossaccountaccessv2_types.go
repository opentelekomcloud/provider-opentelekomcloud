// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CrossAccountAccessV2InitParameters struct {

	// Specifies the name of the delegator account to verify
	// the delegation. Changing this creates a new resource.
	AgencyDomainName *string `json:"agencyDomainName,omitempty" tf:"agency_domain_name,omitempty"`

	// Specifies the name of the agency created in IAM by the delegator.
	// Changing this creates a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the delegator project ID.
	// Changing this creates a new resource.
	AgencyProjectID *string `json:"agencyProjectId,omitempty" tf:"agency_project_id,omitempty"`

	// Specify the log group ID that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyGroupID *string `json:"logAgencyGroupId,omitempty" tf:"log_agency_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyGroupName *string `json:"logAgencyGroupName,omitempty" tf:"log_agency_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyStreamID *string `json:"logAgencyStreamId,omitempty" tf:"log_agency_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyStreamName *string `json:"logAgencyStreamName,omitempty" tf:"log_agency_stream_name,omitempty"`

	// Specify the log group ID that already exists in the
	// main account. Changing this creates a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// Specifies the name of the cross account access.
	// Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the key/value pairs to associate with the cross account access.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CrossAccountAccessV2Observation struct {

	// The log access configuration type.
	AccessConfigType *string `json:"accessConfigType,omitempty" tf:"access_config_type,omitempty"`

	// Specifies the name of the delegator account to verify
	// the delegation. Changing this creates a new resource.
	AgencyDomainName *string `json:"agencyDomainName,omitempty" tf:"agency_domain_name,omitempty"`

	// Specifies the name of the agency created in IAM by the delegator.
	// Changing this creates a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the delegator project ID.
	// Changing this creates a new resource.
	AgencyProjectID *string `json:"agencyProjectId,omitempty" tf:"agency_project_id,omitempty"`

	// The creation time of the cross account access, in RFC3339 format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specify the log group ID that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyGroupID *string `json:"logAgencyGroupId,omitempty" tf:"log_agency_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyGroupName *string `json:"logAgencyGroupName,omitempty" tf:"log_agency_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyStreamID *string `json:"logAgencyStreamId,omitempty" tf:"log_agency_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegated account. Changing this creates a new resource.
	LogAgencyStreamName *string `json:"logAgencyStreamName,omitempty" tf:"log_agency_stream_name,omitempty"`

	// Specify the log group ID that already exists in the
	// main account. Changing this creates a new resource.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegatee account. Changing this creates a new resource.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// Specifies the name of the cross account access.
	// Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Shows the region in the cce access resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value pairs to associate with the cross account access.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CrossAccountAccessV2Parameters struct {

	// Specifies the name of the delegator account to verify
	// the delegation. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	AgencyDomainName *string `json:"agencyDomainName,omitempty" tf:"agency_domain_name,omitempty"`

	// Specifies the name of the agency created in IAM by the delegator.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the delegator project ID.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	AgencyProjectID *string `json:"agencyProjectId,omitempty" tf:"agency_project_id,omitempty"`

	// Specify the log group ID that already exists in the
	// delegated account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogAgencyGroupID *string `json:"logAgencyGroupId,omitempty" tf:"log_agency_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegated account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogAgencyGroupName *string `json:"logAgencyGroupName,omitempty" tf:"log_agency_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegated account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogAgencyStreamID *string `json:"logAgencyStreamId,omitempty" tf:"log_agency_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegated account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogAgencyStreamName *string `json:"logAgencyStreamName,omitempty" tf:"log_agency_stream_name,omitempty"`

	// Specify the log group ID that already exists in the
	// main account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specify the log group name that already exists in the
	// delegatee account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// Specifies the log stream ID that already exists in the
	// delegatee account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the log stream name that already exists in the
	// delegatee account. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// Specifies the name of the cross account access.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the key/value pairs to associate with the cross account access.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CrossAccountAccessV2Spec defines the desired state of CrossAccountAccessV2
type CrossAccountAccessV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CrossAccountAccessV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CrossAccountAccessV2InitParameters `json:"initProvider,omitempty"`
}

// CrossAccountAccessV2Status defines the observed state of CrossAccountAccessV2.
type CrossAccountAccessV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CrossAccountAccessV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CrossAccountAccessV2 is the Schema for the CrossAccountAccessV2s API. Manages an LTS cross account access resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type CrossAccountAccessV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.agencyDomainName) || (has(self.initProvider) && has(self.initProvider.agencyDomainName))",message="spec.forProvider.agencyDomainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.agencyName) || (has(self.initProvider) && has(self.initProvider.agencyName))",message="spec.forProvider.agencyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.agencyProjectId) || (has(self.initProvider) && has(self.initProvider.agencyProjectId))",message="spec.forProvider.agencyProjectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logAgencyGroupId) || (has(self.initProvider) && has(self.initProvider.logAgencyGroupId))",message="spec.forProvider.logAgencyGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logAgencyGroupName) || (has(self.initProvider) && has(self.initProvider.logAgencyGroupName))",message="spec.forProvider.logAgencyGroupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logAgencyStreamId) || (has(self.initProvider) && has(self.initProvider.logAgencyStreamId))",message="spec.forProvider.logAgencyStreamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logAgencyStreamName) || (has(self.initProvider) && has(self.initProvider.logAgencyStreamName))",message="spec.forProvider.logAgencyStreamName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupId) || (has(self.initProvider) && has(self.initProvider.logGroupId))",message="spec.forProvider.logGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupName) || (has(self.initProvider) && has(self.initProvider.logGroupName))",message="spec.forProvider.logGroupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreamId) || (has(self.initProvider) && has(self.initProvider.logStreamId))",message="spec.forProvider.logStreamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreamName) || (has(self.initProvider) && has(self.initProvider.logStreamName))",message="spec.forProvider.logStreamName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CrossAccountAccessV2Spec   `json:"spec"`
	Status CrossAccountAccessV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CrossAccountAccessV2List contains a list of CrossAccountAccessV2s
type CrossAccountAccessV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CrossAccountAccessV2 `json:"items"`
}

// Repository type metadata.
var (
	CrossAccountAccessV2_Kind             = "CrossAccountAccessV2"
	CrossAccountAccessV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CrossAccountAccessV2_Kind}.String()
	CrossAccountAccessV2_KindAPIVersion   = CrossAccountAccessV2_Kind + "." + CRDGroupVersion.String()
	CrossAccountAccessV2_GroupVersionKind = CRDGroupVersion.WithKind(CrossAccountAccessV2_Kind)
)

func init() {
	SchemeBuilder.Register(&CrossAccountAccessV2{}, &CrossAccountAccessV2List{})
}
