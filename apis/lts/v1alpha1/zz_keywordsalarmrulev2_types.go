// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FrequencyInitParameters struct {

	// Specifies the cron expression.
	// This parameter is used when type is set to CRON.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`

	// Specifies the day of week.
	// This parameter is used when type is set to WEEKLY.
	// The value ranges from 1 to 7. 1 means Sunday.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Specifies the unit fixed rate.
	// This parameter is used when type is set to FIXED_RATE.
	FixedRate *float64 `json:"fixedRate,omitempty" tf:"fixed_rate,omitempty"`

	// is minute, the value ranges from 1 to 60.
	FixedRateUnit *string `json:"fixedRateUnit,omitempty" tf:"fixed_rate_unit,omitempty"`

	// Specifies the hour of day.
	// This parameter is used when type is set to DAILY or WEEKLY.
	// The value ranges from 0 to 23.
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	// Specifies the frequency type.
	// The value can be: CRON, HOURLY, DAILY, WEEKLY and FIXED_RATE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FrequencyObservation struct {

	// Specifies the cron expression.
	// This parameter is used when type is set to CRON.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`

	// Specifies the day of week.
	// This parameter is used when type is set to WEEKLY.
	// The value ranges from 1 to 7. 1 means Sunday.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Specifies the unit fixed rate.
	// This parameter is used when type is set to FIXED_RATE.
	FixedRate *float64 `json:"fixedRate,omitempty" tf:"fixed_rate,omitempty"`

	// is minute, the value ranges from 1 to 60.
	FixedRateUnit *string `json:"fixedRateUnit,omitempty" tf:"fixed_rate_unit,omitempty"`

	// Specifies the hour of day.
	// This parameter is used when type is set to DAILY or WEEKLY.
	// The value ranges from 0 to 23.
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	// Specifies the frequency type.
	// The value can be: CRON, HOURLY, DAILY, WEEKLY and FIXED_RATE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FrequencyParameters struct {

	// Specifies the cron expression.
	// This parameter is used when type is set to CRON.
	// +kubebuilder:validation:Optional
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`

	// Specifies the day of week.
	// This parameter is used when type is set to WEEKLY.
	// The value ranges from 1 to 7. 1 means Sunday.
	// +kubebuilder:validation:Optional
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Specifies the unit fixed rate.
	// This parameter is used when type is set to FIXED_RATE.
	// +kubebuilder:validation:Optional
	FixedRate *float64 `json:"fixedRate,omitempty" tf:"fixed_rate,omitempty"`

	// is minute, the value ranges from 1 to 60.
	// +kubebuilder:validation:Optional
	FixedRateUnit *string `json:"fixedRateUnit,omitempty" tf:"fixed_rate_unit,omitempty"`

	// Specifies the hour of day.
	// This parameter is used when type is set to DAILY or WEEKLY.
	// The value ranges from 0 to 23.
	// +kubebuilder:validation:Optional
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	// Specifies the frequency type.
	// The value can be: CRON, HOURLY, DAILY, WEEKLY and FIXED_RATE.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type KeywordsAlarmRuleV2InitParameters struct {

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	AlarmActionRuleName *string `json:"alarmActionRuleName,omitempty" tf:"alarm_action_rule_name,omitempty"`

	// Specifies the description of the keywords alarm rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the alarm frequency configurations.
	// The Frequency structure is documented below.
	Frequency []FrequencyInitParameters `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Specifies the keywords requests.
	// The KeywordsRequests structure is documented below.
	KeywordsRequests []KeywordsRequestsInitParameters `json:"keywordsRequests,omitempty" tf:"keywords_requests,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies notification frequency, in minutes.
	NotificationFrequency *float64 `json:"notificationFrequency,omitempty" tf:"notification_frequency,omitempty"`

	// Specifies the notification rule.
	// The NotificationRule structure is documented below.
	NotificationRule []NotificationRuleInitParameters `json:"notificationRule,omitempty" tf:"notification_rule,omitempty"`

	RecoveryPolicy *float64 `json:"recoveryPolicy,omitempty" tf:"recovery_policy,omitempty"`

	// Specifies whether to send notifications.
	SendNotifications *bool `json:"sendNotifications,omitempty" tf:"send_notifications,omitempty"`

	// Specifies whether to send recovery notifications.
	SendRecoveryNotifications *bool `json:"sendRecoveryNotifications,omitempty" tf:"send_recovery_notifications,omitempty"`

	// Specifies the alarm level.
	// The value can be: INFO, MINOR, MAJOR and CRITICAL.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Specifies the count to trigger the alarm.
	// Defaults to 1.
	TriggerConditionCount *float64 `json:"triggerConditionCount,omitempty" tf:"trigger_condition_count,omitempty"`

	// Specifies the frequency to trigger the alarm.
	// Defaults to 1.
	TriggerConditionFrequency *float64 `json:"triggerConditionFrequency,omitempty" tf:"trigger_condition_frequency,omitempty"`
}

type KeywordsAlarmRuleV2Observation struct {

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	AlarmActionRuleName *string `json:"alarmActionRuleName,omitempty" tf:"alarm_action_rule_name,omitempty"`

	// The creation time of the alarm rule.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the keywords alarm rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain ID.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Specifies the alarm frequency configurations.
	// The Frequency structure is documented below.
	Frequency []FrequencyObservation `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the keywords requests.
	// The KeywordsRequests structure is documented below.
	KeywordsRequests []KeywordsRequestsObservation `json:"keywordsRequests,omitempty" tf:"keywords_requests,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies notification frequency, in minutes.
	NotificationFrequency *float64 `json:"notificationFrequency,omitempty" tf:"notification_frequency,omitempty"`

	// Specifies the notification rule.
	// The NotificationRule structure is documented below.
	NotificationRule []NotificationRuleObservation `json:"notificationRule,omitempty" tf:"notification_rule,omitempty"`

	RecoveryPolicy *float64 `json:"recoveryPolicy,omitempty" tf:"recovery_policy,omitempty"`

	// Shows the region in the rule resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies whether to send notifications.
	SendNotifications *bool `json:"sendNotifications,omitempty" tf:"send_notifications,omitempty"`

	// Specifies whether to send recovery notifications.
	SendRecoveryNotifications *bool `json:"sendRecoveryNotifications,omitempty" tf:"send_recovery_notifications,omitempty"`

	// Specifies the alarm level.
	// The value can be: INFO, MINOR, MAJOR and CRITICAL.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Status of the rule.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the count to trigger the alarm.
	// Defaults to 1.
	TriggerConditionCount *float64 `json:"triggerConditionCount,omitempty" tf:"trigger_condition_count,omitempty"`

	// Specifies the frequency to trigger the alarm.
	// Defaults to 1.
	TriggerConditionFrequency *float64 `json:"triggerConditionFrequency,omitempty" tf:"trigger_condition_frequency,omitempty"`

	// The last update time of the alarm rule.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type KeywordsAlarmRuleV2Parameters struct {

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AlarmActionRuleName *string `json:"alarmActionRuleName,omitempty" tf:"alarm_action_rule_name,omitempty"`

	// Specifies the description of the keywords alarm rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the alarm frequency configurations.
	// The Frequency structure is documented below.
	// +kubebuilder:validation:Optional
	Frequency []FrequencyParameters `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Specifies the keywords requests.
	// The KeywordsRequests structure is documented below.
	// +kubebuilder:validation:Optional
	KeywordsRequests []KeywordsRequestsParameters `json:"keywordsRequests,omitempty" tf:"keywords_requests,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies notification frequency, in minutes.
	// +kubebuilder:validation:Optional
	NotificationFrequency *float64 `json:"notificationFrequency,omitempty" tf:"notification_frequency,omitempty"`

	// Specifies the notification rule.
	// The NotificationRule structure is documented below.
	// +kubebuilder:validation:Optional
	NotificationRule []NotificationRuleParameters `json:"notificationRule,omitempty" tf:"notification_rule,omitempty"`

	// +kubebuilder:validation:Optional
	RecoveryPolicy *float64 `json:"recoveryPolicy,omitempty" tf:"recovery_policy,omitempty"`

	// Specifies whether to send notifications.
	// +kubebuilder:validation:Optional
	SendNotifications *bool `json:"sendNotifications,omitempty" tf:"send_notifications,omitempty"`

	// Specifies whether to send recovery notifications.
	// +kubebuilder:validation:Optional
	SendRecoveryNotifications *bool `json:"sendRecoveryNotifications,omitempty" tf:"send_recovery_notifications,omitempty"`

	// Specifies the alarm level.
	// The value can be: INFO, MINOR, MAJOR and CRITICAL.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Specifies the count to trigger the alarm.
	// Defaults to 1.
	// +kubebuilder:validation:Optional
	TriggerConditionCount *float64 `json:"triggerConditionCount,omitempty" tf:"trigger_condition_count,omitempty"`

	// Specifies the frequency to trigger the alarm.
	// Defaults to 1.
	// +kubebuilder:validation:Optional
	TriggerConditionFrequency *float64 `json:"triggerConditionFrequency,omitempty" tf:"trigger_condition_frequency,omitempty"`
}

type KeywordsRequestsInitParameters struct {

	// Specifies the keywords request condition.
	// The value can be: >=, <=, < and >.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies the keywords.
	Keyword *string `json:"keyword,omitempty" tf:"keyword,omitempty"`

	// Specifies the log group id.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the log stream id.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the line number.
	Number *float64 `json:"number,omitempty" tf:"number,omitempty"`

	// Specifies the search time range.
	SearchTimeRange *float64 `json:"searchTimeRange,omitempty" tf:"search_time_range,omitempty"`

	// is minute, the value ranges from 1 to 60.
	SearchTimeRangeUnit *string `json:"searchTimeRangeUnit,omitempty" tf:"search_time_range_unit,omitempty"`
}

type KeywordsRequestsObservation struct {

	// Specifies the keywords request condition.
	// The value can be: >=, <=, < and >.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies the keywords.
	Keyword *string `json:"keyword,omitempty" tf:"keyword,omitempty"`

	// Specifies the log group id.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Specifies the log stream id.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Specifies the line number.
	Number *float64 `json:"number,omitempty" tf:"number,omitempty"`

	// Specifies the search time range.
	SearchTimeRange *float64 `json:"searchTimeRange,omitempty" tf:"search_time_range,omitempty"`

	// is minute, the value ranges from 1 to 60.
	SearchTimeRangeUnit *string `json:"searchTimeRangeUnit,omitempty" tf:"search_time_range_unit,omitempty"`
}

type KeywordsRequestsParameters struct {

	// Specifies the keywords request condition.
	// The value can be: >=, <=, < and >.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// Specifies the keywords.
	// +kubebuilder:validation:Optional
	Keyword *string `json:"keyword" tf:"keyword,omitempty"`

	// Specifies the log group id.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId" tf:"log_group_id,omitempty"`

	// Specifies the log stream id.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId" tf:"log_stream_id,omitempty"`

	// Specifies the line number.
	// +kubebuilder:validation:Optional
	Number *float64 `json:"number" tf:"number,omitempty"`

	// Specifies the search time range.
	// +kubebuilder:validation:Optional
	SearchTimeRange *float64 `json:"searchTimeRange" tf:"search_time_range,omitempty"`

	// is minute, the value ranges from 1 to 60.
	// +kubebuilder:validation:Optional
	SearchTimeRangeUnit *string `json:"searchTimeRangeUnit" tf:"search_time_range_unit,omitempty"`
}

type NotificationRuleInitParameters struct {

	// Specifies the notification language.
	// The value can be en-us.
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Specifies the notification template name.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies the SMN topics.
	// The Topic structure is documented below.
	Topics []TopicsInitParameters `json:"topics,omitempty" tf:"topics,omitempty"`

	// Specifies the username.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type NotificationRuleObservation struct {

	// Specifies the notification language.
	// The value can be en-us.
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Specifies the notification template name.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies the SMN topics.
	// The Topic structure is documented below.
	Topics []TopicsObservation `json:"topics,omitempty" tf:"topics,omitempty"`

	// Specifies the username.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type NotificationRuleParameters struct {

	// Specifies the notification language.
	// The value can be en-us.
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Specifies the notification template name.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies the SMN topics.
	// The Topic structure is documented below.
	// +kubebuilder:validation:Optional
	Topics []TopicsParameters `json:"topics" tf:"topics,omitempty"`

	// Specifies the username.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName" tf:"user_name,omitempty"`
}

type TopicsInitParameters struct {

	// Specifies the display name.
	// This will be shown as the sender of the message.
	// Changing this parameter will create a new resource.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the push policy.
	// Changing this parameter will create a new resource.
	PushPolicy *float64 `json:"pushPolicy,omitempty" tf:"push_policy,omitempty"`

	// Specifies the topic URN.
	// Changing this parameter will create a new resource.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type TopicsObservation struct {

	// Specifies the display name.
	// This will be shown as the sender of the message.
	// Changing this parameter will create a new resource.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the push policy.
	// Changing this parameter will create a new resource.
	PushPolicy *float64 `json:"pushPolicy,omitempty" tf:"push_policy,omitempty"`

	// Specifies the topic URN.
	// Changing this parameter will create a new resource.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type TopicsParameters struct {

	// Specifies the display name.
	// This will be shown as the sender of the message.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the name of the keywords alarm rule.
	// The value can contain no more than 64 characters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the push policy.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PushPolicy *float64 `json:"pushPolicy,omitempty" tf:"push_policy,omitempty"`

	// Specifies the topic URN.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TopicUrn *string `json:"topicUrn" tf:"topic_urn,omitempty"`
}

// KeywordsAlarmRuleV2Spec defines the desired state of KeywordsAlarmRuleV2
type KeywordsAlarmRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeywordsAlarmRuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeywordsAlarmRuleV2InitParameters `json:"initProvider,omitempty"`
}

// KeywordsAlarmRuleV2Status defines the observed state of KeywordsAlarmRuleV2.
type KeywordsAlarmRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeywordsAlarmRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KeywordsAlarmRuleV2 is the Schema for the KeywordsAlarmRuleV2s API. Manages a LTS keywords alarm rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type KeywordsAlarmRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) && has(self.initProvider.frequency))",message="spec.forProvider.frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keywordsRequests) || (has(self.initProvider) && has(self.initProvider.keywordsRequests))",message="spec.forProvider.keywordsRequests is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notificationFrequency) || (has(self.initProvider) && has(self.initProvider.notificationFrequency))",message="spec.forProvider.notificationFrequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.severity) || (has(self.initProvider) && has(self.initProvider.severity))",message="spec.forProvider.severity is a required parameter"
	Spec   KeywordsAlarmRuleV2Spec   `json:"spec"`
	Status KeywordsAlarmRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeywordsAlarmRuleV2List contains a list of KeywordsAlarmRuleV2s
type KeywordsAlarmRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeywordsAlarmRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	KeywordsAlarmRuleV2_Kind             = "KeywordsAlarmRuleV2"
	KeywordsAlarmRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeywordsAlarmRuleV2_Kind}.String()
	KeywordsAlarmRuleV2_KindAPIVersion   = KeywordsAlarmRuleV2_Kind + "." + CRDGroupVersion.String()
	KeywordsAlarmRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(KeywordsAlarmRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&KeywordsAlarmRuleV2{}, &KeywordsAlarmRuleV2List{})
}
