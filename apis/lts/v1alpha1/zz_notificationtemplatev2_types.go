// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationTemplateV2InitParameters struct {

	// The description of the notification template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// The name of the notification template.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The source of the notification template.
	// Currently, this parameter is mandatory to LTS.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The list of notification template body.
	// The templates structure is documented below.
	Templates []TemplatesInitParameters `json:"templates,omitempty" tf:"templates,omitempty"`
}

type NotificationTemplateV2Observation struct {

	// The description of the notification template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The resource ID which equals name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// The name of the notification template.
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Shows the region in the template resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The source of the notification template.
	// Currently, this parameter is mandatory to LTS.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The list of notification template body.
	// The templates structure is documented below.
	Templates []TemplatesObservation `json:"templates,omitempty" tf:"templates,omitempty"`
}

type NotificationTemplateV2Parameters struct {

	// The description of the notification template.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// The name of the notification template.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The source of the notification template.
	// Currently, this parameter is mandatory to LTS.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The list of notification template body.
	// The templates structure is documented below.
	// +kubebuilder:validation:Optional
	Templates []TemplatesParameters `json:"templates,omitempty" tf:"templates,omitempty"`
}

type TemplatesInitParameters struct {

	// The content of the sub-template.
	// In the sub-template body, only the following variables are supported for the variables following the $ symbol.
	// The supported variables vary according to the alarm type (keyword alarm and SQL alarm).
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The type of the sub-template.
	// Only the following five types are supported: sms, email.
	SubType *string `json:"subType,omitempty" tf:"sub_type,omitempty"`
}

type TemplatesObservation struct {

	// The content of the sub-template.
	// In the sub-template body, only the following variables are supported for the variables following the $ symbol.
	// The supported variables vary according to the alarm type (keyword alarm and SQL alarm).
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The type of the sub-template.
	// Only the following five types are supported: sms, email.
	SubType *string `json:"subType,omitempty" tf:"sub_type,omitempty"`
}

type TemplatesParameters struct {

	// The content of the sub-template.
	// In the sub-template body, only the following variables are supported for the variables following the $ symbol.
	// The supported variables vary according to the alarm type (keyword alarm and SQL alarm).
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// The type of the sub-template.
	// Only the following five types are supported: sms, email.
	// +kubebuilder:validation:Optional
	SubType *string `json:"subType" tf:"sub_type,omitempty"`
}

// NotificationTemplateV2Spec defines the desired state of NotificationTemplateV2
type NotificationTemplateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationTemplateV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotificationTemplateV2InitParameters `json:"initProvider,omitempty"`
}

// NotificationTemplateV2Status defines the observed state of NotificationTemplateV2.
type NotificationTemplateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationTemplateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NotificationTemplateV2 is the Schema for the NotificationTemplateV2s API. Manages a LTS notification template resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NotificationTemplateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.language) || (has(self.initProvider) && has(self.initProvider.language))",message="spec.forProvider.language is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templates) || (has(self.initProvider) && has(self.initProvider.templates))",message="spec.forProvider.templates is a required parameter"
	Spec   NotificationTemplateV2Spec   `json:"spec"`
	Status NotificationTemplateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationTemplateV2List contains a list of NotificationTemplateV2s
type NotificationTemplateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationTemplateV2 `json:"items"`
}

// Repository type metadata.
var (
	NotificationTemplateV2_Kind             = "NotificationTemplateV2"
	NotificationTemplateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationTemplateV2_Kind}.String()
	NotificationTemplateV2_KindAPIVersion   = NotificationTemplateV2_Kind + "." + CRDGroupVersion.String()
	NotificationTemplateV2_GroupVersionKind = CRDGroupVersion.WithKind(NotificationTemplateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationTemplateV2{}, &NotificationTemplateV2List{})
}
