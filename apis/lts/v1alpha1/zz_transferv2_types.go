// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogAgencyTransferInitParameters struct {

	// Delegator account ID.
	AgencyDomainID *string `json:"agencyDomainId,omitempty" tf:"agency_domain_id,omitempty"`

	// Delegator account name.
	AgencyDomainName *string `json:"agencyDomainName,omitempty" tf:"agency_domain_name,omitempty"`

	// The agency name created by the delegator.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Project ID of the delegator.
	AgencyProjectID *string `json:"agencyProjectId,omitempty" tf:"agency_project_id,omitempty"`
}

type LogAgencyTransferObservation struct {

	// Delegator account ID.
	AgencyDomainID *string `json:"agencyDomainId,omitempty" tf:"agency_domain_id,omitempty"`

	// Delegator account name.
	AgencyDomainName *string `json:"agencyDomainName,omitempty" tf:"agency_domain_name,omitempty"`

	// The agency name created by the delegator.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Project ID of the delegator.
	AgencyProjectID *string `json:"agencyProjectId,omitempty" tf:"agency_project_id,omitempty"`
}

type LogAgencyTransferParameters struct {

	// Delegator account ID.
	// +kubebuilder:validation:Optional
	AgencyDomainID *string `json:"agencyDomainId" tf:"agency_domain_id,omitempty"`

	// Delegator account name.
	// +kubebuilder:validation:Optional
	AgencyDomainName *string `json:"agencyDomainName" tf:"agency_domain_name,omitempty"`

	// The agency name created by the delegator.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName" tf:"agency_name,omitempty"`

	// Project ID of the delegator.
	// +kubebuilder:validation:Optional
	AgencyProjectID *string `json:"agencyProjectId" tf:"agency_project_id,omitempty"`
}

type LogStreamsInitParameters struct {

	// Log stream ID.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Log stream name.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`
}

type LogStreamsObservation struct {

	// Log stream ID.
	LogStreamID *string `json:"logStreamId,omitempty" tf:"log_stream_id,omitempty"`

	// Log stream name.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`
}

type LogStreamsParameters struct {

	// Log stream ID.
	// +kubebuilder:validation:Optional
	LogStreamID *string `json:"logStreamId" tf:"log_stream_id,omitempty"`

	// Log stream name.
	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`
}

type LogTransferDetailInitParameters struct {

	// OBS bucket name.
	// This parameter is mandatory when you create an OBS transfer task.
	ObsBucketName *string `json:"obsBucketName,omitempty" tf:"obs_bucket_name,omitempty"`

	// Custom transfer path of an OBS transfer task.
	ObsDirPrefixName *string `json:"obsDirPrefixName,omitempty" tf:"obs_dir_prefix_name,omitempty"`

	// Whether OBS bucket encryption is enabled.
	ObsEncryptedEnable *bool `json:"obsEncryptedEnable,omitempty" tf:"obs_encrypted_enable,omitempty"`

	// KMS key ID for an OBS transfer task.
	// This parameter is mandatory if encryption is enabled for the target OBS bucket.
	ObsEncryptedID *string `json:"obsEncryptedId,omitempty" tf:"obs_encrypted_id,omitempty"`

	// Enterprise project ID of an OBS transfer task.
	ObsEpsID *string `json:"obsEpsId,omitempty" tf:"obs_eps_id,omitempty"`

	// Length of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	ObsPeriod *float64 `json:"obsPeriod,omitempty" tf:"obs_period,omitempty"`

	// Unit of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	ObsPeriodUnit *string `json:"obsPeriodUnit,omitempty" tf:"obs_period_unit,omitempty"`

	// Transfer file prefix of an OBS transfer task.
	ObsPrefixName *string `json:"obsPrefixName,omitempty" tf:"obs_prefix_name,omitempty"`

	// Time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone_id must also be specified.
	ObsTimeZone *string `json:"obsTimeZone,omitempty" tf:"obs_time_zone,omitempty"`

	// ID of the time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone must also be specified.
	ObsTimeZoneID *string `json:"obsTimeZoneId,omitempty" tf:"obs_time_zone_id,omitempty"`

	// OBS bucket path, which is the log transfer destination.
	ObsTransferPath *string `json:"obsTransferPath,omitempty" tf:"obs_transfer_path,omitempty"`

	// The list of tag fields will be delivered when transferring.
	// This field must contain the following host information: hostIP, hostId, hostName, pathFile, and collectTime.
	// The common fields include logStreamName, regionName, logGroupName, and projectId, which are optional.
	// The transfer tag: streamTag, which is optional.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type LogTransferDetailObservation struct {

	// OBS bucket name.
	// This parameter is mandatory when you create an OBS transfer task.
	ObsBucketName *string `json:"obsBucketName,omitempty" tf:"obs_bucket_name,omitempty"`

	// Custom transfer path of an OBS transfer task.
	ObsDirPrefixName *string `json:"obsDirPrefixName,omitempty" tf:"obs_dir_prefix_name,omitempty"`

	// Whether OBS bucket encryption is enabled.
	ObsEncryptedEnable *bool `json:"obsEncryptedEnable,omitempty" tf:"obs_encrypted_enable,omitempty"`

	// KMS key ID for an OBS transfer task.
	// This parameter is mandatory if encryption is enabled for the target OBS bucket.
	ObsEncryptedID *string `json:"obsEncryptedId,omitempty" tf:"obs_encrypted_id,omitempty"`

	// Enterprise project ID of an OBS transfer task.
	ObsEpsID *string `json:"obsEpsId,omitempty" tf:"obs_eps_id,omitempty"`

	// Length of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	ObsPeriod *float64 `json:"obsPeriod,omitempty" tf:"obs_period,omitempty"`

	// Unit of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	ObsPeriodUnit *string `json:"obsPeriodUnit,omitempty" tf:"obs_period_unit,omitempty"`

	// Transfer file prefix of an OBS transfer task.
	ObsPrefixName *string `json:"obsPrefixName,omitempty" tf:"obs_prefix_name,omitempty"`

	// Time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone_id must also be specified.
	ObsTimeZone *string `json:"obsTimeZone,omitempty" tf:"obs_time_zone,omitempty"`

	// ID of the time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone must also be specified.
	ObsTimeZoneID *string `json:"obsTimeZoneId,omitempty" tf:"obs_time_zone_id,omitempty"`

	// OBS bucket path, which is the log transfer destination.
	ObsTransferPath *string `json:"obsTransferPath,omitempty" tf:"obs_transfer_path,omitempty"`

	// The list of tag fields will be delivered when transferring.
	// This field must contain the following host information: hostIP, hostId, hostName, pathFile, and collectTime.
	// The common fields include logStreamName, regionName, logGroupName, and projectId, which are optional.
	// The transfer tag: streamTag, which is optional.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type LogTransferDetailParameters struct {

	// OBS bucket name.
	// This parameter is mandatory when you create an OBS transfer task.
	// +kubebuilder:validation:Optional
	ObsBucketName *string `json:"obsBucketName,omitempty" tf:"obs_bucket_name,omitempty"`

	// Custom transfer path of an OBS transfer task.
	// +kubebuilder:validation:Optional
	ObsDirPrefixName *string `json:"obsDirPrefixName,omitempty" tf:"obs_dir_prefix_name,omitempty"`

	// Whether OBS bucket encryption is enabled.
	// +kubebuilder:validation:Optional
	ObsEncryptedEnable *bool `json:"obsEncryptedEnable,omitempty" tf:"obs_encrypted_enable,omitempty"`

	// KMS key ID for an OBS transfer task.
	// This parameter is mandatory if encryption is enabled for the target OBS bucket.
	// +kubebuilder:validation:Optional
	ObsEncryptedID *string `json:"obsEncryptedId,omitempty" tf:"obs_encrypted_id,omitempty"`

	// Enterprise project ID of an OBS transfer task.
	// +kubebuilder:validation:Optional
	ObsEpsID *string `json:"obsEpsId,omitempty" tf:"obs_eps_id,omitempty"`

	// Length of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	// +kubebuilder:validation:Optional
	ObsPeriod *float64 `json:"obsPeriod,omitempty" tf:"obs_period,omitempty"`

	// Unit of the transfer interval for an OBS transfer task.
	// This parameter is mandatory when you create an OBS transfer task.
	// The log transfer interval is specified by the combination of the values of obs_period and obs_period_unit,
	// and must be set to one of the following: 2 min, 5 min, 30 min, 1 hour, 3 hours, 6 hours, and 12 hours.
	// Value options are as follows:
	// +kubebuilder:validation:Optional
	ObsPeriodUnit *string `json:"obsPeriodUnit,omitempty" tf:"obs_period_unit,omitempty"`

	// Transfer file prefix of an OBS transfer task.
	// +kubebuilder:validation:Optional
	ObsPrefixName *string `json:"obsPrefixName,omitempty" tf:"obs_prefix_name,omitempty"`

	// Time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone_id must also be specified.
	// +kubebuilder:validation:Optional
	ObsTimeZone *string `json:"obsTimeZone,omitempty" tf:"obs_time_zone,omitempty"`

	// ID of the time zone for an OBS transfer task.
	// If this parameter is specified, obs_time_zone must also be specified.
	// +kubebuilder:validation:Optional
	ObsTimeZoneID *string `json:"obsTimeZoneId,omitempty" tf:"obs_time_zone_id,omitempty"`

	// OBS bucket path, which is the log transfer destination.
	// +kubebuilder:validation:Optional
	ObsTransferPath *string `json:"obsTransferPath,omitempty" tf:"obs_transfer_path,omitempty"`

	// The list of tag fields will be delivered when transferring.
	// This field must contain the following host information: hostIP, hostId, hostName, pathFile, and collectTime.
	// The common fields include logStreamName, regionName, logGroupName, and projectId, which are optional.
	// The transfer tag: streamTag, which is optional.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type LogTransferInfoInitParameters struct {

	// Information about agency which lets an account delegate resource management
	// to other accounts.
	// This parameter is mandatory if you transfer logs for another account.
	// The log_agency_transfer structure is documented below.
	LogAgencyTransfer []LogAgencyTransferInitParameters `json:"logAgencyTransfer,omitempty" tf:"log_agency_transfer,omitempty"`

	// Log transfer format.
	// Value options are as follows:
	LogStorageFormat *string `json:"logStorageFormat,omitempty" tf:"log_storage_format,omitempty"`

	// Log transfer details.
	// The log_transfer_detail structure is documented below.
	LogTransferDetail []LogTransferDetailInitParameters `json:"logTransferDetail,omitempty" tf:"log_transfer_detail,omitempty"`

	// Log transfer mode.
	// Value options are as follows:
	LogTransferMode *string `json:"logTransferMode,omitempty" tf:"log_transfer_mode,omitempty"`

	// Log transfer status.
	// Value options are as follows:
	LogTransferStatus *string `json:"logTransferStatus,omitempty" tf:"log_transfer_status,omitempty"`

	// Log transfer type.
	// The valid values are OBS.
	LogTransferType *string `json:"logTransferType,omitempty" tf:"log_transfer_type,omitempty"`
}

type LogTransferInfoObservation struct {

	// Information about agency which lets an account delegate resource management
	// to other accounts.
	// This parameter is mandatory if you transfer logs for another account.
	// The log_agency_transfer structure is documented below.
	LogAgencyTransfer []LogAgencyTransferObservation `json:"logAgencyTransfer,omitempty" tf:"log_agency_transfer,omitempty"`

	LogCreatedAt *string `json:"logCreatedAt,omitempty" tf:"log_created_at,omitempty"`

	// Log transfer format.
	// Value options are as follows:
	LogStorageFormat *string `json:"logStorageFormat,omitempty" tf:"log_storage_format,omitempty"`

	// Log transfer details.
	// The log_transfer_detail structure is documented below.
	LogTransferDetail []LogTransferDetailObservation `json:"logTransferDetail,omitempty" tf:"log_transfer_detail,omitempty"`

	// Log transfer mode.
	// Value options are as follows:
	LogTransferMode *string `json:"logTransferMode,omitempty" tf:"log_transfer_mode,omitempty"`

	// Log transfer status.
	// Value options are as follows:
	LogTransferStatus *string `json:"logTransferStatus,omitempty" tf:"log_transfer_status,omitempty"`

	// Log transfer type.
	// The valid values are OBS.
	LogTransferType *string `json:"logTransferType,omitempty" tf:"log_transfer_type,omitempty"`
}

type LogTransferInfoParameters struct {

	// Information about agency which lets an account delegate resource management
	// to other accounts.
	// This parameter is mandatory if you transfer logs for another account.
	// The log_agency_transfer structure is documented below.
	// +kubebuilder:validation:Optional
	LogAgencyTransfer []LogAgencyTransferParameters `json:"logAgencyTransfer,omitempty" tf:"log_agency_transfer,omitempty"`

	// Log transfer format.
	// Value options are as follows:
	// +kubebuilder:validation:Optional
	LogStorageFormat *string `json:"logStorageFormat" tf:"log_storage_format,omitempty"`

	// Log transfer details.
	// The log_transfer_detail structure is documented below.
	// +kubebuilder:validation:Optional
	LogTransferDetail []LogTransferDetailParameters `json:"logTransferDetail" tf:"log_transfer_detail,omitempty"`

	// Log transfer mode.
	// Value options are as follows:
	// +kubebuilder:validation:Optional
	LogTransferMode *string `json:"logTransferMode" tf:"log_transfer_mode,omitempty"`

	// Log transfer status.
	// Value options are as follows:
	// +kubebuilder:validation:Optional
	LogTransferStatus *string `json:"logTransferStatus" tf:"log_transfer_status,omitempty"`

	// Log transfer type.
	// The valid values are OBS.
	// +kubebuilder:validation:Optional
	LogTransferType *string `json:"logTransferType" tf:"log_transfer_type,omitempty"`
}

type TransferV2InitParameters struct {

	// Log group ID.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// The list of log streams.
	LogStreams []LogStreamsInitParameters `json:"logStreams,omitempty" tf:"log_streams,omitempty"`

	// Log transfer information.
	// The log_transfer_info structure is documented below.
	LogTransferInfo []LogTransferInfoInitParameters `json:"logTransferInfo,omitempty" tf:"log_transfer_info,omitempty"`
}

type TransferV2Observation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log group ID.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Log group name.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// The list of log streams.
	LogStreams []LogStreamsObservation `json:"logStreams,omitempty" tf:"log_streams,omitempty"`

	// Log transfer information.
	// The log_transfer_info structure is documented below.
	LogTransferInfo []LogTransferInfoObservation `json:"logTransferInfo,omitempty" tf:"log_transfer_info,omitempty"`

	// Shows the region in the log group resource created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TransferV2Parameters struct {

	// Log group ID.
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// The list of log streams.
	// +kubebuilder:validation:Optional
	LogStreams []LogStreamsParameters `json:"logStreams,omitempty" tf:"log_streams,omitempty"`

	// Log transfer information.
	// The log_transfer_info structure is documented below.
	// +kubebuilder:validation:Optional
	LogTransferInfo []LogTransferInfoParameters `json:"logTransferInfo,omitempty" tf:"log_transfer_info,omitempty"`
}

// TransferV2Spec defines the desired state of TransferV2
type TransferV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransferV2InitParameters `json:"initProvider,omitempty"`
}

// TransferV2Status defines the observed state of TransferV2.
type TransferV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TransferV2 is the Schema for the TransferV2s API. Manages a LTS Log Transfer resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TransferV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logGroupId) || (has(self.initProvider) && has(self.initProvider.logGroupId))",message="spec.forProvider.logGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logStreams) || (has(self.initProvider) && has(self.initProvider.logStreams))",message="spec.forProvider.logStreams is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logTransferInfo) || (has(self.initProvider) && has(self.initProvider.logTransferInfo))",message="spec.forProvider.logTransferInfo is a required parameter"
	Spec   TransferV2Spec   `json:"spec"`
	Status TransferV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferV2List contains a list of TransferV2s
type TransferV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferV2 `json:"items"`
}

// Repository type metadata.
var (
	TransferV2_Kind             = "TransferV2"
	TransferV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransferV2_Kind}.String()
	TransferV2_KindAPIVersion   = TransferV2_Kind + "." + CRDGroupVersion.String()
	TransferV2_GroupVersionKind = CRDGroupVersion.WithKind(TransferV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TransferV2{}, &TransferV2List{})
}
