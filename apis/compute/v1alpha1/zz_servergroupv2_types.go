/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServergroupV2InitParameters struct {

	// A unique name for the server group. Changing this creates
	// a new server group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The set of policies for the server group. Only two
	// two policies are available right now, and both are mutually exclusive. See
	// the Policies section for more information. Changing this creates a new
	// server group.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type ServergroupV2Observation struct {

	// ID of the server group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The instances that are part of this server group.
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// A unique name for the server group. Changing this creates
	// a new server group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The set of policies for the server group. Only two
	// two policies are available right now, and both are mutually exclusive. See
	// the Policies section for more information. Changing this creates a new
	// server group.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type ServergroupV2Parameters struct {

	// A unique name for the server group. Changing this creates
	// a new server group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The set of policies for the server group. Only two
	// two policies are available right now, and both are mutually exclusive. See
	// the Policies section for more information. Changing this creates a new
	// server group.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional options.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// ServergroupV2Spec defines the desired state of ServergroupV2
type ServergroupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServergroupV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServergroupV2InitParameters `json:"initProvider,omitempty"`
}

// ServergroupV2Status defines the observed state of ServergroupV2.
type ServergroupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServergroupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServergroupV2 is the Schema for the ServergroupV2s API. Manages an ECS Server Group Management resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ServergroupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policies) || (has(self.initProvider) && has(self.initProvider.policies))",message="spec.forProvider.policies is a required parameter"
	Spec   ServergroupV2Spec   `json:"spec"`
	Status ServergroupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServergroupV2List contains a list of ServergroupV2s
type ServergroupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServergroupV2 `json:"items"`
}

// Repository type metadata.
var (
	ServergroupV2_Kind             = "ServergroupV2"
	ServergroupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServergroupV2_Kind}.String()
	ServergroupV2_KindAPIVersion   = ServergroupV2_Kind + "." + CRDGroupVersion.String()
	ServergroupV2_GroupVersionKind = CRDGroupVersion.WithKind(ServergroupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ServergroupV2{}, &ServergroupV2List{})
}
