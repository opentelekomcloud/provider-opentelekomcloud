/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeAttachV2InitParameters struct {

	// The device of the volume attachment (ex: /dev/vdc).
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the Instance to attach the Volume to.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.InstanceV2
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a InstanceV2 in compute to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a InstanceV2 in compute to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the Volume to attach to an Instance.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/blockstorage/v1alpha1.VolumeV2
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a VolumeV2 in blockstorage to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a VolumeV2 in blockstorage to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

type VolumeAttachV2Observation struct {

	// The device of the volume attachment (ex: /dev/vdc).
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Instance to attach the Volume to.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the Volume to attach to an Instance.
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachV2Parameters struct {

	// The device of the volume attachment (ex: /dev/vdc).
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the Instance to attach the Volume to.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/compute/v1alpha1.InstanceV2
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a InstanceV2 in compute to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a InstanceV2 in compute to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the Volume to attach to an Instance.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/blockstorage/v1alpha1.VolumeV2
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a VolumeV2 in blockstorage to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a VolumeV2 in blockstorage to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// VolumeAttachV2Spec defines the desired state of VolumeAttachV2
type VolumeAttachV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeAttachV2InitParameters `json:"initProvider,omitempty"`
}

// VolumeAttachV2Status defines the observed state of VolumeAttachV2.
type VolumeAttachV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VolumeAttachV2 is the Schema for the VolumeAttachV2s API. Manages an ECS Disk Management resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VolumeAttachV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeAttachV2Spec   `json:"spec"`
	Status            VolumeAttachV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachV2List contains a list of VolumeAttachV2s
type VolumeAttachV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachV2 `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachV2_Kind             = "VolumeAttachV2"
	VolumeAttachV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttachV2_Kind}.String()
	VolumeAttachV2_KindAPIVersion   = VolumeAttachV2_Kind + "." + CRDGroupVersion.String()
	VolumeAttachV2_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttachV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttachV2{}, &VolumeAttachV2List{})
}
