// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/blockstorage/v1alpha1"
	v1alpha1 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1"
	common "github.com/opentelekomcloud/provider-opentelekomcloud/config/common"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this FloatingipAssociateV2.
func (mg *FloatingipAssociateV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FloatingIP),
		Extract:      common.ExtractFipAddress(),
		Reference:    mg.Spec.ForProvider.FloatingIPRef,
		Selector:     mg.Spec.ForProvider.FloatingIPSelector,
		To: reference.To{
			List:    &v1alpha1.FloatingipV2List{},
			Managed: &v1alpha1.FloatingipV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIP")
	}
	mg.Spec.ForProvider.FloatingIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FloatingIPRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceV2List{},
			Managed: &InstanceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FloatingIP),
		Extract:      common.ExtractFipAddress(),
		Reference:    mg.Spec.InitProvider.FloatingIPRef,
		Selector:     mg.Spec.InitProvider.FloatingIPSelector,
		To: reference.To{
			List:    &v1alpha1.FloatingipV2List{},
			Managed: &v1alpha1.FloatingipV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIP")
	}
	mg.Spec.InitProvider.FloatingIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FloatingIPRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.InstanceIDRef,
		Selector:     mg.Spec.InitProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceV2List{},
			Managed: &InstanceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceID")
	}
	mg.Spec.InitProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceV2.
func (mg *InstanceV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BlockDevice); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BlockDevice[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BlockDevice[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.BlockDevice[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha11.VolumeV2List{},
				Managed: &v1alpha11.VolumeV2{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BlockDevice[i3].UUID")
		}
		mg.Spec.ForProvider.BlockDevice[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BlockDevice[i3].UUIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyPair),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KeyPairRef,
		Selector:     mg.Spec.ForProvider.KeyPairSelector,
		To: reference.To{
			List:    &KeypairV2List{},
			Managed: &KeypairV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyPair")
	}
	mg.Spec.ForProvider.KeyPair = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyPairRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkV2List{},
				Managed: &v1alpha1.NetworkV2{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].UUID")
		}
		mg.Spec.ForProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroups),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupsRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupsSelector,
		To: reference.To{
			List:    &SecgroupV2List{},
			Managed: &SecgroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroups")
	}
	mg.Spec.ForProvider.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.BlockDevice); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BlockDevice[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BlockDevice[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.BlockDevice[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha11.VolumeV2List{},
				Managed: &v1alpha11.VolumeV2{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BlockDevice[i3].UUID")
		}
		mg.Spec.InitProvider.BlockDevice[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BlockDevice[i3].UUIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyPair),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.KeyPairRef,
		Selector:     mg.Spec.InitProvider.KeyPairSelector,
		To: reference.To{
			List:    &KeypairV2List{},
			Managed: &KeypairV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyPair")
	}
	mg.Spec.InitProvider.KeyPair = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyPairRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkV2List{},
				Managed: &v1alpha1.NetworkV2{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].UUID")
		}
		mg.Spec.InitProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityGroups),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.SecurityGroupsRefs,
		Selector:      mg.Spec.InitProvider.SecurityGroupsSelector,
		To: reference.To{
			List:    &SecgroupV2List{},
			Managed: &SecgroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroups")
	}
	mg.Spec.InitProvider.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityGroupsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this VolumeAttachV2.
func (mg *VolumeAttachV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceV2List{},
			Managed: &InstanceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VolumeIDRef,
		Selector:     mg.Spec.ForProvider.VolumeIDSelector,
		To: reference.To{
			List:    &v1alpha11.VolumeV2List{},
			Managed: &v1alpha11.VolumeV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.InstanceIDRef,
		Selector:     mg.Spec.InitProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceV2List{},
			Managed: &InstanceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceID")
	}
	mg.Spec.InitProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VolumeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VolumeIDRef,
		Selector:     mg.Spec.InitProvider.VolumeIDSelector,
		To: reference.To{
			List:    &v1alpha11.VolumeV2List{},
			Managed: &v1alpha11.VolumeV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VolumeID")
	}
	mg.Spec.InitProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}
