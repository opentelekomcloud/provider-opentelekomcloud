// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BillingInitParameters struct {

	// Billing mode. Possible value is post_paid (pay-per-use).
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Cloud platform. One of public (default), hybrid
	CloudType *string `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// Backup specifications. The default value is crash_consistent
	ConsistentLevel *string `json:"consistentLevel,omitempty" tf:"consistent_level,omitempty"`

	// Redirection URL.
	ConsoleURL *string `json:"consoleUrl,omitempty" tf:"console_url,omitempty"`

	// Map of extra info.
	// +mapType=granular
	ExtraInfo map[string]*string `json:"extraInfo,omitempty" tf:"extra_info,omitempty"`

	// Whether the fee is automatically deducted from the customer's account balance after an
	// order is submitted. The non-automatic payment mode is used by default.
	IsAutoPay *bool `json:"isAutoPay,omitempty" tf:"is_auto_pay,omitempty"`

	// Whether to automatically renew the subscription after expiration. By default, it is
	// not renewed.
	IsAutoRenew *bool `json:"isAutoRenew,omitempty" tf:"is_auto_renew,omitempty"`

	// Object type. One of server, disk, turbo.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	PeriodNum *float64 `json:"periodNum,omitempty" tf:"period_num,omitempty"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Operation type. One of backup, replication
	ProtectType *string `json:"protectType,omitempty" tf:"protect_type,omitempty"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type BillingObservation struct {

	// Allocated capacity, in MB.
	Allocated *float64 `json:"allocated,omitempty" tf:"allocated,omitempty"`

	// Billing mode. Possible value is post_paid (pay-per-use).
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Cloud platform. One of public (default), hybrid
	CloudType *string `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// Backup specifications. The default value is crash_consistent
	ConsistentLevel *string `json:"consistentLevel,omitempty" tf:"consistent_level,omitempty"`

	// Redirection URL.
	ConsoleURL *string `json:"consoleUrl,omitempty" tf:"console_url,omitempty"`

	// Map of extra info.
	// +mapType=granular
	ExtraInfo map[string]*string `json:"extraInfo,omitempty" tf:"extra_info,omitempty"`

	// Scenario when an account is frozen.
	FrozenScene *string `json:"frozenScene,omitempty" tf:"frozen_scene,omitempty"`

	// Whether the fee is automatically deducted from the customer's account balance after an
	// order is submitted. The non-automatic payment mode is used by default.
	IsAutoPay *bool `json:"isAutoPay,omitempty" tf:"is_auto_pay,omitempty"`

	// Whether to automatically renew the subscription after expiration. By default, it is
	// not renewed.
	IsAutoRenew *bool `json:"isAutoRenew,omitempty" tf:"is_auto_renew,omitempty"`

	// Object type. One of server, disk, turbo.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// Order ID.
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	PeriodNum *float64 `json:"periodNum,omitempty" tf:"period_num,omitempty"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Product ID.
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Operation type. One of backup, replication
	ProtectType *string `json:"protectType,omitempty" tf:"protect_type,omitempty"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specification code.
	SpecCode *string `json:"specCode,omitempty" tf:"spec_code,omitempty"`

	// Vault status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Name of the bucket for the vault.
	StorageUnit *string `json:"storageUnit,omitempty" tf:"storage_unit,omitempty"`

	// Used capacity, in MB.
	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type BillingParameters struct {

	// Billing mode. Possible value is post_paid (pay-per-use).
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Cloud platform. One of public (default), hybrid
	// +kubebuilder:validation:Optional
	CloudType *string `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// Backup specifications. The default value is crash_consistent
	// +kubebuilder:validation:Optional
	ConsistentLevel *string `json:"consistentLevel,omitempty" tf:"consistent_level,omitempty"`

	// Redirection URL.
	// +kubebuilder:validation:Optional
	ConsoleURL *string `json:"consoleUrl,omitempty" tf:"console_url,omitempty"`

	// Map of extra info.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtraInfo map[string]*string `json:"extraInfo,omitempty" tf:"extra_info,omitempty"`

	// Whether the fee is automatically deducted from the customer's account balance after an
	// order is submitted. The non-automatic payment mode is used by default.
	// +kubebuilder:validation:Optional
	IsAutoPay *bool `json:"isAutoPay,omitempty" tf:"is_auto_pay,omitempty"`

	// Whether to automatically renew the subscription after expiration. By default, it is
	// not renewed.
	// +kubebuilder:validation:Optional
	IsAutoRenew *bool `json:"isAutoRenew,omitempty" tf:"is_auto_renew,omitempty"`

	// Object type. One of server, disk, turbo.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType" tf:"object_type,omitempty"`

	// +kubebuilder:validation:Optional
	PeriodNum *float64 `json:"periodNum,omitempty" tf:"period_num,omitempty"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	// +kubebuilder:validation:Optional
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Operation type. One of backup, replication
	// +kubebuilder:validation:Optional
	ProtectType *string `json:"protectType" tf:"protect_type,omitempty"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`
}

type BindRulesInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BindRulesObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BindRulesParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type PolicyInitParameters struct {

	// Specifies the ID of destination vault to which the replication policy
	// will be associated.
	DestinationVaultID *string `json:"destinationVaultId,omitempty" tf:"destination_vault_id,omitempty"`

	// Specifies the policy ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyObservation struct {

	// Specifies the ID of destination vault to which the replication policy
	// will be associated.
	DestinationVaultID *string `json:"destinationVaultId,omitempty" tf:"destination_vault_id,omitempty"`

	// Specifies the policy ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyParameters struct {

	// Specifies the ID of destination vault to which the replication policy
	// will be associated.
	// +kubebuilder:validation:Optional
	DestinationVaultID *string `json:"destinationVaultId,omitempty" tf:"destination_vault_id,omitempty"`

	// Specifies the policy ID.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type ResourceInitParameters struct {
	BackupCount *float64 `json:"backupCount,omitempty" tf:"backup_count"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	BackupSize *float64 `json:"backupSize,omitempty" tf:"backup_size"`

	// List of excluded volumes.
	// +listType=set
	ExcludeVolumes []*string `json:"excludeVolumes,omitempty" tf:"exclude_volumes"`

	// Specifies the policy ID.
	ID *string `json:"id,omitempty" tf:"id"`

	// List of included volumes.
	// +listType=set
	IncludeVolumes []*string `json:"includeVolumes,omitempty" tf:"include_volumes"`

	// Vault name.
	Name *string `json:"name,omitempty" tf:"name"`

	// Vault status.
	ProtectStatus *string `json:"protectStatus,omitempty" tf:"protect_status"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	Size *float64 `json:"size,omitempty" tf:"size"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	Type *string `json:"type,omitempty" tf:"type"`
}

type ResourceObservation struct {
	BackupCount *float64 `json:"backupCount,omitempty" tf:"backup_count,omitempty"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	BackupSize *float64 `json:"backupSize,omitempty" tf:"backup_size,omitempty"`

	// List of excluded volumes.
	// +listType=set
	ExcludeVolumes []*string `json:"excludeVolumes,omitempty" tf:"exclude_volumes,omitempty"`

	// Specifies the policy ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of included volumes.
	// +listType=set
	IncludeVolumes []*string `json:"includeVolumes,omitempty" tf:"include_volumes,omitempty"`

	// Vault name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Vault status.
	ProtectStatus *string `json:"protectStatus,omitempty" tf:"protect_status,omitempty"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ResourceParameters struct {

	// +kubebuilder:validation:Optional
	BackupCount *float64 `json:"backupCount,omitempty" tf:"backup_count"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	// +kubebuilder:validation:Optional
	BackupSize *float64 `json:"backupSize,omitempty" tf:"backup_size"`

	// List of excluded volumes.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludeVolumes []*string `json:"excludeVolumes,omitempty" tf:"exclude_volumes"`

	// Specifies the policy ID.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// List of included volumes.
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludeVolumes []*string `json:"includeVolumes,omitempty" tf:"include_volumes"`

	// Vault name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// Vault status.
	// +kubebuilder:validation:Optional
	ProtectStatus *string `json:"protectStatus,omitempty" tf:"protect_status"`

	// Capacity, in GB. Minimum 1, maximum 10485760
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size"`

	// Type of the resource to be backed up. Possible values are OS::Nova::Server, OS::Cinder::Volume and OS::Sfs::Turbo.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type VaultV3InitParameters struct {

	// Whether automatic association is supported.
	AutoBind *bool `json:"autoBind,omitempty" tf:"auto_bind,omitempty"`

	// Whether to automatically expand the vault capacity. Only pay-per-use vaults support this
	// function.
	AutoExpand *bool `json:"autoExpand,omitempty" tf:"auto_expand,omitempty"`

	// Backup policy ID. If the value of this parameter is empty, automatic backup is not
	// performed. Deprecated use policy instead.
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// Billing parameter information for creation. Billing fields:
	Billing []BillingInitParameters `json:"billing,omitempty" tf:"billing,omitempty"`

	// Tag map, a rules for automatic association. You can only select tag keys and values from
	// the existing ones. If there are no tags available, go to the corresponding service to create one.
	// You can add a maximum of 5 tags for a search. If more than one tag is added, the backups containing one of the
	// specified tags will be returned.
	BindRules []BindRulesInitParameters `json:"bindRules,omitempty" tf:"bind_rules,omitempty"`

	// User-defined vault description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource to be backed up.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies whether the vault is locked. A locked vault cannot be unlocked.
	// Defaults to false.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Vault name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the policy details to associate with the CBR vault.
	// The object structure is documented below.
	// The policy details to associate with the CBR vault.
	Policy []PolicyInitParameters `json:"policy,omitempty" tf:"policy,omitempty"`

	// Associated resources. Multiple. Resource fields:
	Resource []ResourceInitParameters `json:"resource,omitempty" tf:"resource,omitempty"`

	// Tag map.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VaultV3Observation struct {

	// Whether automatic association is supported.
	AutoBind *bool `json:"autoBind,omitempty" tf:"auto_bind,omitempty"`

	// Whether to automatically expand the vault capacity. Only pay-per-use vaults support this
	// function.
	AutoExpand *bool `json:"autoExpand,omitempty" tf:"auto_expand,omitempty"`

	// Backup policy ID. If the value of this parameter is empty, automatic backup is not
	// performed. Deprecated use policy instead.
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// Billing parameter information for creation. Billing fields:
	Billing []BillingObservation `json:"billing,omitempty" tf:"billing,omitempty"`

	// Tag map, a rules for automatic association. You can only select tag keys and values from
	// the existing ones. If there are no tags available, go to the corresponding service to create one.
	// You can add a maximum of 5 tags for a search. If more than one tag is added, the backups containing one of the
	// specified tags will be returned.
	BindRules []BindRulesObservation `json:"bindRules,omitempty" tf:"bind_rules,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// User-defined vault description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource to be backed up.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// ID of the resource to be backed up.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the vault is locked. A locked vault cannot be unlocked.
	// Defaults to false.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Vault name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the policy details to associate with the CBR vault.
	// The object structure is documented below.
	// The policy details to associate with the CBR vault.
	Policy []PolicyObservation `json:"policy,omitempty" tf:"policy,omitempty"`

	// ID of the resource to be backed up.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the resource to be backed up.
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Associated resources. Multiple. Resource fields:
	Resource []ResourceObservation `json:"resource,omitempty" tf:"resource,omitempty"`

	// Tag map.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the resource to be backed up.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type VaultV3Parameters struct {

	// Whether automatic association is supported.
	// +kubebuilder:validation:Optional
	AutoBind *bool `json:"autoBind,omitempty" tf:"auto_bind,omitempty"`

	// Whether to automatically expand the vault capacity. Only pay-per-use vaults support this
	// function.
	// +kubebuilder:validation:Optional
	AutoExpand *bool `json:"autoExpand,omitempty" tf:"auto_expand,omitempty"`

	// Backup policy ID. If the value of this parameter is empty, automatic backup is not
	// performed. Deprecated use policy instead.
	// +kubebuilder:validation:Optional
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// Billing parameter information for creation. Billing fields:
	// +kubebuilder:validation:Optional
	Billing []BillingParameters `json:"billing,omitempty" tf:"billing,omitempty"`

	// Tag map, a rules for automatic association. You can only select tag keys and values from
	// the existing ones. If there are no tags available, go to the corresponding service to create one.
	// You can add a maximum of 5 tags for a search. If more than one tag is added, the backups containing one of the
	// specified tags will be returned.
	// +kubebuilder:validation:Optional
	BindRules []BindRulesParameters `json:"bindRules,omitempty" tf:"bind_rules,omitempty"`

	// User-defined vault description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource to be backed up.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies whether the vault is locked. A locked vault cannot be unlocked.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Vault name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the policy details to associate with the CBR vault.
	// The object structure is documented below.
	// The policy details to associate with the CBR vault.
	// +kubebuilder:validation:Optional
	Policy []PolicyParameters `json:"policy,omitempty" tf:"policy,omitempty"`

	// Associated resources. Multiple. Resource fields:
	// +kubebuilder:validation:Optional
	Resource []ResourceParameters `json:"resource,omitempty" tf:"resource,omitempty"`

	// Tag map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VaultV3Spec defines the desired state of VaultV3
type VaultV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VaultV3InitParameters `json:"initProvider,omitempty"`
}

// VaultV3Status defines the observed state of VaultV3.
type VaultV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VaultV3 is the Schema for the VaultV3s API. Manages a CBR Vault resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VaultV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.billing) || (has(self.initProvider) && has(self.initProvider.billing))",message="spec.forProvider.billing is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VaultV3Spec   `json:"spec"`
	Status VaultV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultV3List contains a list of VaultV3s
type VaultV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultV3 `json:"items"`
}

// Repository type metadata.
var (
	VaultV3_Kind             = "VaultV3"
	VaultV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VaultV3_Kind}.String()
	VaultV3_KindAPIVersion   = VaultV3_Kind + "." + CRDGroupVersion.String()
	VaultV3_GroupVersionKind = CRDGroupVersion.WithKind(VaultV3_Kind)
)

func init() {
	SchemeBuilder.Register(&VaultV3{}, &VaultV3List{})
}
