// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DpdInitParameters struct {

	// Specifies the DPD idle timeout period.
	// The value ranges from 10 to 3,600, in seconds. Defaults to 30.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Specifies the format of DPD packets. The value can be:
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// Specifies the interval for retransmitting DPD packets.
	// The value ranges from 2 to 60, in seconds. Defaults to 15.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DpdObservation struct {

	// Specifies the DPD idle timeout period.
	// The value ranges from 10 to 3,600, in seconds. Defaults to 30.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Specifies the format of DPD packets. The value can be:
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// Specifies the interval for retransmitting DPD packets.
	// The value ranges from 2 to 60, in seconds. Defaults to 15.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DpdParameters struct {

	// Specifies the DPD idle timeout period.
	// The value ranges from 10 to 3,600, in seconds. Defaults to 30.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Specifies the format of DPD packets. The value can be:
	// +kubebuilder:validation:Optional
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// Specifies the interval for retransmitting DPD packets.
	// The value ranges from 2 to 60, in seconds. Defaults to 15.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type IkepolicyInitParameters struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The authentication method during IKE negotiation.
	// The value can be pre-share. Defaults to pre-share.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Specifies the DH group used for key exchange in phase 1.
	// The value can be group1, group2, group5, group14, group15, group16, group19, group20,
	// or group21. Exercise caution when using group1, group2, group5,
	// or group14 as they have low security. Defaults to group15.
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Specifies the dead peer detection (DPD) object.
	// The dpd structure is documented below.
	Dpd []DpdInitParameters `json:"dpd,omitempty" tf:"dpd,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// 3des is less secure, please use it with caution.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The IKE negotiation version. The value can be v1 and v2. Defaults to v2.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The life cycle of SA in seconds. The value ranges from 60 to 604,800.
	// Defaults to 86,400. When the life cycle expires, IKE SA will be automatically updated.
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The local ID.
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	// The local ID type. The value can be ip or fqdn. Defaults to ip.
	LocalIDType *string `json:"localIdType,omitempty" tf:"local_id_type,omitempty"`

	// The peer ID.
	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	// The peer ID type. The value can be ip, fqdn. Defaults to ip.
	PeerIDType *string `json:"peerIdType,omitempty" tf:"peer_id_type,omitempty"`

	// The negotiation mode, only works when the ike_version is v1.
	// The value can be main or aggressive. Defaults to main.
	PhaseOneNegotiationMode *string `json:"phaseOneNegotiationMode,omitempty" tf:"phase_one_negotiation_mode,omitempty"`
}

type IkepolicyObservation struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The authentication method during IKE negotiation.
	// The value can be pre-share. Defaults to pre-share.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Specifies the DH group used for key exchange in phase 1.
	// The value can be group1, group2, group5, group14, group15, group16, group19, group20,
	// or group21. Exercise caution when using group1, group2, group5,
	// or group14 as they have low security. Defaults to group15.
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Specifies the dead peer detection (DPD) object.
	// The dpd structure is documented below.
	Dpd []DpdObservation `json:"dpd,omitempty" tf:"dpd,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// 3des is less secure, please use it with caution.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The IKE negotiation version. The value can be v1 and v2. Defaults to v2.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The life cycle of SA in seconds. The value ranges from 60 to 604,800.
	// Defaults to 86,400. When the life cycle expires, IKE SA will be automatically updated.
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The local ID.
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	// The local ID type. The value can be ip or fqdn. Defaults to ip.
	LocalIDType *string `json:"localIdType,omitempty" tf:"local_id_type,omitempty"`

	// The peer ID.
	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	// The peer ID type. The value can be ip, fqdn. Defaults to ip.
	PeerIDType *string `json:"peerIdType,omitempty" tf:"peer_id_type,omitempty"`

	// The negotiation mode, only works when the ike_version is v1.
	// The value can be main or aggressive. Defaults to main.
	PhaseOneNegotiationMode *string `json:"phaseOneNegotiationMode,omitempty" tf:"phase_one_negotiation_mode,omitempty"`
}

type IkepolicyParameters struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	// +kubebuilder:validation:Optional
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The authentication method during IKE negotiation.
	// The value can be pre-share. Defaults to pre-share.
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Specifies the DH group used for key exchange in phase 1.
	// The value can be group1, group2, group5, group14, group15, group16, group19, group20,
	// or group21. Exercise caution when using group1, group2, group5,
	// or group14 as they have low security. Defaults to group15.
	// +kubebuilder:validation:Optional
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Specifies the dead peer detection (DPD) object.
	// The dpd structure is documented below.
	// +kubebuilder:validation:Optional
	Dpd []DpdParameters `json:"dpd,omitempty" tf:"dpd,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// 3des is less secure, please use it with caution.
	// +kubebuilder:validation:Optional
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The IKE negotiation version. The value can be v1 and v2. Defaults to v2.
	// +kubebuilder:validation:Optional
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The life cycle of SA in seconds. The value ranges from 60 to 604,800.
	// Defaults to 86,400. When the life cycle expires, IKE SA will be automatically updated.
	// +kubebuilder:validation:Optional
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The local ID.
	// +kubebuilder:validation:Optional
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	// The local ID type. The value can be ip or fqdn. Defaults to ip.
	// +kubebuilder:validation:Optional
	LocalIDType *string `json:"localIdType,omitempty" tf:"local_id_type,omitempty"`

	// The peer ID.
	// +kubebuilder:validation:Optional
	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	// The peer ID type. The value can be ip, fqdn. Defaults to ip.
	// +kubebuilder:validation:Optional
	PeerIDType *string `json:"peerIdType,omitempty" tf:"peer_id_type,omitempty"`

	// The negotiation mode, only works when the ike_version is v1.
	// The value can be main or aggressive. Defaults to main.
	// +kubebuilder:validation:Optional
	PhaseOneNegotiationMode *string `json:"phaseOneNegotiationMode,omitempty" tf:"phase_one_negotiation_mode,omitempty"`
}

type IpsecpolicyInitParameters struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The encapsulation mode, only tunnel supported for now.
	// Defaults to tunnel.
	EncapsulationMode *string `json:"encapsulationMode,omitempty" tf:"encapsulation_mode,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// `3des** is less secure, please use it with caution.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The lifecycle time of Ipsec tunnel in seconds.
	// The value ranges from 60 to 604,800. Defaults to 3600.
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The DH key group used by PFS. The value can be group1, group2, group5, group14
	// group16, group19, group20, group21. Defaults to group14.
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The transform protocol. Only esp supported for now.
	// Defaults to esp.
	TransformProtocol *string `json:"transformProtocol,omitempty" tf:"transform_protocol,omitempty"`
}

type IpsecpolicyObservation struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The encapsulation mode, only tunnel supported for now.
	// Defaults to tunnel.
	EncapsulationMode *string `json:"encapsulationMode,omitempty" tf:"encapsulation_mode,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// `3des** is less secure, please use it with caution.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The lifecycle time of Ipsec tunnel in seconds.
	// The value ranges from 60 to 604,800. Defaults to 3600.
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The DH key group used by PFS. The value can be group1, group2, group5, group14
	// group16, group19, group20, group21. Defaults to group14.
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The transform protocol. Only esp supported for now.
	// Defaults to esp.
	TransformProtocol *string `json:"transformProtocol,omitempty" tf:"transform_protocol,omitempty"`
}

type IpsecpolicyParameters struct {

	// The authentication algorithm. The value can be sha1, md5,
	// sha2-256, sha2-384, sha2-512. Defaults to sha2-256. sha1 and md5 are less secure,
	// please use them with caution.
	// +kubebuilder:validation:Optional
	AuthenticationAlgorithm *string `json:"authenticationAlgorithm,omitempty" tf:"authentication_algorithm,omitempty"`

	// The encapsulation mode, only tunnel supported for now.
	// Defaults to tunnel.
	// +kubebuilder:validation:Optional
	EncapsulationMode *string `json:"encapsulationMode,omitempty" tf:"encapsulation_mode,omitempty"`

	// The encryption algorithm. The value can be 3des, aes-128, aes-192,
	// aes-256, aes-128-gcm-16, aes-256-gcm-16, aes-128-gcm-128, aes-256-gcm-128. Defaults to aes-128.
	// `3des** is less secure, please use it with caution.
	// +kubebuilder:validation:Optional
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The lifecycle time of Ipsec tunnel in seconds.
	// The value ranges from 60 to 604,800. Defaults to 3600.
	// +kubebuilder:validation:Optional
	LifetimeSeconds *float64 `json:"lifetimeSeconds,omitempty" tf:"lifetime_seconds,omitempty"`

	// The DH key group used by PFS. The value can be group1, group2, group5, group14
	// group16, group19, group20, group21. Defaults to group14.
	// +kubebuilder:validation:Optional
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The transform protocol. Only esp supported for now.
	// Defaults to esp.
	// +kubebuilder:validation:Optional
	TransformProtocol *string `json:"transformProtocol,omitempty" tf:"transform_protocol,omitempty"`
}

type PolicyRulesInitParameters struct {

	// The list of destination CIDRs.
	Destination []*string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The source CIDR.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type PolicyRulesObservation struct {

	// The list of destination CIDRs.
	Destination []*string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The source CIDR.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type PolicyRulesParameters struct {

	// The list of destination CIDRs.
	// +kubebuilder:validation:Optional
	Destination []*string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The source CIDR.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type VPNConnectionV5InitParameters struct {

	// The customer gateway ID.
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// Whether to enable NQA check. Defaults to false.
	EnableNqa *bool `json:"enableNqa,omitempty" tf:"enable_nqa,omitempty"`

	// The VPN gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The VPN gateway IP ID.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Specifies the mode of the VPN connection.
	// The valid values are master and slave, defaults to master.
	// This parameter is optional when you create a connection for a VPN gateway in active-active mode.
	// When you create a connection for a VPN gateway in active-standby mode, master indicates
	// the active connection, and slave indicates the standby connection.
	// In active-active mode, this field must be set to master for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to slave
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	HaRole *string `json:"haRole,omitempty" tf:"ha_role,omitempty"`

	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy []IkepolicyInitParameters `json:"ikepolicy,omitempty" tf:"ikepolicy,omitempty"`

	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy []IpsecpolicyInitParameters `json:"ipsecpolicy,omitempty" tf:"ipsecpolicy,omitempty"`

	// The name of the VPN connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The CIDR list of customer subnets. This parameter must be empty
	// when the attachment_type of the VPN gateway is set to er and vpn_type is set to policy or bgp.
	// This parameter is mandatory in other scenarios.
	PeerSubnets []*string `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// The policy rules. Only works when vpn_type is set to policy
	// The policy_rules structure is documented below.
	PolicyRules []PolicyRulesInitParameters `json:"policyRules,omitempty" tf:"policy_rules,omitempty"`

	// The pre-shared key.
	Psk *string `json:"psk,omitempty" tf:"psk,omitempty"`

	// Specifies the tags of the VPN connection.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The local tunnel address.
	TunnelLocalAddress *string `json:"tunnelLocalAddress,omitempty" tf:"tunnel_local_address,omitempty"`

	// The peer tunnel address.
	TunnelPeerAddress *string `json:"tunnelPeerAddress,omitempty" tf:"tunnel_peer_address,omitempty"`

	// The connection type. The value can be policy, static or bgp.
	VPNType *string `json:"vpnType,omitempty" tf:"vpn_type,omitempty"`
}

type VPNConnectionV5Observation struct {

	// The create time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The customer gateway ID.
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// Whether to enable NQA check. Defaults to false.
	EnableNqa *bool `json:"enableNqa,omitempty" tf:"enable_nqa,omitempty"`

	// The VPN gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The VPN gateway IP ID.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Specifies the mode of the VPN connection.
	// The valid values are master and slave, defaults to master.
	// This parameter is optional when you create a connection for a VPN gateway in active-active mode.
	// When you create a connection for a VPN gateway in active-standby mode, master indicates
	// the active connection, and slave indicates the standby connection.
	// In active-active mode, this field must be set to master for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to slave
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	HaRole *string `json:"haRole,omitempty" tf:"ha_role,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy []IkepolicyObservation `json:"ikepolicy,omitempty" tf:"ikepolicy,omitempty"`

	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy []IpsecpolicyObservation `json:"ipsecpolicy,omitempty" tf:"ipsecpolicy,omitempty"`

	// The name of the VPN connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The CIDR list of customer subnets. This parameter must be empty
	// when the attachment_type of the VPN gateway is set to er and vpn_type is set to policy or bgp.
	// This parameter is mandatory in other scenarios.
	PeerSubnets []*string `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// The policy rules. Only works when vpn_type is set to policy
	// The policy_rules structure is documented below.
	PolicyRules []PolicyRulesObservation `json:"policyRules,omitempty" tf:"policy_rules,omitempty"`

	// The pre-shared key.
	Psk *string `json:"psk,omitempty" tf:"psk,omitempty"`

	// Specifies the region in which resource is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The status of the VPN connection.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the tags of the VPN connection.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The local tunnel address.
	TunnelLocalAddress *string `json:"tunnelLocalAddress,omitempty" tf:"tunnel_local_address,omitempty"`

	// The peer tunnel address.
	TunnelPeerAddress *string `json:"tunnelPeerAddress,omitempty" tf:"tunnel_peer_address,omitempty"`

	// The update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The connection type. The value can be policy, static or bgp.
	VPNType *string `json:"vpnType,omitempty" tf:"vpn_type,omitempty"`
}

type VPNConnectionV5Parameters struct {

	// The customer gateway ID.
	// +kubebuilder:validation:Optional
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// Whether to enable NQA check. Defaults to false.
	// +kubebuilder:validation:Optional
	EnableNqa *bool `json:"enableNqa,omitempty" tf:"enable_nqa,omitempty"`

	// The VPN gateway ID.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The VPN gateway IP ID.
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Specifies the mode of the VPN connection.
	// The valid values are master and slave, defaults to master.
	// This parameter is optional when you create a connection for a VPN gateway in active-active mode.
	// When you create a connection for a VPN gateway in active-standby mode, master indicates
	// the active connection, and slave indicates the standby connection.
	// In active-active mode, this field must be set to master for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to slave
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	// +kubebuilder:validation:Optional
	HaRole *string `json:"haRole,omitempty" tf:"ha_role,omitempty"`

	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	// +kubebuilder:validation:Optional
	Ikepolicy []IkepolicyParameters `json:"ikepolicy,omitempty" tf:"ikepolicy,omitempty"`

	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	// +kubebuilder:validation:Optional
	Ipsecpolicy []IpsecpolicyParameters `json:"ipsecpolicy,omitempty" tf:"ipsecpolicy,omitempty"`

	// The name of the VPN connection.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The CIDR list of customer subnets. This parameter must be empty
	// when the attachment_type of the VPN gateway is set to er and vpn_type is set to policy or bgp.
	// This parameter is mandatory in other scenarios.
	// +kubebuilder:validation:Optional
	PeerSubnets []*string `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// The policy rules. Only works when vpn_type is set to policy
	// The policy_rules structure is documented below.
	// +kubebuilder:validation:Optional
	PolicyRules []PolicyRulesParameters `json:"policyRules,omitempty" tf:"policy_rules,omitempty"`

	// The pre-shared key.
	// +kubebuilder:validation:Optional
	Psk *string `json:"psk,omitempty" tf:"psk,omitempty"`

	// Specifies the tags of the VPN connection.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The local tunnel address.
	// +kubebuilder:validation:Optional
	TunnelLocalAddress *string `json:"tunnelLocalAddress,omitempty" tf:"tunnel_local_address,omitempty"`

	// The peer tunnel address.
	// +kubebuilder:validation:Optional
	TunnelPeerAddress *string `json:"tunnelPeerAddress,omitempty" tf:"tunnel_peer_address,omitempty"`

	// The connection type. The value can be policy, static or bgp.
	// +kubebuilder:validation:Optional
	VPNType *string `json:"vpnType,omitempty" tf:"vpn_type,omitempty"`
}

// VPNConnectionV5Spec defines the desired state of VPNConnectionV5
type VPNConnectionV5Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNConnectionV5Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPNConnectionV5InitParameters `json:"initProvider,omitempty"`
}

// VPNConnectionV5Status defines the observed state of VPNConnectionV5.
type VPNConnectionV5Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNConnectionV5Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPNConnectionV5 is the Schema for the VPNConnectionV5s API. Manages a Enterprise VPN connection Service resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VPNConnectionV5 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customerGatewayId) || (has(self.initProvider) && has(self.initProvider.customerGatewayId))",message="spec.forProvider.customerGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayIp) || (has(self.initProvider) && has(self.initProvider.gatewayIp))",message="spec.forProvider.gatewayIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.psk) || (has(self.initProvider) && has(self.initProvider.psk))",message="spec.forProvider.psk is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpnType) || (has(self.initProvider) && has(self.initProvider.vpnType))",message="spec.forProvider.vpnType is a required parameter"
	Spec   VPNConnectionV5Spec   `json:"spec"`
	Status VPNConnectionV5Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNConnectionV5List contains a list of VPNConnectionV5s
type VPNConnectionV5List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNConnectionV5 `json:"items"`
}

// Repository type metadata.
var (
	VPNConnectionV5_Kind             = "VPNConnectionV5"
	VPNConnectionV5_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNConnectionV5_Kind}.String()
	VPNConnectionV5_KindAPIVersion   = VPNConnectionV5_Kind + "." + CRDGroupVersion.String()
	VPNConnectionV5_GroupVersionKind = CRDGroupVersion.WithKind(VPNConnectionV5_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNConnectionV5{}, &VPNConnectionV5List{})
}
