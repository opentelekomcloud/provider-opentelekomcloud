/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserV2InitParameters struct {

	// Indicates the ID of primary DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates the password of an instance. An instance password
	// must meet the following complexity requirements: Must be 8 to 32 characters long.
	// Must contain at least 2 of the following character types: lowercase letters, uppercase
	// letters, digits, and special characters (~!@#$%^&*()-_=+\|[{}]:'",<.>/?).
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Indicates a username. A username consists of 4 to 64 characters
	// and supports only letters, digits, and hyphens (-).
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserV2Observation struct {

	// Specifies the time when a user was created.
	CreationTime *float64 `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// Specifies whether an application is the default application.
	DefaultApp *bool `json:"defaultApp,omitempty" tf:"default_app,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the ID of primary DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies user role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Indicates a username. A username consists of 4 to 64 characters
	// and supports only letters, digits, and hyphens (-).
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserV2Parameters struct {

	// Indicates the ID of primary DMS instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates the password of an instance. An instance password
	// must meet the following complexity requirements: Must be 8 to 32 characters long.
	// Must contain at least 2 of the following character types: lowercase letters, uppercase
	// letters, digits, and special characters (~!@#$%^&*()-_=+\|[{}]:'",<.>/?).
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Indicates a username. A username consists of 4 to 64 characters
	// and supports only letters, digits, and hyphens (-).
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// UserV2Spec defines the desired state of UserV2
type UserV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserV2InitParameters `json:"initProvider,omitempty"`
}

// UserV2Status defines the observed state of UserV2.
type UserV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserV2 is the Schema for the UserV2s API. Manages a DMS User resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type UserV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   UserV2Spec   `json:"spec"`
	Status UserV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserV2List contains a list of UserV2s
type UserV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserV2 `json:"items"`
}

// Repository type metadata.
var (
	UserV2_Kind             = "UserV2"
	UserV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserV2_Kind}.String()
	UserV2_KindAPIVersion   = UserV2_Kind + "." + CRDGroupVersion.String()
	UserV2_GroupVersionKind = CRDGroupVersion.WithKind(UserV2_Kind)
)

func init() {
	SchemeBuilder.Register(&UserV2{}, &UserV2List{})
}
