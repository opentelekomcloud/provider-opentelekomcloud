// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReassignPartitionsV2InitParameters struct {

	// Specifies the schedule time. The value is a UNIX timestamp, in ms.
	ExecuteAt *float64 `json:"executeAt,omitempty" tf:"execute_at,omitempty"`

	// Specifies the DMS instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies whether the task is scheduled. If no, is_schedule and execute_at can be left blank. If yes, is_schedule is true and execute_at must be specified.
	IsSchedule *bool `json:"isSchedule,omitempty" tf:"is_schedule,omitempty"`

	// Specifies the reassignment plan.
	// The reassignments structure is documented below.
	Reassignments []ReassignmentsInitParameters `json:"reassignments,omitempty" tf:"reassignments,omitempty"`

	// Specifies the reassignment threshold.
	Throttle *float64 `json:"throttle,omitempty" tf:"throttle,omitempty"`

	// Specifies whether to perform time estimation or relabancing tasks. Set true to perform time estimation tasks and false to perform rebalancing tasks.
	TimeEstimate *bool `json:"timeEstimate,omitempty" tf:"time_estimate,omitempty"`
}

type ReassignPartitionsV2Observation struct {

	// Specifies the schedule time. The value is a UNIX timestamp, in ms.
	ExecuteAt *float64 `json:"executeAt,omitempty" tf:"execute_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the DMS instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies whether the task is scheduled. If no, is_schedule and execute_at can be left blank. If yes, is_schedule is true and execute_at must be specified.
	IsSchedule *bool `json:"isSchedule,omitempty" tf:"is_schedule,omitempty"`

	// Indicates the estimated time, in seconds. Only reassignment_time is returned for a time estimation task.
	ReassignmentTime *float64 `json:"reassignmentTime,omitempty" tf:"reassignment_time,omitempty"`

	// Specifies the reassignment plan.
	// The reassignments structure is documented below.
	Reassignments []ReassignmentsObservation `json:"reassignments,omitempty" tf:"reassignments,omitempty"`

	// The region in which the resource is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the reassignment threshold.
	Throttle *float64 `json:"throttle,omitempty" tf:"throttle,omitempty"`

	// Specifies whether to perform time estimation or relabancing tasks. Set true to perform time estimation tasks and false to perform rebalancing tasks.
	TimeEstimate *bool `json:"timeEstimate,omitempty" tf:"time_estimate,omitempty"`
}

type ReassignPartitionsV2Parameters struct {

	// Specifies the schedule time. The value is a UNIX timestamp, in ms.
	// +kubebuilder:validation:Optional
	ExecuteAt *float64 `json:"executeAt,omitempty" tf:"execute_at,omitempty"`

	// Specifies the DMS instance ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies whether the task is scheduled. If no, is_schedule and execute_at can be left blank. If yes, is_schedule is true and execute_at must be specified.
	// +kubebuilder:validation:Optional
	IsSchedule *bool `json:"isSchedule,omitempty" tf:"is_schedule,omitempty"`

	// Specifies the reassignment plan.
	// The reassignments structure is documented below.
	// +kubebuilder:validation:Optional
	Reassignments []ReassignmentsParameters `json:"reassignments,omitempty" tf:"reassignments,omitempty"`

	// Specifies the reassignment threshold.
	// +kubebuilder:validation:Optional
	Throttle *float64 `json:"throttle,omitempty" tf:"throttle,omitempty"`

	// Specifies whether to perform time estimation or relabancing tasks. Set true to perform time estimation tasks and false to perform rebalancing tasks.
	// +kubebuilder:validation:Optional
	TimeEstimate *bool `json:"timeEstimate,omitempty" tf:"time_estimate,omitempty"`
}

type ReassignmentsAssignmentsInitParameters struct {

	// Specifies the partition number in manual assignment.
	Partition *float64 `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the list of brokers to be assigned to a partition in manual assignment.
	PartitionBrokers []*float64 `json:"partitionBrokers,omitempty" tf:"partition_brokers,omitempty"`
}

type ReassignmentsAssignmentsObservation struct {

	// Specifies the partition number in manual assignment.
	Partition *float64 `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the list of brokers to be assigned to a partition in manual assignment.
	PartitionBrokers []*float64 `json:"partitionBrokers,omitempty" tf:"partition_brokers,omitempty"`
}

type ReassignmentsAssignmentsParameters struct {

	// Specifies the partition number in manual assignment.
	// +kubebuilder:validation:Optional
	Partition *float64 `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the list of brokers to be assigned to a partition in manual assignment.
	// +kubebuilder:validation:Optional
	PartitionBrokers []*float64 `json:"partitionBrokers,omitempty" tf:"partition_brokers,omitempty"`
}

type ReassignmentsInitParameters struct {

	// Specifies the manually specified assignment plan.
	// Note: The brokers parameter and assignments parameter cannot be empty at the same time.
	// The assignments structure is documented below.
	Assignments []ReassignmentsAssignmentsInitParameters `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// Specifies the list of brokers to which partitions are reassigned.
	// Note: This parameter is mandatory in automatic assignment.
	Brokers []*float64 `json:"brokers,omitempty" tf:"brokers,omitempty"`

	// Specifies the replication factor, which can be specified in automatic assignment.
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// Specifies the topic name.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type ReassignmentsObservation struct {

	// Specifies the manually specified assignment plan.
	// Note: The brokers parameter and assignments parameter cannot be empty at the same time.
	// The assignments structure is documented below.
	Assignments []ReassignmentsAssignmentsObservation `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// Specifies the list of brokers to which partitions are reassigned.
	// Note: This parameter is mandatory in automatic assignment.
	Brokers []*float64 `json:"brokers,omitempty" tf:"brokers,omitempty"`

	// Specifies the replication factor, which can be specified in automatic assignment.
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// Specifies the topic name.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type ReassignmentsParameters struct {

	// Specifies the manually specified assignment plan.
	// Note: The brokers parameter and assignments parameter cannot be empty at the same time.
	// The assignments structure is documented below.
	// +kubebuilder:validation:Optional
	Assignments []ReassignmentsAssignmentsParameters `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// Specifies the list of brokers to which partitions are reassigned.
	// Note: This parameter is mandatory in automatic assignment.
	// +kubebuilder:validation:Optional
	Brokers []*float64 `json:"brokers,omitempty" tf:"brokers,omitempty"`

	// Specifies the replication factor, which can be specified in automatic assignment.
	// +kubebuilder:validation:Optional
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// Specifies the topic name.
	// +kubebuilder:validation:Optional
	Topic *string `json:"topic" tf:"topic,omitempty"`
}

// ReassignPartitionsV2Spec defines the desired state of ReassignPartitionsV2
type ReassignPartitionsV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReassignPartitionsV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReassignPartitionsV2InitParameters `json:"initProvider,omitempty"`
}

// ReassignPartitionsV2Status defines the observed state of ReassignPartitionsV2.
type ReassignPartitionsV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReassignPartitionsV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ReassignPartitionsV2 is the Schema for the ReassignPartitionsV2s API. Initiate partition reassignment for an up-to-date DMS topic within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ReassignPartitionsV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reassignments) || (has(self.initProvider) && has(self.initProvider.reassignments))",message="spec.forProvider.reassignments is a required parameter"
	Spec   ReassignPartitionsV2Spec   `json:"spec"`
	Status ReassignPartitionsV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReassignPartitionsV2List contains a list of ReassignPartitionsV2s
type ReassignPartitionsV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReassignPartitionsV2 `json:"items"`
}

// Repository type metadata.
var (
	ReassignPartitionsV2_Kind             = "ReassignPartitionsV2"
	ReassignPartitionsV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReassignPartitionsV2_Kind}.String()
	ReassignPartitionsV2_KindAPIVersion   = ReassignPartitionsV2_Kind + "." + CRDGroupVersion.String()
	ReassignPartitionsV2_GroupVersionKind = CRDGroupVersion.WithKind(ReassignPartitionsV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ReassignPartitionsV2{}, &ReassignPartitionsV2List{})
}
