// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignmentsInitParameters struct {
}

type AssignmentsObservation struct {

	// Indicates the partition list.
	Partitions []*float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Indicates the topic name.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type AssignmentsParameters struct {
}

type ConsumerGroupV2InitParameters struct {

	// Specifies any description for the DMS consumer group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the DMS consumer group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the ID of the DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type ConsumerGroupV2Observation struct {

	// Indicates the partition assignment policy.
	AssignmentStrategy *string `json:"assignmentStrategy,omitempty" tf:"assignment_strategy,omitempty"`

	// Indicates the coordinator ID.
	CoordinatorID *float64 `json:"coordinatorId,omitempty" tf:"coordinator_id,omitempty"`

	// Specifies any description for the DMS consumer group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates the consumer offset. The structure is documented below.
	GroupMessageOffsets []GroupMessageOffsetsObservation `json:"groupMessageOffsets,omitempty" tf:"group_message_offsets,omitempty"`

	// Specifies the name of the DMS consumer group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates the consumer list. The structure is documented below.
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the Consumer group status. The value can be:
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ConsumerGroupV2Parameters struct {

	// Specifies any description for the DMS consumer group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the DMS consumer group.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// Specifies the ID of the DMS instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type GroupMessageOffsetsInitParameters struct {
}

type GroupMessageOffsetsObservation struct {

	// Indicates the number of remaining messages that can be retrieved, that is, the number of accumulated messages.
	Lag *float64 `json:"lag,omitempty" tf:"lag,omitempty"`

	// Indicates the consumer offset.
	MessageCurrentOffset *float64 `json:"messageCurrentOffset,omitempty" tf:"message_current_offset,omitempty"`

	// Indicates the log end offset (LEO).
	MessageLogEndOffset *float64 `json:"messageLogEndOffset,omitempty" tf:"message_log_end_offset,omitempty"`

	// Indicates the partition number.
	Partition *float64 `json:"partition,omitempty" tf:"partition,omitempty"`

	// Indicates the topic name.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type GroupMessageOffsetsParameters struct {
}

type MembersInitParameters struct {
}

type MembersObservation struct {

	// Indicates the details about the partition assigned to the consumer. The structure is as follows:
	Assignments []AssignmentsObservation `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// Indicates the client ID.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Indicates the consumer address.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Indicates the consumer ID.
	MemberID *string `json:"memberId,omitempty" tf:"member_id,omitempty"`
}

type MembersParameters struct {
}

// ConsumerGroupV2Spec defines the desired state of ConsumerGroupV2
type ConsumerGroupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConsumerGroupV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConsumerGroupV2InitParameters `json:"initProvider,omitempty"`
}

// ConsumerGroupV2Status defines the observed state of ConsumerGroupV2.
type ConsumerGroupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConsumerGroupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConsumerGroupV2 is the Schema for the ConsumerGroupV2s API. Manages an up-to-date DMS Consumer Group v2 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ConsumerGroupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupName) || (has(self.initProvider) && has(self.initProvider.groupName))",message="spec.forProvider.groupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	Spec   ConsumerGroupV2Spec   `json:"spec"`
	Status ConsumerGroupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumerGroupV2List contains a list of ConsumerGroupV2s
type ConsumerGroupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsumerGroupV2 `json:"items"`
}

// Repository type metadata.
var (
	ConsumerGroupV2_Kind             = "ConsumerGroupV2"
	ConsumerGroupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConsumerGroupV2_Kind}.String()
	ConsumerGroupV2_KindAPIVersion   = ConsumerGroupV2_Kind + "." + CRDGroupVersion.String()
	ConsumerGroupV2_GroupVersionKind = CRDGroupVersion.WithKind(ConsumerGroupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ConsumerGroupV2{}, &ConsumerGroupV2List{})
}
