// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SmartConnectV2InitParameters struct {

	// Specifies the bandwidth of the connector.
	Bandwidth *string `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the ID of the DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the node count of the connector. Defaults to 2 and minimum is 2.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Specifies the storage specification code of the connector.
	StorageSpecCode *string `json:"storageSpecCode,omitempty" tf:"storage_spec_code,omitempty"`
}

type SmartConnectV2Observation struct {

	// Specifies the bandwidth of the connector.
	Bandwidth *string `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the DMS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the node count of the connector. Defaults to 2 and minimum is 2.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The DMS instance region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the storage specification code of the connector.
	StorageSpecCode *string `json:"storageSpecCode,omitempty" tf:"storage_spec_code,omitempty"`
}

type SmartConnectV2Parameters struct {

	// Specifies the bandwidth of the connector.
	// +kubebuilder:validation:Optional
	Bandwidth *string `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the ID of the DMS instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the node count of the connector. Defaults to 2 and minimum is 2.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Specifies the storage specification code of the connector.
	// +kubebuilder:validation:Optional
	StorageSpecCode *string `json:"storageSpecCode,omitempty" tf:"storage_spec_code,omitempty"`
}

// SmartConnectV2Spec defines the desired state of SmartConnectV2
type SmartConnectV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SmartConnectV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SmartConnectV2InitParameters `json:"initProvider,omitempty"`
}

// SmartConnectV2Status defines the observed state of SmartConnectV2.
type SmartConnectV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SmartConnectV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SmartConnectV2 is the Schema for the SmartConnectV2s API. Manages an up-to-date DMS Smart Connect v2 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SmartConnectV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	Spec   SmartConnectV2Spec   `json:"spec"`
	Status SmartConnectV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SmartConnectV2List contains a list of SmartConnectV2s
type SmartConnectV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SmartConnectV2 `json:"items"`
}

// Repository type metadata.
var (
	SmartConnectV2_Kind             = "SmartConnectV2"
	SmartConnectV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SmartConnectV2_Kind}.String()
	SmartConnectV2_KindAPIVersion   = SmartConnectV2_Kind + "." + CRDGroupVersion.String()
	SmartConnectV2_GroupVersionKind = CRDGroupVersion.WithKind(SmartConnectV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SmartConnectV2{}, &SmartConnectV2List{})
}
