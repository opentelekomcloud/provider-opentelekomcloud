// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SmartConnectTaskActionV2InitParameters struct {

	// Specifies the action to be performed on the smart connect task.
	// Supported values: pause, resume, restart
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the kafka instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the smart connect task ID.
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type SmartConnectTaskActionV2Observation struct {

	// Specifies the action to be performed on the smart connect task.
	// Supported values: pause, resume, restart
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the kafka instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The region in which the resource is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the smart connect task ID.
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`

	// Indicates the status of the smart connect task.
	TaskStatus *string `json:"taskStatus,omitempty" tf:"task_status,omitempty"`
}

type SmartConnectTaskActionV2Parameters struct {

	// Specifies the action to be performed on the smart connect task.
	// Supported values: pause, resume, restart
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the kafka instance ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the smart connect task ID.
	// +kubebuilder:validation:Optional
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

// SmartConnectTaskActionV2Spec defines the desired state of SmartConnectTaskActionV2
type SmartConnectTaskActionV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SmartConnectTaskActionV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SmartConnectTaskActionV2InitParameters `json:"initProvider,omitempty"`
}

// SmartConnectTaskActionV2Status defines the observed state of SmartConnectTaskActionV2.
type SmartConnectTaskActionV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SmartConnectTaskActionV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SmartConnectTaskActionV2 is the Schema for the SmartConnectTaskActionV2s API. Start or pause an up-to-date DMS Smart Connect Task v2 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SmartConnectTaskActionV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.taskId) || (has(self.initProvider) && has(self.initProvider.taskId))",message="spec.forProvider.taskId is a required parameter"
	Spec   SmartConnectTaskActionV2Spec   `json:"spec"`
	Status SmartConnectTaskActionV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SmartConnectTaskActionV2List contains a list of SmartConnectTaskActionV2s
type SmartConnectTaskActionV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SmartConnectTaskActionV2 `json:"items"`
}

// Repository type metadata.
var (
	SmartConnectTaskActionV2_Kind             = "SmartConnectTaskActionV2"
	SmartConnectTaskActionV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SmartConnectTaskActionV2_Kind}.String()
	SmartConnectTaskActionV2_KindAPIVersion   = SmartConnectTaskActionV2_Kind + "." + CRDGroupVersion.String()
	SmartConnectTaskActionV2_GroupVersionKind = CRDGroupVersion.WithKind(SmartConnectTaskActionV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SmartConnectTaskActionV2{}, &SmartConnectTaskActionV2List{})
}
