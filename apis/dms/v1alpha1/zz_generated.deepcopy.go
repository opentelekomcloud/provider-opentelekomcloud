//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1) DeepCopyInto(out *InstanceV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1.
func (in *InstanceV1) DeepCopy() *InstanceV1 {
	if in == nil {
		return nil
	}
	out := new(InstanceV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1InitParameters) DeepCopyInto(out *InstanceV1InitParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1InitParameters.
func (in *InstanceV1InitParameters) DeepCopy() *InstanceV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1List) DeepCopyInto(out *InstanceV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InstanceV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1List.
func (in *InstanceV1List) DeepCopy() *InstanceV1List {
	if in == nil {
		return nil
	}
	out := new(InstanceV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Observation) DeepCopyInto(out *InstanceV1Observation) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupName != nil {
		in, out := &in.SecurityGroupName, &out.SecurityGroupName
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCName != nil {
		in, out := &in.VPCName, &out.VPCName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Observation.
func (in *InstanceV1Observation) DeepCopy() *InstanceV1Observation {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Parameters) DeepCopyInto(out *InstanceV1Parameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Parameters.
func (in *InstanceV1Parameters) DeepCopy() *InstanceV1Parameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Spec) DeepCopyInto(out *InstanceV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Spec.
func (in *InstanceV1Spec) DeepCopy() *InstanceV1Spec {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Status) DeepCopyInto(out *InstanceV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Status.
func (in *InstanceV1Status) DeepCopy() *InstanceV1Status {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2) DeepCopyInto(out *InstanceV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2.
func (in *InstanceV2) DeepCopy() *InstanceV2 {
	if in == nil {
		return nil
	}
	out := new(InstanceV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2InitParameters) DeepCopyInto(out *InstanceV2InitParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2InitParameters.
func (in *InstanceV2InitParameters) DeepCopy() *InstanceV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2List) DeepCopyInto(out *InstanceV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InstanceV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2List.
func (in *InstanceV2List) DeepCopy() *InstanceV2List {
	if in == nil {
		return nil
	}
	out := new(InstanceV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Observation) DeepCopyInto(out *InstanceV2Observation) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicAccessEnabled != nil {
		in, out := &in.PublicAccessEnabled, &out.PublicAccessEnabled
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicConnectAddress != nil {
		in, out := &in.PublicConnectAddress, &out.PublicConnectAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupName != nil {
		in, out := &in.SecurityGroupName, &out.SecurityGroupName
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageResourceID != nil {
		in, out := &in.StorageResourceID, &out.StorageResourceID
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetCidr != nil {
		in, out := &in.SubnetCidr, &out.SubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TotalStorageSpace != nil {
		in, out := &in.TotalStorageSpace, &out.TotalStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCName != nil {
		in, out := &in.VPCName, &out.VPCName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Observation.
func (in *InstanceV2Observation) DeepCopy() *InstanceV2Observation {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Parameters) DeepCopyInto(out *InstanceV2Parameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Parameters.
func (in *InstanceV2Parameters) DeepCopy() *InstanceV2Parameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Spec) DeepCopyInto(out *InstanceV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Spec.
func (in *InstanceV2Spec) DeepCopy() *InstanceV2Spec {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Status) DeepCopyInto(out *InstanceV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Status.
func (in *InstanceV2Status) DeepCopy() *InstanceV2Status {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesInitParameters) DeepCopyInto(out *PoliciesInitParameters) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesInitParameters.
func (in *PoliciesInitParameters) DeepCopy() *PoliciesInitParameters {
	if in == nil {
		return nil
	}
	out := new(PoliciesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesObservation) DeepCopyInto(out *PoliciesObservation) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesObservation.
func (in *PoliciesObservation) DeepCopy() *PoliciesObservation {
	if in == nil {
		return nil
	}
	out := new(PoliciesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesParameters) DeepCopyInto(out *PoliciesParameters) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesParameters.
func (in *PoliciesParameters) DeepCopy() *PoliciesParameters {
	if in == nil {
		return nil
	}
	out := new(PoliciesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1) DeepCopyInto(out *TopicV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1.
func (in *TopicV1) DeepCopy() *TopicV1 {
	if in == nil {
		return nil
	}
	out := new(TopicV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1InitParameters) DeepCopyInto(out *TopicV1InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1InitParameters.
func (in *TopicV1InitParameters) DeepCopy() *TopicV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1List) DeepCopyInto(out *TopicV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TopicV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1List.
func (in *TopicV1List) DeepCopy() *TopicV1List {
	if in == nil {
		return nil
	}
	out := new(TopicV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Observation) DeepCopyInto(out *TopicV1Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Observation.
func (in *TopicV1Observation) DeepCopy() *TopicV1Observation {
	if in == nil {
		return nil
	}
	out := new(TopicV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Parameters) DeepCopyInto(out *TopicV1Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Parameters.
func (in *TopicV1Parameters) DeepCopy() *TopicV1Parameters {
	if in == nil {
		return nil
	}
	out := new(TopicV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Spec) DeepCopyInto(out *TopicV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Spec.
func (in *TopicV1Spec) DeepCopy() *TopicV1Spec {
	if in == nil {
		return nil
	}
	out := new(TopicV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Status) DeepCopyInto(out *TopicV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Status.
func (in *TopicV1Status) DeepCopy() *TopicV1Status {
	if in == nil {
		return nil
	}
	out := new(TopicV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1) DeepCopyInto(out *UserPermissionV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1.
func (in *UserPermissionV1) DeepCopy() *UserPermissionV1 {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserPermissionV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1InitParameters) DeepCopyInto(out *UserPermissionV1InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1InitParameters.
func (in *UserPermissionV1InitParameters) DeepCopy() *UserPermissionV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1List) DeepCopyInto(out *UserPermissionV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserPermissionV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1List.
func (in *UserPermissionV1List) DeepCopy() *UserPermissionV1List {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserPermissionV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Observation) DeepCopyInto(out *UserPermissionV1Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
	if in.TopicType != nil {
		in, out := &in.TopicType, &out.TopicType
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Observation.
func (in *UserPermissionV1Observation) DeepCopy() *UserPermissionV1Observation {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Parameters) DeepCopyInto(out *UserPermissionV1Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Parameters.
func (in *UserPermissionV1Parameters) DeepCopy() *UserPermissionV1Parameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Spec) DeepCopyInto(out *UserPermissionV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Spec.
func (in *UserPermissionV1Spec) DeepCopy() *UserPermissionV1Spec {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Status) DeepCopyInto(out *UserPermissionV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Status.
func (in *UserPermissionV1Status) DeepCopy() *UserPermissionV1Status {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2) DeepCopyInto(out *UserV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2.
func (in *UserV2) DeepCopy() *UserV2 {
	if in == nil {
		return nil
	}
	out := new(UserV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2InitParameters) DeepCopyInto(out *UserV2InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2InitParameters.
func (in *UserV2InitParameters) DeepCopy() *UserV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(UserV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2List) DeepCopyInto(out *UserV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2List.
func (in *UserV2List) DeepCopy() *UserV2List {
	if in == nil {
		return nil
	}
	out := new(UserV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Observation) DeepCopyInto(out *UserV2Observation) {
	*out = *in
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(float64)
		**out = **in
	}
	if in.DefaultApp != nil {
		in, out := &in.DefaultApp, &out.DefaultApp
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Observation.
func (in *UserV2Observation) DeepCopy() *UserV2Observation {
	if in == nil {
		return nil
	}
	out := new(UserV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Parameters) DeepCopyInto(out *UserV2Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Parameters.
func (in *UserV2Parameters) DeepCopy() *UserV2Parameters {
	if in == nil {
		return nil
	}
	out := new(UserV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Spec) DeepCopyInto(out *UserV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Spec.
func (in *UserV2Spec) DeepCopy() *UserV2Spec {
	if in == nil {
		return nil
	}
	out := new(UserV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Status) DeepCopyInto(out *UserV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Status.
func (in *UserV2Status) DeepCopy() *UserV2Status {
	if in == nil {
		return nil
	}
	out := new(UserV2Status)
	in.DeepCopyInto(out)
	return out
}
