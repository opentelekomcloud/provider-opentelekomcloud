//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentsInitParameters) DeepCopyInto(out *AssignmentsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentsInitParameters.
func (in *AssignmentsInitParameters) DeepCopy() *AssignmentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssignmentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentsObservation) DeepCopyInto(out *AssignmentsObservation) {
	*out = *in
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentsObservation.
func (in *AssignmentsObservation) DeepCopy() *AssignmentsObservation {
	if in == nil {
		return nil
	}
	out := new(AssignmentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentsParameters) DeepCopyInto(out *AssignmentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentsParameters.
func (in *AssignmentsParameters) DeepCopy() *AssignmentsParameters {
	if in == nil {
		return nil
	}
	out := new(AssignmentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2) DeepCopyInto(out *ConsumerGroupV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2.
func (in *ConsumerGroupV2) DeepCopy() *ConsumerGroupV2 {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConsumerGroupV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2InitParameters) DeepCopyInto(out *ConsumerGroupV2InitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2InitParameters.
func (in *ConsumerGroupV2InitParameters) DeepCopy() *ConsumerGroupV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2List) DeepCopyInto(out *ConsumerGroupV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConsumerGroupV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2List.
func (in *ConsumerGroupV2List) DeepCopy() *ConsumerGroupV2List {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConsumerGroupV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2Observation) DeepCopyInto(out *ConsumerGroupV2Observation) {
	*out = *in
	if in.AssignmentStrategy != nil {
		in, out := &in.AssignmentStrategy, &out.AssignmentStrategy
		*out = new(string)
		**out = **in
	}
	if in.CoordinatorID != nil {
		in, out := &in.CoordinatorID, &out.CoordinatorID
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupMessageOffsets != nil {
		in, out := &in.GroupMessageOffsets, &out.GroupMessageOffsets
		*out = make([]GroupMessageOffsetsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]MembersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2Observation.
func (in *ConsumerGroupV2Observation) DeepCopy() *ConsumerGroupV2Observation {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2Parameters) DeepCopyInto(out *ConsumerGroupV2Parameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.GroupName != nil {
		in, out := &in.GroupName, &out.GroupName
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2Parameters.
func (in *ConsumerGroupV2Parameters) DeepCopy() *ConsumerGroupV2Parameters {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2Spec) DeepCopyInto(out *ConsumerGroupV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2Spec.
func (in *ConsumerGroupV2Spec) DeepCopy() *ConsumerGroupV2Spec {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerGroupV2Status) DeepCopyInto(out *ConsumerGroupV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerGroupV2Status.
func (in *ConsumerGroupV2Status) DeepCopy() *ConsumerGroupV2Status {
	if in == nil {
		return nil
	}
	out := new(ConsumerGroupV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossVPCAccessesInitParameters) DeepCopyInto(out *CrossVPCAccessesInitParameters) {
	*out = *in
	if in.AdvertisedIP != nil {
		in, out := &in.AdvertisedIP, &out.AdvertisedIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossVPCAccessesInitParameters.
func (in *CrossVPCAccessesInitParameters) DeepCopy() *CrossVPCAccessesInitParameters {
	if in == nil {
		return nil
	}
	out := new(CrossVPCAccessesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossVPCAccessesObservation) DeepCopyInto(out *CrossVPCAccessesObservation) {
	*out = *in
	if in.AdvertisedIP != nil {
		in, out := &in.AdvertisedIP, &out.AdvertisedIP
		*out = new(string)
		**out = **in
	}
	if in.ListenerIP != nil {
		in, out := &in.ListenerIP, &out.ListenerIP
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossVPCAccessesObservation.
func (in *CrossVPCAccessesObservation) DeepCopy() *CrossVPCAccessesObservation {
	if in == nil {
		return nil
	}
	out := new(CrossVPCAccessesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossVPCAccessesParameters) DeepCopyInto(out *CrossVPCAccessesParameters) {
	*out = *in
	if in.AdvertisedIP != nil {
		in, out := &in.AdvertisedIP, &out.AdvertisedIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossVPCAccessesParameters.
func (in *CrossVPCAccessesParameters) DeepCopy() *CrossVPCAccessesParameters {
	if in == nil {
		return nil
	}
	out := new(CrossVPCAccessesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2) DeepCopyInto(out *DedicatedInstanceV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2.
func (in *DedicatedInstanceV2) DeepCopy() *DedicatedInstanceV2 {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DedicatedInstanceV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2InitParameters) DeepCopyInto(out *DedicatedInstanceV2InitParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.ArchType != nil {
		in, out := &in.ArchType, &out.ArchType
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BrokerNum != nil {
		in, out := &in.BrokerNum, &out.BrokerNum
		*out = new(float64)
		**out = **in
	}
	if in.CrossVPCAccesses != nil {
		in, out := &in.CrossVPCAccesses, &out.CrossVPCAccesses
		*out = make([]CrossVPCAccessesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.EnabledMechanisms != nil {
		in, out := &in.EnabledMechanisms, &out.EnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NewTenantIps != nil {
		in, out := &in.NewTenantIps, &out.NewTenantIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2InitParameters.
func (in *DedicatedInstanceV2InitParameters) DeepCopy() *DedicatedInstanceV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2List) DeepCopyInto(out *DedicatedInstanceV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DedicatedInstanceV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2List.
func (in *DedicatedInstanceV2List) DeepCopy() *DedicatedInstanceV2List {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DedicatedInstanceV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2Observation) DeepCopyInto(out *DedicatedInstanceV2Observation) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.ArchType != nil {
		in, out := &in.ArchType, &out.ArchType
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = new(string)
		**out = **in
	}
	if in.BrokerNum != nil {
		in, out := &in.BrokerNum, &out.BrokerNum
		*out = new(float64)
		**out = **in
	}
	if in.CertReplaced != nil {
		in, out := &in.CertReplaced, &out.CertReplaced
		*out = new(bool)
		**out = **in
	}
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.ConnectorNodeNum != nil {
		in, out := &in.ConnectorNodeNum, &out.ConnectorNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CrossVPCAccesses != nil {
		in, out := &in.CrossVPCAccesses, &out.CrossVPCAccesses
		*out = make([]CrossVPCAccessesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.Dumping != nil {
		in, out := &in.Dumping, &out.Dumping
		*out = new(bool)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.EnabledMechanisms != nil {
		in, out := &in.EnabledMechanisms, &out.EnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NewTenantIps != nil {
		in, out := &in.NewTenantIps, &out.NewTenantIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PodConnectAddress != nil {
		in, out := &in.PodConnectAddress, &out.PodConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicIPAddress != nil {
		in, out := &in.PublicIPAddress, &out.PublicIPAddress
		*out = new(string)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SSLTwoWayEnable != nil {
		in, out := &in.SSLTwoWayEnable, &out.SSLTwoWayEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageResourceID != nil {
		in, out := &in.StorageResourceID, &out.StorageResourceID
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2Observation.
func (in *DedicatedInstanceV2Observation) DeepCopy() *DedicatedInstanceV2Observation {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2Parameters) DeepCopyInto(out *DedicatedInstanceV2Parameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.ArchType != nil {
		in, out := &in.ArchType, &out.ArchType
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BrokerNum != nil {
		in, out := &in.BrokerNum, &out.BrokerNum
		*out = new(float64)
		**out = **in
	}
	if in.CrossVPCAccesses != nil {
		in, out := &in.CrossVPCAccesses, &out.CrossVPCAccesses
		*out = make([]CrossVPCAccessesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.EnabledMechanisms != nil {
		in, out := &in.EnabledMechanisms, &out.EnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NewTenantIps != nil {
		in, out := &in.NewTenantIps, &out.NewTenantIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2Parameters.
func (in *DedicatedInstanceV2Parameters) DeepCopy() *DedicatedInstanceV2Parameters {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2Spec) DeepCopyInto(out *DedicatedInstanceV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2Spec.
func (in *DedicatedInstanceV2Spec) DeepCopy() *DedicatedInstanceV2Spec {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DedicatedInstanceV2Status) DeepCopyInto(out *DedicatedInstanceV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DedicatedInstanceV2Status.
func (in *DedicatedInstanceV2Status) DeepCopy() *DedicatedInstanceV2Status {
	if in == nil {
		return nil
	}
	out := new(DedicatedInstanceV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationTaskInitParameters) DeepCopyInto(out *DestinationTaskInitParameters) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.DeliverTimeInterval != nil {
		in, out := &in.DeliverTimeInterval, &out.DeliverTimeInterval
		*out = new(float64)
		**out = **in
	}
	if in.DestinationFileType != nil {
		in, out := &in.DestinationFileType, &out.DestinationFileType
		*out = new(string)
		**out = **in
	}
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsPath != nil {
		in, out := &in.ObsPath, &out.ObsPath
		*out = new(string)
		**out = **in
	}
	if in.PartitionFormat != nil {
		in, out := &in.PartitionFormat, &out.PartitionFormat
		*out = new(string)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.SecretKeySecretRef != nil {
		in, out := &in.SecretKeySecretRef, &out.SecretKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.StoreKeys != nil {
		in, out := &in.StoreKeys, &out.StoreKeys
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationTaskInitParameters.
func (in *DestinationTaskInitParameters) DeepCopy() *DestinationTaskInitParameters {
	if in == nil {
		return nil
	}
	out := new(DestinationTaskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationTaskObservation) DeepCopyInto(out *DestinationTaskObservation) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.DeliverTimeInterval != nil {
		in, out := &in.DeliverTimeInterval, &out.DeliverTimeInterval
		*out = new(float64)
		**out = **in
	}
	if in.DestinationFileType != nil {
		in, out := &in.DestinationFileType, &out.DestinationFileType
		*out = new(string)
		**out = **in
	}
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsPath != nil {
		in, out := &in.ObsPath, &out.ObsPath
		*out = new(string)
		**out = **in
	}
	if in.PartitionFormat != nil {
		in, out := &in.PartitionFormat, &out.PartitionFormat
		*out = new(string)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.StoreKeys != nil {
		in, out := &in.StoreKeys, &out.StoreKeys
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationTaskObservation.
func (in *DestinationTaskObservation) DeepCopy() *DestinationTaskObservation {
	if in == nil {
		return nil
	}
	out := new(DestinationTaskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationTaskParameters) DeepCopyInto(out *DestinationTaskParameters) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.DeliverTimeInterval != nil {
		in, out := &in.DeliverTimeInterval, &out.DeliverTimeInterval
		*out = new(float64)
		**out = **in
	}
	if in.DestinationFileType != nil {
		in, out := &in.DestinationFileType, &out.DestinationFileType
		*out = new(string)
		**out = **in
	}
	if in.ObsBucketName != nil {
		in, out := &in.ObsBucketName, &out.ObsBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObsPath != nil {
		in, out := &in.ObsPath, &out.ObsPath
		*out = new(string)
		**out = **in
	}
	if in.PartitionFormat != nil {
		in, out := &in.PartitionFormat, &out.PartitionFormat
		*out = new(string)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.SecretKeySecretRef != nil {
		in, out := &in.SecretKeySecretRef, &out.SecretKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.StoreKeys != nil {
		in, out := &in.StoreKeys, &out.StoreKeys
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationTaskParameters.
func (in *DestinationTaskParameters) DeepCopy() *DestinationTaskParameters {
	if in == nil {
		return nil
	}
	out := new(DestinationTaskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupMessageOffsetsInitParameters) DeepCopyInto(out *GroupMessageOffsetsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupMessageOffsetsInitParameters.
func (in *GroupMessageOffsetsInitParameters) DeepCopy() *GroupMessageOffsetsInitParameters {
	if in == nil {
		return nil
	}
	out := new(GroupMessageOffsetsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupMessageOffsetsObservation) DeepCopyInto(out *GroupMessageOffsetsObservation) {
	*out = *in
	if in.Lag != nil {
		in, out := &in.Lag, &out.Lag
		*out = new(float64)
		**out = **in
	}
	if in.MessageCurrentOffset != nil {
		in, out := &in.MessageCurrentOffset, &out.MessageCurrentOffset
		*out = new(float64)
		**out = **in
	}
	if in.MessageLogEndOffset != nil {
		in, out := &in.MessageLogEndOffset, &out.MessageLogEndOffset
		*out = new(float64)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupMessageOffsetsObservation.
func (in *GroupMessageOffsetsObservation) DeepCopy() *GroupMessageOffsetsObservation {
	if in == nil {
		return nil
	}
	out := new(GroupMessageOffsetsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupMessageOffsetsParameters) DeepCopyInto(out *GroupMessageOffsetsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupMessageOffsetsParameters.
func (in *GroupMessageOffsetsParameters) DeepCopy() *GroupMessageOffsetsParameters {
	if in == nil {
		return nil
	}
	out := new(GroupMessageOffsetsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1) DeepCopyInto(out *InstanceV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1.
func (in *InstanceV1) DeepCopy() *InstanceV1 {
	if in == nil {
		return nil
	}
	out := new(InstanceV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1InitParameters) DeepCopyInto(out *InstanceV1InitParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1InitParameters.
func (in *InstanceV1InitParameters) DeepCopy() *InstanceV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1List) DeepCopyInto(out *InstanceV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InstanceV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1List.
func (in *InstanceV1List) DeepCopy() *InstanceV1List {
	if in == nil {
		return nil
	}
	out := new(InstanceV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Observation) DeepCopyInto(out *InstanceV1Observation) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupName != nil {
		in, out := &in.SecurityGroupName, &out.SecurityGroupName
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCName != nil {
		in, out := &in.VPCName, &out.VPCName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Observation.
func (in *InstanceV1Observation) DeepCopy() *InstanceV1Observation {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Parameters) DeepCopyInto(out *InstanceV1Parameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Parameters.
func (in *InstanceV1Parameters) DeepCopy() *InstanceV1Parameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Spec) DeepCopyInto(out *InstanceV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Spec.
func (in *InstanceV1Spec) DeepCopy() *InstanceV1Spec {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV1Status) DeepCopyInto(out *InstanceV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV1Status.
func (in *InstanceV1Status) DeepCopy() *InstanceV1Status {
	if in == nil {
		return nil
	}
	out := new(InstanceV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2) DeepCopyInto(out *InstanceV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2.
func (in *InstanceV2) DeepCopy() *InstanceV2 {
	if in == nil {
		return nil
	}
	out := new(InstanceV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2InitParameters) DeepCopyInto(out *InstanceV2InitParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2InitParameters.
func (in *InstanceV2InitParameters) DeepCopy() *InstanceV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2List) DeepCopyInto(out *InstanceV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InstanceV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2List.
func (in *InstanceV2List) DeepCopy() *InstanceV2List {
	if in == nil {
		return nil
	}
	out := new(InstanceV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Observation) DeepCopyInto(out *InstanceV2Observation) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicAccessEnabled != nil {
		in, out := &in.PublicAccessEnabled, &out.PublicAccessEnabled
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicConnectAddress != nil {
		in, out := &in.PublicConnectAddress, &out.PublicConnectAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupName != nil {
		in, out := &in.SecurityGroupName, &out.SecurityGroupName
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageResourceID != nil {
		in, out := &in.StorageResourceID, &out.StorageResourceID
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetCidr != nil {
		in, out := &in.SubnetCidr, &out.SubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TotalStorageSpace != nil {
		in, out := &in.TotalStorageSpace, &out.TotalStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCName != nil {
		in, out := &in.VPCName, &out.VPCName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Observation.
func (in *InstanceV2Observation) DeepCopy() *InstanceV2Observation {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Parameters) DeepCopyInto(out *InstanceV2Parameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailableZones != nil {
		in, out := &in.AvailableZones, &out.AvailableZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiskEncryptedEnable != nil {
		in, out := &in.DiskEncryptedEnable, &out.DiskEncryptedEnable
		*out = new(bool)
		**out = **in
	}
	if in.DiskEncryptedKey != nil {
		in, out := &in.DiskEncryptedKey, &out.DiskEncryptedKey
		*out = new(string)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicBandwidth != nil {
		in, out := &in.PublicBandwidth, &out.PublicBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Parameters.
func (in *InstanceV2Parameters) DeepCopy() *InstanceV2Parameters {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Spec) DeepCopyInto(out *InstanceV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Spec.
func (in *InstanceV2Spec) DeepCopy() *InstanceV2Spec {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceV2Status) DeepCopyInto(out *InstanceV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceV2Status.
func (in *InstanceV2Status) DeepCopy() *InstanceV2Status {
	if in == nil {
		return nil
	}
	out := new(InstanceV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MembersInitParameters) DeepCopyInto(out *MembersInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MembersInitParameters.
func (in *MembersInitParameters) DeepCopy() *MembersInitParameters {
	if in == nil {
		return nil
	}
	out := new(MembersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MembersObservation) DeepCopyInto(out *MembersObservation) {
	*out = *in
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]AssignmentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.MemberID != nil {
		in, out := &in.MemberID, &out.MemberID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MembersObservation.
func (in *MembersObservation) DeepCopy() *MembersObservation {
	if in == nil {
		return nil
	}
	out := new(MembersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MembersParameters) DeepCopyInto(out *MembersParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MembersParameters.
func (in *MembersParameters) DeepCopy() *MembersParameters {
	if in == nil {
		return nil
	}
	out := new(MembersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesInitParameters) DeepCopyInto(out *PoliciesInitParameters) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesInitParameters.
func (in *PoliciesInitParameters) DeepCopy() *PoliciesInitParameters {
	if in == nil {
		return nil
	}
	out := new(PoliciesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesObservation) DeepCopyInto(out *PoliciesObservation) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesObservation.
func (in *PoliciesObservation) DeepCopy() *PoliciesObservation {
	if in == nil {
		return nil
	}
	out := new(PoliciesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoliciesParameters) DeepCopyInto(out *PoliciesParameters) {
	*out = *in
	if in.AccessPolicy != nil {
		in, out := &in.AccessPolicy, &out.AccessPolicy
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoliciesParameters.
func (in *PoliciesParameters) DeepCopy() *PoliciesParameters {
	if in == nil {
		return nil
	}
	out := new(PoliciesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2) DeepCopyInto(out *ReassignPartitionsV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2.
func (in *ReassignPartitionsV2) DeepCopy() *ReassignPartitionsV2 {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReassignPartitionsV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2InitParameters) DeepCopyInto(out *ReassignPartitionsV2InitParameters) {
	*out = *in
	if in.ExecuteAt != nil {
		in, out := &in.ExecuteAt, &out.ExecuteAt
		*out = new(float64)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.Reassignments != nil {
		in, out := &in.Reassignments, &out.Reassignments
		*out = make([]ReassignmentsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Throttle != nil {
		in, out := &in.Throttle, &out.Throttle
		*out = new(float64)
		**out = **in
	}
	if in.TimeEstimate != nil {
		in, out := &in.TimeEstimate, &out.TimeEstimate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2InitParameters.
func (in *ReassignPartitionsV2InitParameters) DeepCopy() *ReassignPartitionsV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2List) DeepCopyInto(out *ReassignPartitionsV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReassignPartitionsV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2List.
func (in *ReassignPartitionsV2List) DeepCopy() *ReassignPartitionsV2List {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReassignPartitionsV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2Observation) DeepCopyInto(out *ReassignPartitionsV2Observation) {
	*out = *in
	if in.ExecuteAt != nil {
		in, out := &in.ExecuteAt, &out.ExecuteAt
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.ReassignmentTime != nil {
		in, out := &in.ReassignmentTime, &out.ReassignmentTime
		*out = new(float64)
		**out = **in
	}
	if in.Reassignments != nil {
		in, out := &in.Reassignments, &out.Reassignments
		*out = make([]ReassignmentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Throttle != nil {
		in, out := &in.Throttle, &out.Throttle
		*out = new(float64)
		**out = **in
	}
	if in.TimeEstimate != nil {
		in, out := &in.TimeEstimate, &out.TimeEstimate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2Observation.
func (in *ReassignPartitionsV2Observation) DeepCopy() *ReassignPartitionsV2Observation {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2Parameters) DeepCopyInto(out *ReassignPartitionsV2Parameters) {
	*out = *in
	if in.ExecuteAt != nil {
		in, out := &in.ExecuteAt, &out.ExecuteAt
		*out = new(float64)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.IsSchedule != nil {
		in, out := &in.IsSchedule, &out.IsSchedule
		*out = new(bool)
		**out = **in
	}
	if in.Reassignments != nil {
		in, out := &in.Reassignments, &out.Reassignments
		*out = make([]ReassignmentsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Throttle != nil {
		in, out := &in.Throttle, &out.Throttle
		*out = new(float64)
		**out = **in
	}
	if in.TimeEstimate != nil {
		in, out := &in.TimeEstimate, &out.TimeEstimate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2Parameters.
func (in *ReassignPartitionsV2Parameters) DeepCopy() *ReassignPartitionsV2Parameters {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2Spec) DeepCopyInto(out *ReassignPartitionsV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2Spec.
func (in *ReassignPartitionsV2Spec) DeepCopy() *ReassignPartitionsV2Spec {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignPartitionsV2Status) DeepCopyInto(out *ReassignPartitionsV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignPartitionsV2Status.
func (in *ReassignPartitionsV2Status) DeepCopy() *ReassignPartitionsV2Status {
	if in == nil {
		return nil
	}
	out := new(ReassignPartitionsV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsAssignmentsInitParameters) DeepCopyInto(out *ReassignmentsAssignmentsInitParameters) {
	*out = *in
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.PartitionBrokers != nil {
		in, out := &in.PartitionBrokers, &out.PartitionBrokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsAssignmentsInitParameters.
func (in *ReassignmentsAssignmentsInitParameters) DeepCopy() *ReassignmentsAssignmentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsAssignmentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsAssignmentsObservation) DeepCopyInto(out *ReassignmentsAssignmentsObservation) {
	*out = *in
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.PartitionBrokers != nil {
		in, out := &in.PartitionBrokers, &out.PartitionBrokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsAssignmentsObservation.
func (in *ReassignmentsAssignmentsObservation) DeepCopy() *ReassignmentsAssignmentsObservation {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsAssignmentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsAssignmentsParameters) DeepCopyInto(out *ReassignmentsAssignmentsParameters) {
	*out = *in
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.PartitionBrokers != nil {
		in, out := &in.PartitionBrokers, &out.PartitionBrokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsAssignmentsParameters.
func (in *ReassignmentsAssignmentsParameters) DeepCopy() *ReassignmentsAssignmentsParameters {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsAssignmentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsInitParameters) DeepCopyInto(out *ReassignmentsInitParameters) {
	*out = *in
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]ReassignmentsAssignmentsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsInitParameters.
func (in *ReassignmentsInitParameters) DeepCopy() *ReassignmentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsObservation) DeepCopyInto(out *ReassignmentsObservation) {
	*out = *in
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]ReassignmentsAssignmentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsObservation.
func (in *ReassignmentsObservation) DeepCopy() *ReassignmentsObservation {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReassignmentsParameters) DeepCopyInto(out *ReassignmentsParameters) {
	*out = *in
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]ReassignmentsAssignmentsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReassignmentsParameters.
func (in *ReassignmentsParameters) DeepCopy() *ReassignmentsParameters {
	if in == nil {
		return nil
	}
	out := new(ReassignmentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2) DeepCopyInto(out *SmartConnectTaskActionV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2.
func (in *SmartConnectTaskActionV2) DeepCopy() *SmartConnectTaskActionV2 {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectTaskActionV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2InitParameters) DeepCopyInto(out *SmartConnectTaskActionV2InitParameters) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.TaskID != nil {
		in, out := &in.TaskID, &out.TaskID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2InitParameters.
func (in *SmartConnectTaskActionV2InitParameters) DeepCopy() *SmartConnectTaskActionV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2List) DeepCopyInto(out *SmartConnectTaskActionV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SmartConnectTaskActionV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2List.
func (in *SmartConnectTaskActionV2List) DeepCopy() *SmartConnectTaskActionV2List {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectTaskActionV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2Observation) DeepCopyInto(out *SmartConnectTaskActionV2Observation) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TaskID != nil {
		in, out := &in.TaskID, &out.TaskID
		*out = new(string)
		**out = **in
	}
	if in.TaskStatus != nil {
		in, out := &in.TaskStatus, &out.TaskStatus
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2Observation.
func (in *SmartConnectTaskActionV2Observation) DeepCopy() *SmartConnectTaskActionV2Observation {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2Parameters) DeepCopyInto(out *SmartConnectTaskActionV2Parameters) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.TaskID != nil {
		in, out := &in.TaskID, &out.TaskID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2Parameters.
func (in *SmartConnectTaskActionV2Parameters) DeepCopy() *SmartConnectTaskActionV2Parameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2Spec) DeepCopyInto(out *SmartConnectTaskActionV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2Spec.
func (in *SmartConnectTaskActionV2Spec) DeepCopy() *SmartConnectTaskActionV2Spec {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskActionV2Status) DeepCopyInto(out *SmartConnectTaskActionV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskActionV2Status.
func (in *SmartConnectTaskActionV2Status) DeepCopy() *SmartConnectTaskActionV2Status {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskActionV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2) DeepCopyInto(out *SmartConnectTaskV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2.
func (in *SmartConnectTaskV2) DeepCopy() *SmartConnectTaskV2 {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectTaskV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2InitParameters) DeepCopyInto(out *SmartConnectTaskV2InitParameters) {
	*out = *in
	if in.DestinationTask != nil {
		in, out := &in.DestinationTask, &out.DestinationTask
		*out = make([]DestinationTaskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationType != nil {
		in, out := &in.DestinationType, &out.DestinationType
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.SourceTask != nil {
		in, out := &in.SourceTask, &out.SourceTask
		*out = make([]SourceTaskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.StartLater != nil {
		in, out := &in.StartLater, &out.StartLater
		*out = new(bool)
		**out = **in
	}
	if in.TaskName != nil {
		in, out := &in.TaskName, &out.TaskName
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TopicsRegex != nil {
		in, out := &in.TopicsRegex, &out.TopicsRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2InitParameters.
func (in *SmartConnectTaskV2InitParameters) DeepCopy() *SmartConnectTaskV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2List) DeepCopyInto(out *SmartConnectTaskV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SmartConnectTaskV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2List.
func (in *SmartConnectTaskV2List) DeepCopy() *SmartConnectTaskV2List {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectTaskV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2Observation) DeepCopyInto(out *SmartConnectTaskV2Observation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DestinationTask != nil {
		in, out := &in.DestinationTask, &out.DestinationTask
		*out = make([]DestinationTaskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationType != nil {
		in, out := &in.DestinationType, &out.DestinationType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SourceTask != nil {
		in, out := &in.SourceTask, &out.SourceTask
		*out = make([]SourceTaskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.StartLater != nil {
		in, out := &in.StartLater, &out.StartLater
		*out = new(bool)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TaskName != nil {
		in, out := &in.TaskName, &out.TaskName
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TopicsRegex != nil {
		in, out := &in.TopicsRegex, &out.TopicsRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2Observation.
func (in *SmartConnectTaskV2Observation) DeepCopy() *SmartConnectTaskV2Observation {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2Parameters) DeepCopyInto(out *SmartConnectTaskV2Parameters) {
	*out = *in
	if in.DestinationTask != nil {
		in, out := &in.DestinationTask, &out.DestinationTask
		*out = make([]DestinationTaskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationType != nil {
		in, out := &in.DestinationType, &out.DestinationType
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.SourceTask != nil {
		in, out := &in.SourceTask, &out.SourceTask
		*out = make([]SourceTaskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.StartLater != nil {
		in, out := &in.StartLater, &out.StartLater
		*out = new(bool)
		**out = **in
	}
	if in.TaskName != nil {
		in, out := &in.TaskName, &out.TaskName
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TopicsRegex != nil {
		in, out := &in.TopicsRegex, &out.TopicsRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2Parameters.
func (in *SmartConnectTaskV2Parameters) DeepCopy() *SmartConnectTaskV2Parameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2Spec) DeepCopyInto(out *SmartConnectTaskV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2Spec.
func (in *SmartConnectTaskV2Spec) DeepCopy() *SmartConnectTaskV2Spec {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectTaskV2Status) DeepCopyInto(out *SmartConnectTaskV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectTaskV2Status.
func (in *SmartConnectTaskV2Status) DeepCopy() *SmartConnectTaskV2Status {
	if in == nil {
		return nil
	}
	out := new(SmartConnectTaskV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2) DeepCopyInto(out *SmartConnectV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2.
func (in *SmartConnectV2) DeepCopy() *SmartConnectV2 {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2InitParameters) DeepCopyInto(out *SmartConnectV2InitParameters) {
	*out = *in
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2InitParameters.
func (in *SmartConnectV2InitParameters) DeepCopy() *SmartConnectV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2List) DeepCopyInto(out *SmartConnectV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SmartConnectV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2List.
func (in *SmartConnectV2List) DeepCopy() *SmartConnectV2List {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SmartConnectV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2Observation) DeepCopyInto(out *SmartConnectV2Observation) {
	*out = *in
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2Observation.
func (in *SmartConnectV2Observation) DeepCopy() *SmartConnectV2Observation {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2Parameters) DeepCopyInto(out *SmartConnectV2Parameters) {
	*out = *in
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2Parameters.
func (in *SmartConnectV2Parameters) DeepCopy() *SmartConnectV2Parameters {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2Spec) DeepCopyInto(out *SmartConnectV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2Spec.
func (in *SmartConnectV2Spec) DeepCopy() *SmartConnectV2Spec {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SmartConnectV2Status) DeepCopyInto(out *SmartConnectV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SmartConnectV2Status.
func (in *SmartConnectV2Status) DeepCopy() *SmartConnectV2Status {
	if in == nil {
		return nil
	}
	out := new(SmartConnectV2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceTaskInitParameters) DeepCopyInto(out *SourceTaskInitParameters) {
	*out = *in
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.CurrentInstanceAlias != nil {
		in, out := &in.CurrentInstanceAlias, &out.CurrentInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PeerInstanceAddress != nil {
		in, out := &in.PeerInstanceAddress, &out.PeerInstanceAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PeerInstanceAlias != nil {
		in, out := &in.PeerInstanceAlias, &out.PeerInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.PeerInstanceID != nil {
		in, out := &in.PeerInstanceID, &out.PeerInstanceID
		*out = new(string)
		**out = **in
	}
	if in.ProvenanceHeaderEnabled != nil {
		in, out := &in.ProvenanceHeaderEnabled, &out.ProvenanceHeaderEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RenameTopicEnabled != nil {
		in, out := &in.RenameTopicEnabled, &out.RenameTopicEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SyncConsumerOffsetsEnabled != nil {
		in, out := &in.SyncConsumerOffsetsEnabled, &out.SyncConsumerOffsetsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TaskNum != nil {
		in, out := &in.TaskNum, &out.TaskNum
		*out = new(float64)
		**out = **in
	}
	if in.TopicsMapping != nil {
		in, out := &in.TopicsMapping, &out.TopicsMapping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceTaskInitParameters.
func (in *SourceTaskInitParameters) DeepCopy() *SourceTaskInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceTaskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceTaskObservation) DeepCopyInto(out *SourceTaskObservation) {
	*out = *in
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.CurrentInstanceAlias != nil {
		in, out := &in.CurrentInstanceAlias, &out.CurrentInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.PeerInstanceAddress != nil {
		in, out := &in.PeerInstanceAddress, &out.PeerInstanceAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PeerInstanceAlias != nil {
		in, out := &in.PeerInstanceAlias, &out.PeerInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.PeerInstanceID != nil {
		in, out := &in.PeerInstanceID, &out.PeerInstanceID
		*out = new(string)
		**out = **in
	}
	if in.ProvenanceHeaderEnabled != nil {
		in, out := &in.ProvenanceHeaderEnabled, &out.ProvenanceHeaderEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RenameTopicEnabled != nil {
		in, out := &in.RenameTopicEnabled, &out.RenameTopicEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SyncConsumerOffsetsEnabled != nil {
		in, out := &in.SyncConsumerOffsetsEnabled, &out.SyncConsumerOffsetsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TaskNum != nil {
		in, out := &in.TaskNum, &out.TaskNum
		*out = new(float64)
		**out = **in
	}
	if in.TopicsMapping != nil {
		in, out := &in.TopicsMapping, &out.TopicsMapping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceTaskObservation.
func (in *SourceTaskObservation) DeepCopy() *SourceTaskObservation {
	if in == nil {
		return nil
	}
	out := new(SourceTaskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceTaskParameters) DeepCopyInto(out *SourceTaskParameters) {
	*out = *in
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.ConsumerStrategy != nil {
		in, out := &in.ConsumerStrategy, &out.ConsumerStrategy
		*out = new(string)
		**out = **in
	}
	if in.CurrentInstanceAlias != nil {
		in, out := &in.CurrentInstanceAlias, &out.CurrentInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.Direction != nil {
		in, out := &in.Direction, &out.Direction
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PeerInstanceAddress != nil {
		in, out := &in.PeerInstanceAddress, &out.PeerInstanceAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PeerInstanceAlias != nil {
		in, out := &in.PeerInstanceAlias, &out.PeerInstanceAlias
		*out = new(string)
		**out = **in
	}
	if in.PeerInstanceID != nil {
		in, out := &in.PeerInstanceID, &out.PeerInstanceID
		*out = new(string)
		**out = **in
	}
	if in.ProvenanceHeaderEnabled != nil {
		in, out := &in.ProvenanceHeaderEnabled, &out.ProvenanceHeaderEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RenameTopicEnabled != nil {
		in, out := &in.RenameTopicEnabled, &out.RenameTopicEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SyncConsumerOffsetsEnabled != nil {
		in, out := &in.SyncConsumerOffsetsEnabled, &out.SyncConsumerOffsetsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TaskNum != nil {
		in, out := &in.TaskNum, &out.TaskNum
		*out = new(float64)
		**out = **in
	}
	if in.TopicsMapping != nil {
		in, out := &in.TopicsMapping, &out.TopicsMapping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceTaskParameters.
func (in *SourceTaskParameters) DeepCopy() *SourceTaskParameters {
	if in == nil {
		return nil
	}
	out := new(SourceTaskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1) DeepCopyInto(out *TopicV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1.
func (in *TopicV1) DeepCopy() *TopicV1 {
	if in == nil {
		return nil
	}
	out := new(TopicV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1InitParameters) DeepCopyInto(out *TopicV1InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1InitParameters.
func (in *TopicV1InitParameters) DeepCopy() *TopicV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1List) DeepCopyInto(out *TopicV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TopicV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1List.
func (in *TopicV1List) DeepCopy() *TopicV1List {
	if in == nil {
		return nil
	}
	out := new(TopicV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Observation) DeepCopyInto(out *TopicV1Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Observation.
func (in *TopicV1Observation) DeepCopy() *TopicV1Observation {
	if in == nil {
		return nil
	}
	out := new(TopicV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Parameters) DeepCopyInto(out *TopicV1Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxPartitions != nil {
		in, out := &in.MaxPartitions, &out.MaxPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(float64)
		**out = **in
	}
	if in.RemainPartitions != nil {
		in, out := &in.RemainPartitions, &out.RemainPartitions
		*out = new(float64)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(float64)
		**out = **in
	}
	if in.RetentionTime != nil {
		in, out := &in.RetentionTime, &out.RetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SyncMessageFlush != nil {
		in, out := &in.SyncMessageFlush, &out.SyncMessageFlush
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Parameters.
func (in *TopicV1Parameters) DeepCopy() *TopicV1Parameters {
	if in == nil {
		return nil
	}
	out := new(TopicV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Spec) DeepCopyInto(out *TopicV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Spec.
func (in *TopicV1Spec) DeepCopy() *TopicV1Spec {
	if in == nil {
		return nil
	}
	out := new(TopicV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicV1Status) DeepCopyInto(out *TopicV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicV1Status.
func (in *TopicV1Status) DeepCopy() *TopicV1Status {
	if in == nil {
		return nil
	}
	out := new(TopicV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1) DeepCopyInto(out *UserPermissionV1) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1.
func (in *UserPermissionV1) DeepCopy() *UserPermissionV1 {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserPermissionV1) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1InitParameters) DeepCopyInto(out *UserPermissionV1InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1InitParameters.
func (in *UserPermissionV1InitParameters) DeepCopy() *UserPermissionV1InitParameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1List) DeepCopyInto(out *UserPermissionV1List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserPermissionV1, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1List.
func (in *UserPermissionV1List) DeepCopy() *UserPermissionV1List {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserPermissionV1List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Observation) DeepCopyInto(out *UserPermissionV1Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
	if in.TopicType != nil {
		in, out := &in.TopicType, &out.TopicType
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Observation.
func (in *UserPermissionV1Observation) DeepCopy() *UserPermissionV1Observation {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Parameters) DeepCopyInto(out *UserPermissionV1Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]PoliciesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Parameters.
func (in *UserPermissionV1Parameters) DeepCopy() *UserPermissionV1Parameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Spec) DeepCopyInto(out *UserPermissionV1Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Spec.
func (in *UserPermissionV1Spec) DeepCopy() *UserPermissionV1Spec {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionV1Status) DeepCopyInto(out *UserPermissionV1Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionV1Status.
func (in *UserPermissionV1Status) DeepCopy() *UserPermissionV1Status {
	if in == nil {
		return nil
	}
	out := new(UserPermissionV1Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2) DeepCopyInto(out *UserV2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2.
func (in *UserV2) DeepCopy() *UserV2 {
	if in == nil {
		return nil
	}
	out := new(UserV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserV2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2InitParameters) DeepCopyInto(out *UserV2InitParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2InitParameters.
func (in *UserV2InitParameters) DeepCopy() *UserV2InitParameters {
	if in == nil {
		return nil
	}
	out := new(UserV2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2List) DeepCopyInto(out *UserV2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserV2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2List.
func (in *UserV2List) DeepCopy() *UserV2List {
	if in == nil {
		return nil
	}
	out := new(UserV2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserV2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Observation) DeepCopyInto(out *UserV2Observation) {
	*out = *in
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(float64)
		**out = **in
	}
	if in.DefaultApp != nil {
		in, out := &in.DefaultApp, &out.DefaultApp
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Observation.
func (in *UserV2Observation) DeepCopy() *UserV2Observation {
	if in == nil {
		return nil
	}
	out := new(UserV2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Parameters) DeepCopyInto(out *UserV2Parameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Parameters.
func (in *UserV2Parameters) DeepCopy() *UserV2Parameters {
	if in == nil {
		return nil
	}
	out := new(UserV2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Spec) DeepCopyInto(out *UserV2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Spec.
func (in *UserV2Spec) DeepCopy() *UserV2Spec {
	if in == nil {
		return nil
	}
	out := new(UserV2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserV2Status) DeepCopyInto(out *UserV2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserV2Status.
func (in *UserV2Status) DeepCopy() *UserV2Status {
	if in == nil {
		return nil
	}
	out := new(UserV2Status)
	in.DeepCopyInto(out)
	return out
}
