/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TurboShareV1InitParameters struct {

	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the ID of a KMS key to encrypt the file system.
	// Changing this will create a new resource.
	CryptKeyID *string `json:"cryptKeyId,omitempty" tf:"crypt_key_id,omitempty"`

	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource with type StandardEnhanced/PerformanceEnhanced.
	Enhanced *bool `json:"enhanced,omitempty" tf:"enhanced,omitempty"`

	// Specifies the name of an SFS Turbo file system. The value contains 4 to 64
	// characters and must start with a letter. Changing this will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group ID.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// Specifies the file system type. The valid values are STANDARD and PERFORMANCE.
	// Changing this will create a new resource.
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the capacity of a common file system, in GB. The value ranges
	// from 500 to 32768.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the network ID of the subnet. Changing this will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the VPC ID. Changing this will create a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type TurboShareV1Observation struct {

	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The available capacity of the SFS Turbo file system in the unit of GB.
	AvailableCapacity *string `json:"availableCapacity,omitempty" tf:"available_capacity,omitempty"`

	// Specifies the ID of a KMS key to encrypt the file system.
	// Changing this will create a new resource.
	CryptKeyID *string `json:"cryptKeyId,omitempty" tf:"crypt_key_id,omitempty"`

	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource with type StandardEnhanced/PerformanceEnhanced.
	Enhanced *bool `json:"enhanced,omitempty" tf:"enhanced,omitempty"`

	// Specifies the extension type
	ExpandType *string `json:"expandType,omitempty" tf:"expand_type,omitempty"`

	// The mount point of the SFS Turbo file system.
	ExportLocation *string `json:"exportLocation,omitempty" tf:"export_location,omitempty"`

	// The UUID of the SFS Turbo file system.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of an SFS Turbo file system. The value contains 4 to 64
	// characters and must start with a letter. Changing this will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group ID.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// Specifies the file system type. The valid values are STANDARD and PERFORMANCE.
	// Changing this will create a new resource.
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the capacity of a common file system, in GB. The value ranges
	// from 500 to 32768.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the network ID of the subnet. Changing this will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the VPC ID. Changing this will create a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The version ID of the SFS Turbo file system.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TurboShareV1Parameters struct {

	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the ID of a KMS key to encrypt the file system.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	CryptKeyID *string `json:"cryptKeyId,omitempty" tf:"crypt_key_id,omitempty"`

	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource with type StandardEnhanced/PerformanceEnhanced.
	// +kubebuilder:validation:Optional
	Enhanced *bool `json:"enhanced,omitempty" tf:"enhanced,omitempty"`

	// Specifies the name of an SFS Turbo file system. The value contains 4 to 64
	// characters and must start with a letter. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group ID.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// Specifies the file system type. The valid values are STANDARD and PERFORMANCE.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the capacity of a common file system, in GB. The value ranges
	// from 500 to 32768.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the network ID of the subnet. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the VPC ID. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// TurboShareV1Spec defines the desired state of TurboShareV1
type TurboShareV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TurboShareV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TurboShareV1InitParameters `json:"initProvider,omitempty"`
}

// TurboShareV1Status defines the observed state of TurboShareV1.
type TurboShareV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TurboShareV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TurboShareV1 is the Schema for the TurboShareV1s API. Manages an SFS Turbo Share resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TurboShareV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subnetId) || (has(self.initProvider) && has(self.initProvider.subnetId))",message="spec.forProvider.subnetId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   TurboShareV1Spec   `json:"spec"`
	Status TurboShareV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TurboShareV1List contains a list of TurboShareV1s
type TurboShareV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TurboShareV1 `json:"items"`
}

// Repository type metadata.
var (
	TurboShareV1_Kind             = "TurboShareV1"
	TurboShareV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TurboShareV1_Kind}.String()
	TurboShareV1_KindAPIVersion   = TurboShareV1_Kind + "." + CRDGroupVersion.String()
	TurboShareV1_GroupVersionKind = CRDGroupVersion.WithKind(TurboShareV1_Kind)
)

func init() {
	SchemeBuilder.Register(&TurboShareV1{}, &TurboShareV1List{})
}
