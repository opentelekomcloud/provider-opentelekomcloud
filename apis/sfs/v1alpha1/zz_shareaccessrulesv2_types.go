/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRuleInitParameters struct {

	// The access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write).
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// The access that the back end grants or denies.
	AccessTo *string `json:"accessTo,omitempty" tf:"access_to,omitempty"`

	// The type of the share access rule. The value cert indicates
	// that the certificate is used to access the storage.
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`
}

type AccessRuleObservation struct {

	// The access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write).
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// The status of the share access rule.
	AccessRuleStatus *string `json:"accessRuleStatus,omitempty" tf:"access_rule_status,omitempty"`

	// The access that the back end grants or denies.
	AccessTo *string `json:"accessTo,omitempty" tf:"access_to,omitempty"`

	// The type of the share access rule. The value cert indicates
	// that the certificate is used to access the storage.
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// The UUID of the share access rule.
	ShareAccessID *string `json:"shareAccessId,omitempty" tf:"share_access_id,omitempty"`
}

type AccessRuleParameters struct {

	// The access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write).
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// The access that the back end grants or denies.
	// +kubebuilder:validation:Optional
	AccessTo *string `json:"accessTo" tf:"access_to,omitempty"`

	// The type of the share access rule. The value cert indicates
	// that the certificate is used to access the storage.
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`
}

type ShareAccessRulesV2InitParameters struct {

	// Specifies the access rules of SFS file share. Structure is documented below.
	AccessRule []AccessRuleInitParameters `json:"accessRule,omitempty" tf:"access_rule,omitempty"`

	// The UUID of the shared file system.
	ShareID *string `json:"shareId,omitempty" tf:"share_id,omitempty"`
}

type ShareAccessRulesV2Observation struct {

	// Specifies the access rules of SFS file share. Structure is documented below.
	AccessRule []AccessRuleObservation `json:"accessRule,omitempty" tf:"access_rule,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The UUID of the shared file system.
	ShareID *string `json:"shareId,omitempty" tf:"share_id,omitempty"`
}

type ShareAccessRulesV2Parameters struct {

	// Specifies the access rules of SFS file share. Structure is documented below.
	// +kubebuilder:validation:Optional
	AccessRule []AccessRuleParameters `json:"accessRule,omitempty" tf:"access_rule,omitempty"`

	// The UUID of the shared file system.
	// +kubebuilder:validation:Optional
	ShareID *string `json:"shareId,omitempty" tf:"share_id,omitempty"`
}

// ShareAccessRulesV2Spec defines the desired state of ShareAccessRulesV2
type ShareAccessRulesV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareAccessRulesV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ShareAccessRulesV2InitParameters `json:"initProvider,omitempty"`
}

// ShareAccessRulesV2Status defines the observed state of ShareAccessRulesV2.
type ShareAccessRulesV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareAccessRulesV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ShareAccessRulesV2 is the Schema for the ShareAccessRulesV2s API. Manages an SFS Access Rules resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ShareAccessRulesV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessRule) || (has(self.initProvider) && has(self.initProvider.accessRule))",message="spec.forProvider.accessRule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shareId) || (has(self.initProvider) && has(self.initProvider.shareId))",message="spec.forProvider.shareId is a required parameter"
	Spec   ShareAccessRulesV2Spec   `json:"spec"`
	Status ShareAccessRulesV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareAccessRulesV2List contains a list of ShareAccessRulesV2s
type ShareAccessRulesV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareAccessRulesV2 `json:"items"`
}

// Repository type metadata.
var (
	ShareAccessRulesV2_Kind             = "ShareAccessRulesV2"
	ShareAccessRulesV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareAccessRulesV2_Kind}.String()
	ShareAccessRulesV2_KindAPIVersion   = ShareAccessRulesV2_Kind + "." + CRDGroupVersion.String()
	ShareAccessRulesV2_GroupVersionKind = CRDGroupVersion.WithKind(ShareAccessRulesV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareAccessRulesV2{}, &ShareAccessRulesV2List{})
}
