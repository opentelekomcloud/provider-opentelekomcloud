// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentInitParameters struct {
}

type AttachmentObservation struct {
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type AttachmentParameters struct {
}

type VolumeV2InitParameters struct {

	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies to delete all snapshots associated with the EVS disk.
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// The consistency group to place the volume in.
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device type of volume to create. Valid options are VBD and SCSI.
	// Defaults to VBD. Changing this creates a new volume.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	// The EVS encryption capability with KMS key can be set with the following parameters:
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the volume to create (in gigabytes). Decreasing
	// this parameter creates a new volume.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// Tags key/value pairs to associate with the volume.
	// Changing this updates the existing volume tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Currently, the value can be SSD (ultra-high I/O disk type), SAS (high I/O disk type), SATA (common I/O disk type), co-p1 (Exclusive HPC/ SAP HANA: high I/O, performance optimized), or uh-l1 (Exclusive HPC/ SAP HANA: ultra-high-I/O, latency optimized). Read Note for uh-l1 and co-p1: OTC-API. Changing this creates a new volume.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeV2Observation struct {

	// If a volume is attached to an instance, this attribute will
	// display the Attachment ID, Instance ID, and the Device as the Instance sees it.
	Attachment []AttachmentObservation `json:"attachment,omitempty" tf:"attachment,omitempty"`

	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies to delete all snapshots associated with the EVS disk.
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// The consistency group to place the volume in.
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device type of volume to create. Valid options are VBD and SCSI.
	// Defaults to VBD. Changing this creates a new volume.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	// The EVS encryption capability with KMS key can be set with the following parameters:
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the volume to create (in gigabytes). Decreasing
	// this parameter creates a new volume.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// Tags key/value pairs to associate with the volume.
	// Changing this updates the existing volume tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Currently, the value can be SSD (ultra-high I/O disk type), SAS (high I/O disk type), SATA (common I/O disk type), co-p1 (Exclusive HPC/ SAP HANA: high I/O, performance optimized), or uh-l1 (Exclusive HPC/ SAP HANA: ultra-high-I/O, latency optimized). Read Note for uh-l1 and co-p1: OTC-API. Changing this creates a new volume.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`

	// Specifies the unique identifier used for mounting the EVS disk.
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type VolumeV2Parameters struct {

	// The availability zone for the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies to delete all snapshots associated with the EVS disk.
	// +kubebuilder:validation:Optional
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// The consistency group to place the volume in.
	// +kubebuilder:validation:Optional
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device type of volume to create. Valid options are VBD and SCSI.
	// Defaults to VBD. Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	// The EVS encryption capability with KMS key can be set with the following parameters:
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the volume to create (in gigabytes). Decreasing
	// this parameter creates a new volume.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	// +kubebuilder:validation:Optional
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// Tags key/value pairs to associate with the volume.
	// Changing this updates the existing volume tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Currently, the value can be SSD (ultra-high I/O disk type), SAS (high I/O disk type), SATA (common I/O disk type), co-p1 (Exclusive HPC/ SAP HANA: high I/O, performance optimized), or uh-l1 (Exclusive HPC/ SAP HANA: ultra-high-I/O, latency optimized). Read Note for uh-l1 and co-p1: OTC-API. Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

// VolumeV2Spec defines the desired state of VolumeV2
type VolumeV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeV2InitParameters `json:"initProvider,omitempty"`
}

// VolumeV2Status defines the observed state of VolumeV2.
type VolumeV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VolumeV2 is the Schema for the VolumeV2s API. Manages a BlockStorage volume resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VolumeV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   VolumeV2Spec   `json:"spec"`
	Status VolumeV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeV2List contains a list of VolumeV2s
type VolumeV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeV2 `json:"items"`
}

// Repository type metadata.
var (
	VolumeV2_Kind             = "VolumeV2"
	VolumeV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeV2_Kind}.String()
	VolumeV2_KindAPIVersion   = VolumeV2_Kind + "." + CRDGroupVersion.String()
	VolumeV2_GroupVersionKind = CRDGroupVersion.WithKind(VolumeV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeV2{}, &VolumeV2List{})
}
