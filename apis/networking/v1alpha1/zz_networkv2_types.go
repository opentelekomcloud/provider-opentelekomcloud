/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkV2InitParameters struct {

	// The administrative state of the network.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing network.
	AdminStateUp *string `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The name of the network. Changing this updates the name of
	// the existing network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// An array of one or more provider segment objects.
	Segments []SegmentsInitParameters `json:"segments,omitempty" tf:"segments,omitempty"`

	// Specifies whether the network resource can be accessed
	// by any tenant or not. Changing this updates the sharing capabilities of the
	// existing network. Shared SNAT only available in eu-de region.
	Shared *string `json:"shared,omitempty" tf:"shared,omitempty"`

	// The owner of the network. Required if admin wants to
	// create a network for another tenant. Changing this creates a new network.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type NetworkV2Observation struct {

	// The administrative state of the network.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing network.
	AdminStateUp *string `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the network. Changing this updates the name of
	// the existing network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// An array of one or more provider segment objects.
	Segments []SegmentsObservation `json:"segments,omitempty" tf:"segments,omitempty"`

	// Specifies whether the network resource can be accessed
	// by any tenant or not. Changing this updates the sharing capabilities of the
	// existing network. Shared SNAT only available in eu-de region.
	Shared *string `json:"shared,omitempty" tf:"shared,omitempty"`

	// The owner of the network. Required if admin wants to
	// create a network for another tenant. Changing this creates a new network.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type NetworkV2Parameters struct {

	// The administrative state of the network.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing network.
	// +kubebuilder:validation:Optional
	AdminStateUp *string `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The name of the network. Changing this updates the name of
	// the existing network.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// An array of one or more provider segment objects.
	// +kubebuilder:validation:Optional
	Segments []SegmentsParameters `json:"segments,omitempty" tf:"segments,omitempty"`

	// Specifies whether the network resource can be accessed
	// by any tenant or not. Changing this updates the sharing capabilities of the
	// existing network. Shared SNAT only available in eu-de region.
	// +kubebuilder:validation:Optional
	Shared *string `json:"shared,omitempty" tf:"shared,omitempty"`

	// The owner of the network. Required if admin wants to
	// create a network for another tenant. Changing this creates a new network.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type SegmentsInitParameters struct {

	// The type of physical network.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// The physical network where this network is implemented.
	PhysicalNetwork *string `json:"physicalNetwork,omitempty" tf:"physical_network,omitempty"`

	// An isolated segment on the physical network.
	SegmentationID *float64 `json:"segmentationId,omitempty" tf:"segmentation_id,omitempty"`
}

type SegmentsObservation struct {

	// The type of physical network.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// The physical network where this network is implemented.
	PhysicalNetwork *string `json:"physicalNetwork,omitempty" tf:"physical_network,omitempty"`

	// An isolated segment on the physical network.
	SegmentationID *float64 `json:"segmentationId,omitempty" tf:"segmentation_id,omitempty"`
}

type SegmentsParameters struct {

	// The type of physical network.
	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// The physical network where this network is implemented.
	// +kubebuilder:validation:Optional
	PhysicalNetwork *string `json:"physicalNetwork,omitempty" tf:"physical_network,omitempty"`

	// An isolated segment on the physical network.
	// +kubebuilder:validation:Optional
	SegmentationID *float64 `json:"segmentationId,omitempty" tf:"segmentation_id,omitempty"`
}

// NetworkV2Spec defines the desired state of NetworkV2
type NetworkV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkV2InitParameters `json:"initProvider,omitempty"`
}

// NetworkV2Status defines the observed state of NetworkV2.
type NetworkV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkV2 is the Schema for the NetworkV2s API. Manages a VPC Network resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NetworkV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkV2Spec   `json:"spec"`
	Status            NetworkV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkV2List contains a list of NetworkV2s
type NetworkV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkV2 `json:"items"`
}

// Repository type metadata.
var (
	NetworkV2_Kind             = "NetworkV2"
	NetworkV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkV2_Kind}.String()
	NetworkV2_KindAPIVersion   = NetworkV2_Kind + "." + CRDGroupVersion.String()
	NetworkV2_GroupVersionKind = CRDGroupVersion.WithKind(NetworkV2_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkV2{}, &NetworkV2List{})
}
