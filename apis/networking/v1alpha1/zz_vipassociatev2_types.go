/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VipAssociateV2InitParameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.PortV2
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// References to PortV2 in networking to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsRefs []v1.Reference `json:"portIdsRefs,omitempty" tf:"-"`

	// Selector for a list of PortV2 in networking to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsSelector *v1.Selector `json:"portIdsSelector,omitempty" tf:"-"`

	// The ID of vip to attach the port to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.VipV2
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// Reference to a VipV2 in networking to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDRef *v1.Reference `json:"vipIdRef,omitempty" tf:"-"`

	// Selector for a VipV2 in networking to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDSelector *v1.Selector `json:"vipIdSelector,omitempty" tf:"-"`
}

type VipAssociateV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An array of one or more IDs of the ports to attach the vip to.
	// Changing this creates a new vip associate.
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// The ID of vip to attach the port to.
	// Changing this creates a new vip associate.
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// The IP address in the subnet for this vip.
	VipIPAddress *string `json:"vipIpAddress,omitempty" tf:"vip_ip_address,omitempty"`

	// The ID of the subnet this vip connects to.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type VipAssociateV2Parameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.PortV2
	// +kubebuilder:validation:Optional
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// References to PortV2 in networking to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsRefs []v1.Reference `json:"portIdsRefs,omitempty" tf:"-"`

	// Selector for a list of PortV2 in networking to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsSelector *v1.Selector `json:"portIdsSelector,omitempty" tf:"-"`

	// The ID of vip to attach the port to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.VipV2
	// +kubebuilder:validation:Optional
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// Reference to a VipV2 in networking to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDRef *v1.Reference `json:"vipIdRef,omitempty" tf:"-"`

	// Selector for a VipV2 in networking to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDSelector *v1.Selector `json:"vipIdSelector,omitempty" tf:"-"`
}

// VipAssociateV2Spec defines the desired state of VipAssociateV2
type VipAssociateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VipAssociateV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VipAssociateV2InitParameters `json:"initProvider,omitempty"`
}

// VipAssociateV2Status defines the observed state of VipAssociateV2.
type VipAssociateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VipAssociateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VipAssociateV2 is the Schema for the VipAssociateV2s API. Manages a VPC VIP Associate resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type VipAssociateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VipAssociateV2Spec   `json:"spec"`
	Status            VipAssociateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VipAssociateV2List contains a list of VipAssociateV2s
type VipAssociateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VipAssociateV2 `json:"items"`
}

// Repository type metadata.
var (
	VipAssociateV2_Kind             = "VipAssociateV2"
	VipAssociateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VipAssociateV2_Kind}.String()
	VipAssociateV2_KindAPIVersion   = VipAssociateV2_Kind + "." + CRDGroupVersion.String()
	VipAssociateV2_GroupVersionKind = CRDGroupVersion.WithKind(VipAssociateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VipAssociateV2{}, &VipAssociateV2List{})
}
