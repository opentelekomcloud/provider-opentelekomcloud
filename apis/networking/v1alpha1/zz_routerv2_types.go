/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterV2InitParameters struct {

	// Administrative up/down status for the router
	// (must be true or false if provided). Changing this updates the
	// admin_state_up of an existing router.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Indicates whether or not to create a
	// distributed router. The default policy setting in Neutron restricts
	// usage of this property to administrative users only.
	Distributed *bool `json:"distributed,omitempty" tf:"distributed,omitempty"`

	// Enable Source NAT for the router. Valid values are
	// true or false. An external_gateway has to be set in order to set this
	// property. Changing this updates the enable_snat of the router.
	EnableSnat *bool `json:"enableSnat,omitempty" tf:"enable_snat,omitempty"`

	// The network UUID of an external gateway for
	// the router. A router with an external gateway is required if any compute
	// instances or load balancers will be using floating IPs. Changing this
	// updates the external_gateway of an existing router.
	ExternalGateway *string `json:"externalGateway,omitempty" tf:"external_gateway,omitempty"`

	// A unique name for the router. Changing this
	// updates the name of an existing router.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the floating IP. Required if admin wants
	// to create a router for another tenant. Changing this creates a new router.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional driver-specific options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type RouterV2Observation struct {

	// Administrative up/down status for the router
	// (must be true or false if provided). Changing this updates the
	// admin_state_up of an existing router.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Indicates whether or not to create a
	// distributed router. The default policy setting in Neutron restricts
	// usage of this property to administrative users only.
	Distributed *bool `json:"distributed,omitempty" tf:"distributed,omitempty"`

	// Enable Source NAT for the router. Valid values are
	// true or false. An external_gateway has to be set in order to set this
	// property. Changing this updates the enable_snat of the router.
	EnableSnat *bool `json:"enableSnat,omitempty" tf:"enable_snat,omitempty"`

	// The network UUID of an external gateway for
	// the router. A router with an external gateway is required if any compute
	// instances or load balancers will be using floating IPs. Changing this
	// updates the external_gateway of an existing router.
	ExternalGateway *string `json:"externalGateway,omitempty" tf:"external_gateway,omitempty"`

	// ID of the router.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the router. Changing this
	// updates the name of an existing router.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the floating IP. Required if admin wants
	// to create a router for another tenant. Changing this creates a new router.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional driver-specific options.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type RouterV2Parameters struct {

	// Administrative up/down status for the router
	// (must be true or false if provided). Changing this updates the
	// admin_state_up of an existing router.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Indicates whether or not to create a
	// distributed router. The default policy setting in Neutron restricts
	// usage of this property to administrative users only.
	// +kubebuilder:validation:Optional
	Distributed *bool `json:"distributed,omitempty" tf:"distributed,omitempty"`

	// Enable Source NAT for the router. Valid values are
	// true or false. An external_gateway has to be set in order to set this
	// property. Changing this updates the enable_snat of the router.
	// +kubebuilder:validation:Optional
	EnableSnat *bool `json:"enableSnat,omitempty" tf:"enable_snat,omitempty"`

	// The network UUID of an external gateway for
	// the router. A router with an external gateway is required if any compute
	// instances or load balancers will be using floating IPs. Changing this
	// updates the external_gateway of an existing router.
	// +kubebuilder:validation:Optional
	ExternalGateway *string `json:"externalGateway,omitempty" tf:"external_gateway,omitempty"`

	// A unique name for the router. Changing this
	// updates the name of an existing router.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the floating IP. Required if admin wants
	// to create a router for another tenant. Changing this creates a new router.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional driver-specific options.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// RouterV2Spec defines the desired state of RouterV2
type RouterV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouterV2InitParameters `json:"initProvider,omitempty"`
}

// RouterV2Status defines the observed state of RouterV2.
type RouterV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RouterV2 is the Schema for the RouterV2s API. Manages a VPC Router resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RouterV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouterV2Spec   `json:"spec"`
	Status            RouterV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterV2List contains a list of RouterV2s
type RouterV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouterV2 `json:"items"`
}

// Repository type metadata.
var (
	RouterV2_Kind             = "RouterV2"
	RouterV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouterV2_Kind}.String()
	RouterV2_KindAPIVersion   = RouterV2_Kind + "." + CRDGroupVersion.String()
	RouterV2_GroupVersionKind = CRDGroupVersion.WithKind(RouterV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RouterV2{}, &RouterV2List{})
}
