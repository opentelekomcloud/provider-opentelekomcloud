/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PtrrecordV2InitParameters struct {

	// Description of the PTR record.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the FloatingIP/EIP.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	FloatingipID *string `json:"floatingipId,omitempty" tf:"floatingip_id,omitempty"`

	// Reference to a EIPV1 in vpc to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDRef *v1.Reference `json:"floatingipIdRef,omitempty" tf:"-"`

	// Selector for a EIPV1 in vpc to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDSelector *v1.Selector `json:"floatingipIdSelector,omitempty" tf:"-"`

	// Domain name of the PTR record. A domain name is case insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time to live (TTL) of the record set (in seconds). The value
	// range is 300–2147483647. The default value is 300.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Tags key/value pairs to associate with the PTR record.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PtrrecordV2Observation struct {

	// The address of the FloatingIP/EIP.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Description of the PTR record.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the FloatingIP/EIP.
	FloatingipID *string `json:"floatingipId,omitempty" tf:"floatingip_id,omitempty"`

	// The PTR record ID, which is in {region}:{floatingip_id} format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Domain name of the PTR record. A domain name is case insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time to live (TTL) of the record set (in seconds). The value
	// range is 300–2147483647. The default value is 300.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Tags key/value pairs to associate with the PTR record.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PtrrecordV2Parameters struct {

	// Description of the PTR record.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the FloatingIP/EIP.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	// +kubebuilder:validation:Optional
	FloatingipID *string `json:"floatingipId,omitempty" tf:"floatingip_id,omitempty"`

	// Reference to a EIPV1 in vpc to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDRef *v1.Reference `json:"floatingipIdRef,omitempty" tf:"-"`

	// Selector for a EIPV1 in vpc to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDSelector *v1.Selector `json:"floatingipIdSelector,omitempty" tf:"-"`

	// Domain name of the PTR record. A domain name is case insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time to live (TTL) of the record set (in seconds). The value
	// range is 300–2147483647. The default value is 300.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Tags key/value pairs to associate with the PTR record.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PtrrecordV2Spec defines the desired state of PtrrecordV2
type PtrrecordV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PtrrecordV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PtrrecordV2InitParameters `json:"initProvider,omitempty"`
}

// PtrrecordV2Status defines the observed state of PtrrecordV2.
type PtrrecordV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PtrrecordV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PtrrecordV2 is the Schema for the PtrrecordV2s API. Manages a DNS PTR Record resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type PtrrecordV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PtrrecordV2Spec   `json:"spec"`
	Status PtrrecordV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PtrrecordV2List contains a list of PtrrecordV2s
type PtrrecordV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PtrrecordV2 `json:"items"`
}

// Repository type metadata.
var (
	PtrrecordV2_Kind             = "PtrrecordV2"
	PtrrecordV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PtrrecordV2_Kind}.String()
	PtrrecordV2_KindAPIVersion   = PtrrecordV2_Kind + "." + CRDGroupVersion.String()
	PtrrecordV2_GroupVersionKind = CRDGroupVersion.WithKind(PtrrecordV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PtrrecordV2{}, &PtrrecordV2List{})
}
