/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecordsetV2InitParameters struct {

	// A description of the  record set.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the record set. Changing this creates a new DNS  record set.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of DNS records.
	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The time to live (TTL) of the record set.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The key/value pairs to associate with the zone.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of record set. Examples: "A", "MX".
	// Changing this creates a new DNS  record set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Map of additional options. Changing this creates a
	// new record set.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone in which to create the record set.
	// Changing this creates a new DNS  record set.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/dns/v1alpha1.ZoneV2
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a ZoneV2 in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a ZoneV2 in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RecordsetV2Observation struct {

	// A description of the  record set.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the record set. Changing this creates a new DNS  record set.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of DNS records.
	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The time to live (TTL) of the record set.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The key/value pairs to associate with the zone.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of record set. Examples: "A", "MX".
	// Changing this creates a new DNS  record set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Map of additional options. Changing this creates a
	// new record set.
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone in which to create the record set.
	// Changing this creates a new DNS  record set.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordsetV2Parameters struct {

	// A description of the  record set.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the record set. Changing this creates a new DNS  record set.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of DNS records.
	// +kubebuilder:validation:Optional
	// +listType=set
	Records []*string `json:"records,omitempty" tf:"records,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The time to live (TTL) of the record set.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The key/value pairs to associate with the zone.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of record set. Examples: "A", "MX".
	// Changing this creates a new DNS  record set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Map of additional options. Changing this creates a
	// new record set.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone in which to create the record set.
	// Changing this creates a new DNS  record set.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/dns/v1alpha1.ZoneV2
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a ZoneV2 in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a ZoneV2 in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// RecordsetV2Spec defines the desired state of RecordsetV2
type RecordsetV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordsetV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RecordsetV2InitParameters `json:"initProvider,omitempty"`
}

// RecordsetV2Status defines the observed state of RecordsetV2.
type RecordsetV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordsetV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RecordsetV2 is the Schema for the RecordsetV2s API. Manages a DNS Recordset resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RecordsetV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.records) || (has(self.initProvider) && has(self.initProvider.records))",message="spec.forProvider.records is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   RecordsetV2Spec   `json:"spec"`
	Status RecordsetV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordsetV2List contains a list of RecordsetV2s
type RecordsetV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RecordsetV2 `json:"items"`
}

// Repository type metadata.
var (
	RecordsetV2_Kind             = "RecordsetV2"
	RecordsetV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RecordsetV2_Kind}.String()
	RecordsetV2_KindAPIVersion   = RecordsetV2_Kind + "." + CRDGroupVersion.String()
	RecordsetV2_GroupVersionKind = CRDGroupVersion.WithKind(RecordsetV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RecordsetV2{}, &RecordsetV2List{})
}
