/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketInventoryInitParameters struct {

	// Name of the bucket for saving inventories.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// ID of the inventory configuration. Valid characters: letters, digits, hyphens (-),
	// periods (.) and underscores (_).
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// Destination bucket settings of an inventory.
	// The structure is documented below.
	Destination []DestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Filtering by name prefix. Only objects with the specified name prefix are included in the inventory.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Intervals when inventories are generated.
	// An inventory is generated within one hour after it is configured for the first time. Then it is generated at the specified intervals.
	// Possible values:
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Indicates whether versions of objects are included in an inventory.
	// Possible values:
	IncludedObjectVersions *string `json:"includedObjectVersions,omitempty" tf:"included_object_versions,omitempty"`

	// Indicates whether the rule is enabled. If this parameter is set to true, the inventory is generated.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`
}

type BucketInventoryObservation struct {

	// Name of the bucket for saving inventories.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// ID of the inventory configuration. Valid characters: letters, digits, hyphens (-),
	// periods (.) and underscores (_).
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// Destination bucket settings of an inventory.
	// The structure is documented below.
	Destination []DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Filtering by name prefix. Only objects with the specified name prefix are included in the inventory.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Intervals when inventories are generated.
	// An inventory is generated within one hour after it is configured for the first time. Then it is generated at the specified intervals.
	// Possible values:
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether versions of objects are included in an inventory.
	// Possible values:
	IncludedObjectVersions *string `json:"includedObjectVersions,omitempty" tf:"included_object_versions,omitempty"`

	// Indicates whether the rule is enabled. If this parameter is set to true, the inventory is generated.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Specifies the bucket region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type BucketInventoryParameters struct {

	// Name of the bucket for saving inventories.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// ID of the inventory configuration. Valid characters: letters, digits, hyphens (-),
	// periods (.) and underscores (_).
	// +kubebuilder:validation:Optional
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// Destination bucket settings of an inventory.
	// The structure is documented below.
	// +kubebuilder:validation:Optional
	Destination []DestinationParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Filtering by name prefix. Only objects with the specified name prefix are included in the inventory.
	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Intervals when inventories are generated.
	// An inventory is generated within one hour after it is configured for the first time. Then it is generated at the specified intervals.
	// Possible values:
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Indicates whether versions of objects are included in an inventory.
	// Possible values:
	// +kubebuilder:validation:Optional
	IncludedObjectVersions *string `json:"includedObjectVersions,omitempty" tf:"included_object_versions,omitempty"`

	// Indicates whether the rule is enabled. If this parameter is set to true, the inventory is generated.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`
}

type DestinationInitParameters struct {

	// Name of the bucket for saving inventories.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Inventory format. Only the CSV format is supported.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name prefix of inventory files. If no prefix is configured, the names of inventory files will start with the BucketInventory by default.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type DestinationObservation struct {

	// Name of the bucket for saving inventories.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Inventory format. Only the CSV format is supported.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name prefix of inventory files. If no prefix is configured, the names of inventory files will start with the BucketInventory by default.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type DestinationParameters struct {

	// Name of the bucket for saving inventories.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Inventory format. Only the CSV format is supported.
	// +kubebuilder:validation:Optional
	Format *string `json:"format" tf:"format,omitempty"`

	// The name prefix of inventory files. If no prefix is configured, the names of inventory files will start with the BucketInventory by default.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

// BucketInventorySpec defines the desired state of BucketInventory
type BucketInventorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketInventoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketInventoryInitParameters `json:"initProvider,omitempty"`
}

// BucketInventoryStatus defines the observed state of BucketInventory.
type BucketInventoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketInventoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketInventory is the Schema for the BucketInventorys API. Manages a OBS Bucket Inventory resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type BucketInventory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucket) || (has(self.initProvider) && has(self.initProvider.bucket))",message="spec.forProvider.bucket is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configurationId) || (has(self.initProvider) && has(self.initProvider.configurationId))",message="spec.forProvider.configurationId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) && has(self.initProvider.frequency))",message="spec.forProvider.frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.includedObjectVersions) || (has(self.initProvider) && has(self.initProvider.includedObjectVersions))",message="spec.forProvider.includedObjectVersions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isEnabled) || (has(self.initProvider) && has(self.initProvider.isEnabled))",message="spec.forProvider.isEnabled is a required parameter"
	Spec   BucketInventorySpec   `json:"spec"`
	Status BucketInventoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketInventoryList contains a list of BucketInventorys
type BucketInventoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketInventory `json:"items"`
}

// Repository type metadata.
var (
	BucketInventory_Kind             = "BucketInventory"
	BucketInventory_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketInventory_Kind}.String()
	BucketInventory_KindAPIVersion   = BucketInventory_Kind + "." + CRDGroupVersion.String()
	BucketInventory_GroupVersionKind = CRDGroupVersion.WithKind(BucketInventory_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketInventory{}, &BucketInventoryList{})
}
