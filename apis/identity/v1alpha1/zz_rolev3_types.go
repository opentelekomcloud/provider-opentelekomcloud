// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleV3InitParameters struct {

	// Description of a role. The value cannot exceed 256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display layer of a role.
	DisplayLayer *string `json:"displayLayer,omitempty" tf:"display_layer,omitempty"`

	// Displayed name of a role. The value cannot exceed 64 characters.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Statement: The Statement field contains the Effect and Action
	// elements. Effect indicates whether the policy allows or denies
	// access. Action indicates authorization items. The number of
	// statements cannot exceed 8. Structure is documented below.
	Statement []StatementInitParameters `json:"statement,omitempty" tf:"statement,omitempty"`
}

type RoleV3Observation struct {

	// Directory where a role locates
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// Description of a role. The value cannot exceed 256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display layer of a role.
	DisplayLayer *string `json:"displayLayer,omitempty" tf:"display_layer,omitempty"`

	// Displayed name of a role. The value cannot exceed 64 characters.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the domain to which a role belongs
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of a role
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Statement: The Statement field contains the Effect and Action
	// elements. Effect indicates whether the policy allows or denies
	// access. Action indicates authorization items. The number of
	// statements cannot exceed 8. Structure is documented below.
	Statement []StatementObservation `json:"statement,omitempty" tf:"statement,omitempty"`
}

type RoleV3Parameters struct {

	// Description of a role. The value cannot exceed 256 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display layer of a role.
	// +kubebuilder:validation:Optional
	DisplayLayer *string `json:"displayLayer,omitempty" tf:"display_layer,omitempty"`

	// Displayed name of a role. The value cannot exceed 64 characters.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Statement: The Statement field contains the Effect and Action
	// elements. Effect indicates whether the policy allows or denies
	// access. Action indicates authorization items. The number of
	// statements cannot exceed 8. Structure is documented below.
	// +kubebuilder:validation:Optional
	Statement []StatementParameters `json:"statement,omitempty" tf:"statement,omitempty"`
}

type StatementInitParameters struct {

	// Permission set, which specifies the operation permissions on
	// resources. The number of permission sets cannot exceed 100.
	// Format:  The value format is Service name:Resource type:Action,
	// for example, vpc:ports:create. Service name: indicates the
	// product name, such as ecs, evs, or vpc. Only lowercase letters
	// are allowed. Resource type and Action: The values are
	// case-insensitive, and the wildcard () are allowed. A wildcard
	// () can represent all or part of information about resource
	// types and actions for the specific service.
	Action []*string `json:"action,omitempty" tf:"action,omitempty"`

	// The conditions for the permission to take effect. A maximum of 10 conditions are allowed.
	// Conditions should be provided as string as in example above.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The value can be Allow and Deny. If both Allow and Deny are
	// found in statements, the policy evaluation starts with Deny.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The resources which will be granted/denied accesses.
	// Format: Service:*:*:resource:resource_path.
	// Examples: KMS:*:*:KeyId:your_key, OBS:*:*:bucket:your_bucket, OBS:*:*:object:your_object.
	Resource []*string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type StatementObservation struct {

	// Permission set, which specifies the operation permissions on
	// resources. The number of permission sets cannot exceed 100.
	// Format:  The value format is Service name:Resource type:Action,
	// for example, vpc:ports:create. Service name: indicates the
	// product name, such as ecs, evs, or vpc. Only lowercase letters
	// are allowed. Resource type and Action: The values are
	// case-insensitive, and the wildcard () are allowed. A wildcard
	// () can represent all or part of information about resource
	// types and actions for the specific service.
	Action []*string `json:"action,omitempty" tf:"action,omitempty"`

	// The conditions for the permission to take effect. A maximum of 10 conditions are allowed.
	// Conditions should be provided as string as in example above.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The value can be Allow and Deny. If both Allow and Deny are
	// found in statements, the policy evaluation starts with Deny.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The resources which will be granted/denied accesses.
	// Format: Service:*:*:resource:resource_path.
	// Examples: KMS:*:*:KeyId:your_key, OBS:*:*:bucket:your_bucket, OBS:*:*:object:your_object.
	Resource []*string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type StatementParameters struct {

	// Permission set, which specifies the operation permissions on
	// resources. The number of permission sets cannot exceed 100.
	// Format:  The value format is Service name:Resource type:Action,
	// for example, vpc:ports:create. Service name: indicates the
	// product name, such as ecs, evs, or vpc. Only lowercase letters
	// are allowed. Resource type and Action: The values are
	// case-insensitive, and the wildcard () are allowed. A wildcard
	// () can represent all or part of information about resource
	// types and actions for the specific service.
	// +kubebuilder:validation:Optional
	Action []*string `json:"action" tf:"action,omitempty"`

	// The conditions for the permission to take effect. A maximum of 10 conditions are allowed.
	// Conditions should be provided as string as in example above.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The value can be Allow and Deny. If both Allow and Deny are
	// found in statements, the policy evaluation starts with Deny.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// The resources which will be granted/denied accesses.
	// Format: Service:*:*:resource:resource_path.
	// Examples: KMS:*:*:KeyId:your_key, OBS:*:*:bucket:your_bucket, OBS:*:*:object:your_object.
	// +kubebuilder:validation:Optional
	Resource []*string `json:"resource,omitempty" tf:"resource,omitempty"`
}

// RoleV3Spec defines the desired state of RoleV3
type RoleV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleV3InitParameters `json:"initProvider,omitempty"`
}

// RoleV3Status defines the observed state of RoleV3.
type RoleV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoleV3 is the Schema for the RoleV3s API. Manages a IAM Role resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RoleV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayLayer) || (has(self.initProvider) && has(self.initProvider.displayLayer))",message="spec.forProvider.displayLayer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statement) || (has(self.initProvider) && has(self.initProvider.statement))",message="spec.forProvider.statement is a required parameter"
	Spec   RoleV3Spec   `json:"spec"`
	Status RoleV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleV3List contains a list of RoleV3s
type RoleV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleV3 `json:"items"`
}

// Repository type metadata.
var (
	RoleV3_Kind             = "RoleV3"
	RoleV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleV3_Kind}.String()
	RoleV3_KindAPIVersion   = RoleV3_Kind + "." + CRDGroupVersion.String()
	RoleV3_GroupVersionKind = CRDGroupVersion.WithKind(RoleV3_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleV3{}, &RoleV3List{})
}
