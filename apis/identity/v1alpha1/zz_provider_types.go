/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConversionRulesInitParameters struct {
}

type ConversionRulesObservation struct {

	// The federated user information on the cloud platform.
	Local []LocalObservation `json:"local,omitempty" tf:"local,omitempty"`

	// The description of the identity provider.
	Remote []RemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type ConversionRulesParameters struct {
}

type LocalInitParameters struct {
}

type LocalObservation struct {

	// The user group to which the federated user belongs on the cloud platform.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// The user groups to which the federated user belongs on the cloud platform.
	Groups *string `json:"groups,omitempty" tf:"groups,omitempty"`

	// The name of a federated user on the cloud platform.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type LocalParameters struct {
}

type ProviderAccessConfigInitParameters struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderURL *string `json:"providerUrl,omitempty" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`
}

type ProviderAccessConfigObservation struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderURL *string `json:"providerUrl,omitempty" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`
}

type ProviderAccessConfigParameters struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	// +kubebuilder:validation:Optional
	ProviderURL *string `json:"providerUrl" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	// +kubebuilder:validation:Optional
	SigningKey *string `json:"signingKey" tf:"signing_key,omitempty"`
}

type ProviderInitParameters struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	AccessConfig []ProviderAccessConfigInitParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// Specifies the description of the identity provider.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rules used to map federated users to local users.
	// Details on mapping_rules are available in this link under rules section.
	MappingRules *string `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	// Specifies the metadata of the IDP(Identity Provider) server.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to saml.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol of the identity provider.
	// Valid values are saml and oidc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Enabled status for the identity provider. Default: true.
	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type ProviderObservation struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	AccessConfig []ProviderAccessConfigObservation `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// The identity conversion rules of the identity provider.
	// The structure is documented below.
	ConversionRules []ConversionRulesObservation `json:"conversionRules,omitempty" tf:"conversion_rules,omitempty"`

	// Specifies the description of the identity provider.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Resource links of an identity mapping.
	// +mapType=granular
	Links map[string]*string `json:"links,omitempty" tf:"links,omitempty"`

	// The login link of the identity provider.
	LoginLink *string `json:"loginLink,omitempty" tf:"login_link,omitempty"`

	// Rules used to map federated users to local users.
	// Details on mapping_rules are available in this link under rules section.
	MappingRules *string `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	// Specifies the metadata of the IDP(Identity Provider) server.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to saml.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol of the identity provider.
	// Valid values are saml and oidc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Enabled status for the identity provider. Default: true.
	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type ProviderParameters struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	// +kubebuilder:validation:Optional
	AccessConfig []ProviderAccessConfigParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// Specifies the description of the identity provider.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rules used to map federated users to local users.
	// Details on mapping_rules are available in this link under rules section.
	// +kubebuilder:validation:Optional
	MappingRules *string `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	// Specifies the metadata of the IDP(Identity Provider) server.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to saml.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol of the identity provider.
	// Valid values are saml and oidc.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Enabled status for the identity provider. Default: true.
	// +kubebuilder:validation:Optional
	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type RemoteInitParameters struct {
}

type RemoteObservation struct {

	// The attribute in the IDP assertion.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// The condition of conversion rule.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The rule is matched only if the specified strings appear in the attribute type.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type RemoteParameters struct {
}

// ProviderSpec defines the desired state of Provider
type ProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProviderInitParameters `json:"initProvider,omitempty"`
}

// ProviderStatus defines the observed state of Provider.
type ProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Provider is the Schema for the Providers API. Manages a IAM Provider resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type Provider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   ProviderSpec   `json:"spec"`
	Status ProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderList contains a list of Providers
type ProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Provider `json:"items"`
}

// Repository type metadata.
var (
	Provider_Kind             = "Provider"
	Provider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Provider_Kind}.String()
	Provider_KindAPIVersion   = Provider_Kind + "." + CRDGroupVersion.String()
	Provider_GroupVersionKind = CRDGroupVersion.WithKind(Provider_Kind)
)

func init() {
	SchemeBuilder.Register(&Provider{}, &ProviderList{})
}
