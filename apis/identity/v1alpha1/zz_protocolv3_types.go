/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessConfigInitParameters struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderURL *string `json:"providerUrl,omitempty" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`
}

type AccessConfigObservation struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderURL *string `json:"providerUrl,omitempty" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`
}

type AccessConfigParameters struct {

	// Specifies the access type of the identity provider.
	// Available options are:
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType" tf:"access_type,omitempty"`

	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	// +kubebuilder:validation:Optional
	ProviderURL *string `json:"providerUrl" tf:"provider_url,omitempty"`

	// Response mode.
	// Valid values is form_post and fragment, default value is form_post.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	ResponseMode *string `json:"responseMode,omitempty" tf:"response_mode,omitempty"`

	// Response type. Valid values is id_token, default value is id_token.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`

	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are openid, email, profile and other values defined by you.
	// This field is required only if the access type is set to program_console.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to oidc.
	// +kubebuilder:validation:Optional
	SigningKey *string `json:"signingKey" tf:"signing_key,omitempty"`
}

type MetadataInitParameters struct {

	// ID of the domain that a user belongs to.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Metadata file configuration.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Source of a domain. Blank by the default.
	XaccountType *string `json:"xaccountType,omitempty" tf:"xaccount_type,omitempty"`
}

type MetadataObservation struct {

	// ID of the domain that a user belongs to.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Metadata file configuration.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Source of a domain. Blank by the default.
	XaccountType *string `json:"xaccountType,omitempty" tf:"xaccount_type,omitempty"`
}

type MetadataParameters struct {

	// ID of the domain that a user belongs to.
	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainId" tf:"domain_id,omitempty"`

	// Metadata file configuration.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata" tf:"metadata,omitempty"`

	// Source of a domain. Blank by the default.
	// +kubebuilder:validation:Optional
	XaccountType *string `json:"xaccountType,omitempty" tf:"xaccount_type,omitempty"`
}

type ProtocolV3InitParameters struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	AccessConfig []AccessConfigInitParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// ID of an identity mapping.
	MappingID *string `json:"mappingId,omitempty" tf:"mapping_id,omitempty"`

	// Metadata file configuration.
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// ID of a protocol. Changing this creates a new protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of an identity provider. Changing this creates a new protocol.
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

type ProtocolV3Observation struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	AccessConfig []AccessConfigObservation `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Resource links of an identity protocol, including identity_provider and self.
	// +mapType=granular
	Links map[string]*string `json:"links,omitempty" tf:"links,omitempty"`

	// ID of an identity mapping.
	MappingID *string `json:"mappingId,omitempty" tf:"mapping_id,omitempty"`

	// Metadata file configuration.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// ID of a protocol. Changing this creates a new protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of an identity provider. Changing this creates a new protocol.
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

type ProtocolV3Parameters struct {

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to oidc.
	// +kubebuilder:validation:Optional
	AccessConfig []AccessConfigParameters `json:"accessConfig,omitempty" tf:"access_config,omitempty"`

	// ID of an identity mapping.
	// +kubebuilder:validation:Optional
	MappingID *string `json:"mappingId,omitempty" tf:"mapping_id,omitempty"`

	// Metadata file configuration.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// ID of a protocol. Changing this creates a new protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of an identity provider. Changing this creates a new protocol.
	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

// ProtocolV3Spec defines the desired state of ProtocolV3
type ProtocolV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtocolV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProtocolV3InitParameters `json:"initProvider,omitempty"`
}

// ProtocolV3Status defines the observed state of ProtocolV3.
type ProtocolV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtocolV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProtocolV3 is the Schema for the ProtocolV3s API. Manages a IAM Protocol resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ProtocolV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mappingId) || (has(self.initProvider) && has(self.initProvider.mappingId))",message="spec.forProvider.mappingId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerId) || (has(self.initProvider) && has(self.initProvider.providerId))",message="spec.forProvider.providerId is a required parameter"
	Spec   ProtocolV3Spec   `json:"spec"`
	Status ProtocolV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtocolV3List contains a list of ProtocolV3s
type ProtocolV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtocolV3 `json:"items"`
}

// Repository type metadata.
var (
	ProtocolV3_Kind             = "ProtocolV3"
	ProtocolV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtocolV3_Kind}.String()
	ProtocolV3_KindAPIVersion   = ProtocolV3_Kind + "." + CRDGroupVersion.String()
	ProtocolV3_GroupVersionKind = CRDGroupVersion.WithKind(ProtocolV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtocolV3{}, &ProtocolV3List{})
}
