// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoginProtectionInitParameters struct {

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Login authentication method of the user. Options: sms, email, and vmfa.
	VerificationMethod *string `json:"verificationMethod,omitempty" tf:"verification_method,omitempty"`
}

type LoginProtectionObservation struct {

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Login authentication method of the user. Options: sms, email, and vmfa.
	VerificationMethod *string `json:"verificationMethod,omitempty" tf:"verification_method,omitempty"`
}

type LoginProtectionParameters struct {

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Login authentication method of the user. Options: sms, email, and vmfa.
	// +kubebuilder:validation:Optional
	VerificationMethod *string `json:"verificationMethod" tf:"verification_method,omitempty"`
}

type UserV3InitParameters struct {

	// Specifies the access type of the user. Available values are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. This parameter must be used together with phone.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Specifies the description of the user.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Login protection configuration.
	// The login_protection block supports:
	LoginProtection []LoginProtectionInitParameters `json:"loginProtection,omitempty" tf:"login_protection,omitempty"`

	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`

	// Whether to send a Welcome Email or not.
	// Possible values are true and false.
	SendWelcomeEmail *bool `json:"sendWelcomeEmail,omitempty" tf:"send_welcome_email,omitempty"`
}

type UserV3Observation struct {

	// Specifies the access type of the user. Available values are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. This parameter must be used together with phone.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The time when the IAM user was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies the description of the user.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain user belongs to.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time when the IAM user last login.
	LastLogin *string `json:"lastLogin,omitempty" tf:"last_login,omitempty"`

	// Login protection configuration.
	// The login_protection block supports:
	LoginProtection []LoginProtectionObservation `json:"loginProtection,omitempty" tf:"login_protection,omitempty"`

	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the password strength.
	PasswordStrength *string `json:"passwordStrength,omitempty" tf:"password_strength,omitempty"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`

	// Whether to send a Welcome Email or not.
	// Possible values are true and false.
	SendWelcomeEmail *bool `json:"sendWelcomeEmail,omitempty" tf:"send_welcome_email,omitempty"`

	// ID of the user in the external system.
	XuserID *string `json:"xuserId,omitempty" tf:"xuser_id,omitempty"`

	// Type of the user in the external system.
	XuserType *string `json:"xuserType,omitempty" tf:"xuser_type,omitempty"`
}

type UserV3Parameters struct {

	// Specifies the access type of the user. Available values are:
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. This parameter must be used together with phone.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Specifies the description of the user.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Login protection configuration.
	// The login_protection block supports:
	// +kubebuilder:validation:Optional
	LoginProtection []LoginProtectionParameters `json:"loginProtection,omitempty" tf:"login_protection,omitempty"`

	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether the password should be reset. By default, the password is asked
	// to reset at the first login.
	// +kubebuilder:validation:Optional
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`

	// Whether to send a Welcome Email or not.
	// Possible values are true and false.
	// +kubebuilder:validation:Optional
	SendWelcomeEmail *bool `json:"sendWelcomeEmail,omitempty" tf:"send_welcome_email,omitempty"`
}

// UserV3Spec defines the desired state of UserV3
type UserV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserV3InitParameters `json:"initProvider,omitempty"`
}

// UserV3Status defines the observed state of UserV3.
type UserV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserV3 is the Schema for the UserV3s API. Manages a IAM User resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type UserV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserV3Spec   `json:"spec"`
	Status UserV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserV3List contains a list of UserV3s
type UserV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserV3 `json:"items"`
}

// Repository type metadata.
var (
	UserV3_Kind             = "UserV3"
	UserV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserV3_Kind}.String()
	UserV3_KindAPIVersion   = UserV3_Kind + "." + CRDGroupVersion.String()
	UserV3_GroupVersionKind = CRDGroupVersion.WithKind(UserV3_Kind)
)

func init() {
	SchemeBuilder.Register(&UserV3{}, &UserV3List{})
}
