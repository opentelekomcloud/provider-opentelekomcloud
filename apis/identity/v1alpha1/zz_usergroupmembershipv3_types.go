/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserGroupMembershipV3InitParameters struct {

	// IDs of the groups for the user to be assigned to.
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// ID of a user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type UserGroupMembershipV3Observation struct {

	// IDs of the groups for the user to be assigned to.
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of a user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type UserGroupMembershipV3Parameters struct {

	// IDs of the groups for the user to be assigned to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// ID of a user.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// UserGroupMembershipV3Spec defines the desired state of UserGroupMembershipV3
type UserGroupMembershipV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserGroupMembershipV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserGroupMembershipV3InitParameters `json:"initProvider,omitempty"`
}

// UserGroupMembershipV3Status defines the observed state of UserGroupMembershipV3.
type UserGroupMembershipV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserGroupMembershipV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserGroupMembershipV3 is the Schema for the UserGroupMembershipV3s API. Manages a IAM User Group Membership resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type UserGroupMembershipV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groups) || (has(self.initProvider) && has(self.initProvider.groups))",message="spec.forProvider.groups is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.user) || (has(self.initProvider) && has(self.initProvider.user))",message="spec.forProvider.user is a required parameter"
	Spec   UserGroupMembershipV3Spec   `json:"spec"`
	Status UserGroupMembershipV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserGroupMembershipV3List contains a list of UserGroupMembershipV3s
type UserGroupMembershipV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserGroupMembershipV3 `json:"items"`
}

// Repository type metadata.
var (
	UserGroupMembershipV3_Kind             = "UserGroupMembershipV3"
	UserGroupMembershipV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserGroupMembershipV3_Kind}.String()
	UserGroupMembershipV3_KindAPIVersion   = UserGroupMembershipV3_Kind + "." + CRDGroupVersion.String()
	UserGroupMembershipV3_GroupVersionKind = CRDGroupVersion.WithKind(UserGroupMembershipV3_Kind)
)

func init() {
	SchemeBuilder.Register(&UserGroupMembershipV3{}, &UserGroupMembershipV3List{})
}
