// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterV1InitParameters struct {

	// AZ in a cluster.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// View the private network connection information about the cluster. Structure is documented below.
	Endpoints []EndpointsInitParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// The number of latest manual snapshots that need to be retained for a cluster.
	KeepLastManualSnapshot *float64 `json:"keepLastManualSnapshot,omitempty" tf:"keep_last_manual_snapshot,omitempty"`

	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network ID, which is used for configuring cluster network.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Node type.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn *float64 `json:"numberOfCn,omitempty" tf:"number_of_cn,omitempty"`

	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode *float64 `json:"numberOfNode,omitempty" tf:"number_of_node,omitempty"`

	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	PublicEndpoints []PublicEndpointsInitParameters `json:"publicEndpoints,omitempty" tf:"public_endpoints,omitempty"`

	// A nested object resource Structure is documented below.
	PublicIP []PublicIPInitParameters `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	UserPwdSecretRef v1.SecretKeySelector `json:"userPwdSecretRef" tf:"-"`

	// VPC ID, which is used for configuring cluster network.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterV1Observation struct {

	// AZ in a cluster.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Cluster creation time. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// View the private network connection information about the cluster. Structure is documented below.
	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Cluster ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of latest manual snapshots that need to be retained for a cluster.
	KeepLastManualSnapshot *float64 `json:"keepLastManualSnapshot,omitempty" tf:"keep_last_manual_snapshot,omitempty"`

	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network ID, which is used for configuring cluster network.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Node type.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	NumberOfCn *float64 `json:"numberOfCn,omitempty" tf:"number_of_cn,omitempty"`

	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	NumberOfNode *float64 `json:"numberOfNode,omitempty" tf:"number_of_node,omitempty"`

	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// List of private network IP address.
	PrivateIP []*string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	PublicEndpoints []PublicEndpointsObservation `json:"publicEndpoints,omitempty" tf:"public_endpoints,omitempty"`

	// A nested object resource Structure is documented below.
	PublicIP []PublicIPObservation `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The recent event number.
	RecentEvent *float64 `json:"recentEvent,omitempty" tf:"recent_event,omitempty"`

	// ID of a security group. The ID is used for configuring cluster
	// network.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Cluster status, which can be one of the following:  CREATING AVAILABLE UNAVAILABLE CREATION FAILED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Sub-status of clusters in the AVAILABLE state. The value can be one of the following:  NORMAL READONLY
	// REDISTRIBUTING REDISTRIBUTION-FAILURE UNBALANCED UNBALANCED | READONLY DEGRADED DEGRADED | READONLY DEGRADED |
	// UNBALANCED UNBALANCED | REDISTRIBUTING UNBALANCED | REDISTRIBUTION-FAILURE READONLY | REDISTRIBUTION-FAILURE
	// UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED |
	// REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY | REDISTRIBUTION-FAILURE DEGRADED | UNBALANCED | READONLY
	SubStatus *string `json:"subStatus,omitempty" tf:"sub_status,omitempty"`

	// Cluster management task. The value can be one of the following:
	// RESTORING SNAPSHOTTING GROWING REBOOTING SETTING_CONFIGURATION CONFIGURING_EXT_DATASOURCE DELETING_EXT_DATASOURCE
	// REBOOT_FAILURE RESIZE_FAILURE
	TaskStatus *string `json:"taskStatus,omitempty" tf:"task_status,omitempty"`

	// Last modification time of a cluster. The format is ISO8601:YYYY-MM-DDThh:mm:ssZ
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`

	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// VPC ID, which is used for configuring cluster network.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Data warehouse version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ClusterV1Parameters struct {

	// AZ in a cluster.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// View the private network connection information about the cluster. Structure is documented below.
	// +kubebuilder:validation:Optional
	Endpoints []EndpointsParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// The number of latest manual snapshots that need to be retained for a cluster.
	// +kubebuilder:validation:Optional
	KeepLastManualSnapshot *float64 `json:"keepLastManualSnapshot,omitempty" tf:"keep_last_manual_snapshot,omitempty"`

	// Cluster name, which must be unique and contains 4 to 64 characters, which
	// consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network ID, which is used for configuring cluster network.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Node type.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Specifies the number of CN. If you use a large-scale cluster, deploy
	// multiple CNs.
	// +kubebuilder:validation:Optional
	NumberOfCn *float64 `json:"numberOfCn,omitempty" tf:"number_of_cn,omitempty"`

	// Number of nodes in a cluster. The value ranges from 3 to 32. When expanding,
	// add at least 3 nodes.
	// +kubebuilder:validation:Optional
	NumberOfNode *float64 `json:"numberOfNode,omitempty" tf:"number_of_node,omitempty"`

	// Service port of a cluster (8000 to 10000). The default value is 8000.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Public network connection information about the cluster. If the value is not specified, the
	// public network connection information is not used by default Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicEndpoints []PublicEndpointsParameters `json:"publicEndpoints,omitempty" tf:"public_endpoints,omitempty"`

	// A nested object resource Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicIP []PublicIPParameters `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// ID of a security group. The ID is used for configuring cluster
	// network.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Administrator username for logging in to a data warehouse cluster The
	// administrator username must:  Consist of lowercase letters, digits, or underscores. Start with a lowercase letter or
	// an underscore. Contain 1 to 63 characters. Cannot be a keyword of the DWS database.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Administrator password for logging in to a data warehouse cluster A password
	// must conform to the following rules:  Contains 8 to 32 characters. Cannot be the same as the username or the username
	// written in reverse order. Contains three types of the following:
	// Lowercase letters Uppercase letters Digits Special characters
	// ~!@#%^&*()-_=+|[{}];:,<.>/?
	// +kubebuilder:validation:Optional
	UserPwdSecretRef v1.SecretKeySelector `json:"userPwdSecretRef" tf:"-"`

	// VPC ID, which is used for configuring cluster network.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type EndpointsInitParameters struct {
}

type EndpointsObservation struct {

	// Private network connection information.
	ConnectInfo *string `json:"connectInfo,omitempty" tf:"connect_info,omitempty"`

	// JDBC URL. The following is the default format:
	// jdbc:postgresql://< connect_info>/<YOUR_DATABASE_NAME>
	JdbcURL *string `json:"jdbcUrl,omitempty" tf:"jdbc_url,omitempty"`
}

type EndpointsParameters struct {
}

type PublicEndpointsInitParameters struct {
}

type PublicEndpointsObservation struct {

	// JDBC URL. The following is the default format:
	// jdbc:postgresql://< public_connect_info>/<YOUR_DATABASE_NAME>
	JdbcURL *string `json:"jdbcUrl,omitempty" tf:"jdbc_url,omitempty"`

	// Public network connection information.
	PublicConnectInfo *string `json:"publicConnectInfo,omitempty" tf:"public_connect_info,omitempty"`
}

type PublicEndpointsParameters struct {
}

type PublicIPInitParameters struct {

	// EIP ID.
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Binding type of an EIP. The value can be either of the following:
	// auto_assign not_use bind_existing The default value is not_use.
	PublicBindType *string `json:"publicBindType,omitempty" tf:"public_bind_type,omitempty"`
}

type PublicIPObservation struct {

	// EIP ID.
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Binding type of an EIP. The value can be either of the following:
	// auto_assign not_use bind_existing The default value is not_use.
	PublicBindType *string `json:"publicBindType,omitempty" tf:"public_bind_type,omitempty"`
}

type PublicIPParameters struct {

	// EIP ID.
	// +kubebuilder:validation:Optional
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Binding type of an EIP. The value can be either of the following:
	// auto_assign not_use bind_existing The default value is not_use.
	// +kubebuilder:validation:Optional
	PublicBindType *string `json:"publicBindType,omitempty" tf:"public_bind_type,omitempty"`
}

// ClusterV1Spec defines the desired state of ClusterV1
type ClusterV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterV1InitParameters `json:"initProvider,omitempty"`
}

// ClusterV1Status defines the observed state of ClusterV1.
type ClusterV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClusterV1 is the Schema for the ClusterV1s API. Manages a DWS Cluster resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ClusterV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkId) || (has(self.initProvider) && has(self.initProvider.networkId))",message="spec.forProvider.networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeType) || (has(self.initProvider) && has(self.initProvider.nodeType))",message="spec.forProvider.nodeType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.numberOfNode) || (has(self.initProvider) && has(self.initProvider.numberOfNode))",message="spec.forProvider.numberOfNode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userPwdSecretRef)",message="spec.forProvider.userPwdSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   ClusterV1Spec   `json:"spec"`
	Status ClusterV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1List contains a list of ClusterV1s
type ClusterV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV1 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV1_Kind             = "ClusterV1"
	ClusterV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV1_Kind}.String()
	ClusterV1_KindAPIVersion   = ClusterV1_Kind + "." + CRDGroupVersion.String()
	ClusterV1_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV1{}, &ClusterV1List{})
}
