// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClustersInitParameters struct {

	// Specifies the CCE Cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the name of namespaces where sidecars are to be injected.
	InjectionNamespaces []*string `json:"injectionNamespaces,omitempty" tf:"injection_namespaces,omitempty"`

	// Specifies the node ID of nodes where service mesh components are to be installed.
	InstallationNodes []*string `json:"installationNodes,omitempty" tf:"installation_nodes,omitempty"`
}

type ClustersObservation struct {

	// Specifies the CCE Cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the name of namespaces where sidecars are to be injected.
	InjectionNamespaces []*string `json:"injectionNamespaces,omitempty" tf:"injection_namespaces,omitempty"`

	// Specifies the node ID of nodes where service mesh components are to be installed.
	InstallationNodes []*string `json:"installationNodes,omitempty" tf:"installation_nodes,omitempty"`
}

type ClustersParameters struct {

	// Specifies the CCE Cluster ID.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Specifies the name of namespaces where sidecars are to be injected.
	// +kubebuilder:validation:Optional
	InjectionNamespaces []*string `json:"injectionNamespaces,omitempty" tf:"injection_namespaces,omitempty"`

	// Specifies the node ID of nodes where service mesh components are to be installed.
	// +kubebuilder:validation:Optional
	InstallationNodes []*string `json:"installationNodes" tf:"installation_nodes,omitempty"`
}

type ExtensionProvidersInitParameters struct {

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the service address of Zipkin.
	ZipkinServiceAddr *string `json:"zipkinServiceAddr,omitempty" tf:"zipkin_service_addr,omitempty"`

	// Specifies the service port of Zipkin.
	ZipkinServicePort *float64 `json:"zipkinServicePort,omitempty" tf:"zipkin_service_port,omitempty"`
}

type ExtensionProvidersObservation struct {

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the service address of Zipkin.
	ZipkinServiceAddr *string `json:"zipkinServiceAddr,omitempty" tf:"zipkin_service_addr,omitempty"`

	// Specifies the service port of Zipkin.
	ZipkinServicePort *float64 `json:"zipkinServicePort,omitempty" tf:"zipkin_service_port,omitempty"`
}

type ExtensionProvidersParameters struct {

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the service address of Zipkin.
	// +kubebuilder:validation:Optional
	ZipkinServiceAddr *string `json:"zipkinServiceAddr,omitempty" tf:"zipkin_service_addr,omitempty"`

	// Specifies the service port of Zipkin.
	// +kubebuilder:validation:Optional
	ZipkinServicePort *float64 `json:"zipkinServicePort,omitempty" tf:"zipkin_service_port,omitempty"`
}

type ProxyConfigInitParameters struct {

	// Specifies the IP address ranges that will be excluded for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	ExcludeIPRanges *string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Specifies the ports that will be excluded for inbound traffic redirection. Use commas (,) to separate the ports.
	ExcludeInboundPorts *string `json:"excludeInboundPorts,omitempty" tf:"exclude_inbound_ports,omitempty"`

	// Specifies the ports that will be excluded for outbound traffic redirection. Use commas (,) to separate the ports.
	ExcludeOutboundPorts *string `json:"excludeOutboundPorts,omitempty" tf:"exclude_outbound_ports,omitempty"`

	// Specifies the IP address ranges that will be included for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	IncludeIPRanges *string `json:"includeIpRanges,omitempty" tf:"include_ip_ranges,omitempty"`

	// Specifies the Ports that will be included for inbound traffic redirection. Use commas (,) to separate the ports.
	IncludeInboundPorts *string `json:"includeInboundPorts,omitempty" tf:"include_inbound_ports,omitempty"`

	// Specifies the ports that will be included for outbound traffic redirection. Use commas (,) to separate the ports.
	IncludeOutboundPorts *string `json:"includeOutboundPorts,omitempty" tf:"include_outbound_ports,omitempty"`
}

type ProxyConfigObservation struct {

	// Specifies the IP address ranges that will be excluded for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	ExcludeIPRanges *string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Specifies the ports that will be excluded for inbound traffic redirection. Use commas (,) to separate the ports.
	ExcludeInboundPorts *string `json:"excludeInboundPorts,omitempty" tf:"exclude_inbound_ports,omitempty"`

	// Specifies the ports that will be excluded for outbound traffic redirection. Use commas (,) to separate the ports.
	ExcludeOutboundPorts *string `json:"excludeOutboundPorts,omitempty" tf:"exclude_outbound_ports,omitempty"`

	// Specifies the IP address ranges that will be included for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	IncludeIPRanges *string `json:"includeIpRanges,omitempty" tf:"include_ip_ranges,omitempty"`

	// Specifies the Ports that will be included for inbound traffic redirection. Use commas (,) to separate the ports.
	IncludeInboundPorts *string `json:"includeInboundPorts,omitempty" tf:"include_inbound_ports,omitempty"`

	// Specifies the ports that will be included for outbound traffic redirection. Use commas (,) to separate the ports.
	IncludeOutboundPorts *string `json:"includeOutboundPorts,omitempty" tf:"include_outbound_ports,omitempty"`
}

type ProxyConfigParameters struct {

	// Specifies the IP address ranges that will be excluded for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	// +kubebuilder:validation:Optional
	ExcludeIPRanges *string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Specifies the ports that will be excluded for inbound traffic redirection. Use commas (,) to separate the ports.
	// +kubebuilder:validation:Optional
	ExcludeInboundPorts *string `json:"excludeInboundPorts,omitempty" tf:"exclude_inbound_ports,omitempty"`

	// Specifies the ports that will be excluded for outbound traffic redirection. Use commas (,) to separate the ports.
	// +kubebuilder:validation:Optional
	ExcludeOutboundPorts *string `json:"excludeOutboundPorts,omitempty" tf:"exclude_outbound_ports,omitempty"`

	// Specifies the IP address ranges that will be included for outbound traffic redirection. Use commas (,) to separate the IP address ranges.
	// +kubebuilder:validation:Optional
	IncludeIPRanges *string `json:"includeIpRanges,omitempty" tf:"include_ip_ranges,omitempty"`

	// Specifies the Ports that will be included for inbound traffic redirection. Use commas (,) to separate the ports.
	// +kubebuilder:validation:Optional
	IncludeInboundPorts *string `json:"includeInboundPorts,omitempty" tf:"include_inbound_ports,omitempty"`

	// Specifies the ports that will be included for outbound traffic redirection. Use commas (,) to separate the ports.
	// +kubebuilder:validation:Optional
	IncludeOutboundPorts *string `json:"includeOutboundPorts,omitempty" tf:"include_outbound_ports,omitempty"`
}

type ServiceMeshV1InitParameters struct {

	// Specifies the cluster information in the service mesh. The clusters structure is documented below.
	Clusters []ClustersInitParameters `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Specifies whether the service mesh supports IPv6.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the data plane configuration of the service mesh. The proxy_config structure is documented below.
	ProxyConfig []ProxyConfigInitParameters `json:"proxyConfig,omitempty" tf:"proxy_config,omitempty"`

	// Specifies the observability/tracing configuration, which is used to report traces in the service mesh. The telemetry_config_tracing structure is documented below.
	TelemetryConfigTracing []TelemetryConfigTracingInitParameters `json:"telemetryConfigTracing,omitempty" tf:"telemetry_config_tracing,omitempty"`

	// Specifies the service mesh type. Supported value: InCluster (service mesh with an in-cluster control plane). The value is InCluster for the service mesh of the Basic edition.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the service mesh version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ServiceMeshV1Observation struct {

	// Indicates the cluster id of CCE clusters associated with service mesh.
	ClusterIds []*string `json:"clusterIds,omitempty" tf:"cluster_ids,omitempty"`

	// Specifies the cluster information in the service mesh. The clusters structure is documented below.
	Clusters []ClustersObservation `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Indicates the time when the service mesh was created..
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// Service Mesh ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the service mesh supports IPv6.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the data plane configuration of the service mesh. The proxy_config structure is documented below.
	ProxyConfig []ProxyConfigObservation `json:"proxyConfig,omitempty" tf:"proxy_config,omitempty"`

	// Indicates the service mesh status. The value can be: Running, Creating, CreateFailed, Deleting, DeleteFailed, Upgrading, UpgradeFailed, RollingBack, RollbackFailed.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the observability/tracing configuration, which is used to report traces in the service mesh. The telemetry_config_tracing structure is documented below.
	TelemetryConfigTracing []TelemetryConfigTracingObservation `json:"telemetryConfigTracing,omitempty" tf:"telemetry_config_tracing,omitempty"`

	// Specifies the service mesh type. Supported value: InCluster (service mesh with an in-cluster control plane). The value is InCluster for the service mesh of the Basic edition.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the service mesh version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ServiceMeshV1Parameters struct {

	// Specifies the cluster information in the service mesh. The clusters structure is documented below.
	// +kubebuilder:validation:Optional
	Clusters []ClustersParameters `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Specifies whether the service mesh supports IPv6.
	// +kubebuilder:validation:Optional
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the service mesh name. The name must be 4 to 64 characters long, start with a lowercase letter and not end with a hyphen (-). Only lowercase letters, digits, and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the data plane configuration of the service mesh. The proxy_config structure is documented below.
	// +kubebuilder:validation:Optional
	ProxyConfig []ProxyConfigParameters `json:"proxyConfig,omitempty" tf:"proxy_config,omitempty"`

	// Specifies the observability/tracing configuration, which is used to report traces in the service mesh. The telemetry_config_tracing structure is documented below.
	// +kubebuilder:validation:Optional
	TelemetryConfigTracing []TelemetryConfigTracingParameters `json:"telemetryConfigTracing,omitempty" tf:"telemetry_config_tracing,omitempty"`

	// Specifies the service mesh type. Supported value: InCluster (service mesh with an in-cluster control plane). The value is InCluster for the service mesh of the Basic edition.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the service mesh version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TelemetryConfigTracingInitParameters struct {

	// Specifies the name of the default provider that tracing reports data to, which must match the name field in extension_providers or use the preset provider apm-otel of ASM. If apm-otel is used, ensure that APM 2.0 is supported in the current region and the service mesh version is later than 1.18.
	DefaultProviders []*string `json:"defaultProviders,omitempty" tf:"default_providers,omitempty"`

	// Specifies the user-defined provider. Currently, Zipkin is supported. If you configure the Zipkin provider, ensure that the service mesh version is 1.15 or later. The structure is documented below:
	ExtensionProviders []ExtensionProvidersInitParameters `json:"extensionProviders,omitempty" tf:"extension_providers,omitempty"`

	// Specifies the tracing sampling rate.
	RandomSamplingPercentage *float64 `json:"randomSamplingPercentage,omitempty" tf:"random_sampling_percentage,omitempty"`
}

type TelemetryConfigTracingObservation struct {

	// Specifies the name of the default provider that tracing reports data to, which must match the name field in extension_providers or use the preset provider apm-otel of ASM. If apm-otel is used, ensure that APM 2.0 is supported in the current region and the service mesh version is later than 1.18.
	DefaultProviders []*string `json:"defaultProviders,omitempty" tf:"default_providers,omitempty"`

	// Specifies the user-defined provider. Currently, Zipkin is supported. If you configure the Zipkin provider, ensure that the service mesh version is 1.15 or later. The structure is documented below:
	ExtensionProviders []ExtensionProvidersObservation `json:"extensionProviders,omitempty" tf:"extension_providers,omitempty"`

	// Specifies the tracing sampling rate.
	RandomSamplingPercentage *float64 `json:"randomSamplingPercentage,omitempty" tf:"random_sampling_percentage,omitempty"`
}

type TelemetryConfigTracingParameters struct {

	// Specifies the name of the default provider that tracing reports data to, which must match the name field in extension_providers or use the preset provider apm-otel of ASM. If apm-otel is used, ensure that APM 2.0 is supported in the current region and the service mesh version is later than 1.18.
	// +kubebuilder:validation:Optional
	DefaultProviders []*string `json:"defaultProviders,omitempty" tf:"default_providers,omitempty"`

	// Specifies the user-defined provider. Currently, Zipkin is supported. If you configure the Zipkin provider, ensure that the service mesh version is 1.15 or later. The structure is documented below:
	// +kubebuilder:validation:Optional
	ExtensionProviders []ExtensionProvidersParameters `json:"extensionProviders,omitempty" tf:"extension_providers,omitempty"`

	// Specifies the tracing sampling rate.
	// +kubebuilder:validation:Optional
	RandomSamplingPercentage *float64 `json:"randomSamplingPercentage,omitempty" tf:"random_sampling_percentage,omitempty"`
}

// ServiceMeshV1Spec defines the desired state of ServiceMeshV1
type ServiceMeshV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceMeshV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceMeshV1InitParameters `json:"initProvider,omitempty"`
}

// ServiceMeshV1Status defines the observed state of ServiceMeshV1.
type ServiceMeshV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceMeshV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceMeshV1 is the Schema for the ServiceMeshV1s API. Manages an ASM Service Mesh v1 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ServiceMeshV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusters) || (has(self.initProvider) && has(self.initProvider.clusters))",message="spec.forProvider.clusters is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   ServiceMeshV1Spec   `json:"spec"`
	Status ServiceMeshV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceMeshV1List contains a list of ServiceMeshV1s
type ServiceMeshV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceMeshV1 `json:"items"`
}

// Repository type metadata.
var (
	ServiceMeshV1_Kind             = "ServiceMeshV1"
	ServiceMeshV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceMeshV1_Kind}.String()
	ServiceMeshV1_KindAPIVersion   = ServiceMeshV1_Kind + "." + CRDGroupVersion.String()
	ServiceMeshV1_GroupVersionKind = CRDGroupVersion.WithKind(ServiceMeshV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceMeshV1{}, &ServiceMeshV1List{})
}
