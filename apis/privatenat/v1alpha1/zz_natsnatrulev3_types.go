// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATSnatRuleV3InitParameters struct {

	// Specifies the CIDR block that matches the SNAT rule. Either this parameter or virsubnet_id must be specified.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Provides supplementary information about the SNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the IDs of the transit IP addresses. A maximum number of 20 IDs is allowed.
	TransitIPIds []*string `json:"transitIpIds,omitempty" tf:"transit_ip_ids,omitempty"`

	// Specifies the ID of the subnet that matches the SNAT rule. Either this parameter or cidr must be specified.
	VirsubnetID *string `json:"virsubnetId,omitempty" tf:"virsubnet_id,omitempty"`
}

type NATSnatRuleV3Observation struct {

	// Specifies the CIDR block that matches the SNAT rule. Either this parameter or virsubnet_id must be specified.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Indicates the time when the private NAT SNAT rule was created. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Provides supplementary information about the SNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates the ID of the enterprise project that is associated with the SNAT rule when the SNAT rule is created.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the private NAT gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Private NAT SNAT rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Indicates the private NAT SNAT rule status. The value can be: ACTIVE (The SNAT rule is running properly) or FROZEN (The SNAT rule is frozen).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates the list of details of associated transit IP addresses. The structure is described below.
	TransitIPAssociations []TransitIPAssociationsObservation `json:"transitIpAssociations,omitempty" tf:"transit_ip_associations,omitempty"`

	// Specifies the IDs of the transit IP addresses. A maximum number of 20 IDs is allowed.
	TransitIPIds []*string `json:"transitIpIds,omitempty" tf:"transit_ip_ids,omitempty"`

	// Indicates the time when the private NAT SNAT rule was updated. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the ID of the subnet that matches the SNAT rule. Either this parameter or cidr must be specified.
	VirsubnetID *string `json:"virsubnetId,omitempty" tf:"virsubnet_id,omitempty"`
}

type NATSnatRuleV3Parameters struct {

	// Specifies the CIDR block that matches the SNAT rule. Either this parameter or virsubnet_id must be specified.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Provides supplementary information about the SNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the IDs of the transit IP addresses. A maximum number of 20 IDs is allowed.
	// +kubebuilder:validation:Optional
	TransitIPIds []*string `json:"transitIpIds,omitempty" tf:"transit_ip_ids,omitempty"`

	// Specifies the ID of the subnet that matches the SNAT rule. Either this parameter or cidr must be specified.
	// +kubebuilder:validation:Optional
	VirsubnetID *string `json:"virsubnetId,omitempty" tf:"virsubnet_id,omitempty"`
}

type TransitIPAssociationsInitParameters struct {
}

type TransitIPAssociationsObservation struct {

	// Indicates the transit IP address.
	TransitIPAddress *string `json:"transitIpAddress,omitempty" tf:"transit_ip_address,omitempty"`

	// Indicates the ID of the transit IP address.
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`
}

type TransitIPAssociationsParameters struct {
}

// NATSnatRuleV3Spec defines the desired state of NATSnatRuleV3
type NATSnatRuleV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATSnatRuleV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATSnatRuleV3InitParameters `json:"initProvider,omitempty"`
}

// NATSnatRuleV3Status defines the observed state of NATSnatRuleV3.
type NATSnatRuleV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATSnatRuleV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATSnatRuleV3 is the Schema for the NATSnatRuleV3s API. Manages a Private NAT SNAT rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NATSnatRuleV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.transitIpIds) || (has(self.initProvider) && has(self.initProvider.transitIpIds))",message="spec.forProvider.transitIpIds is a required parameter"
	Spec   NATSnatRuleV3Spec   `json:"spec"`
	Status NATSnatRuleV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATSnatRuleV3List contains a list of NATSnatRuleV3s
type NATSnatRuleV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATSnatRuleV3 `json:"items"`
}

// Repository type metadata.
var (
	NATSnatRuleV3_Kind             = "NATSnatRuleV3"
	NATSnatRuleV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATSnatRuleV3_Kind}.String()
	NATSnatRuleV3_KindAPIVersion   = NATSnatRuleV3_Kind + "." + CRDGroupVersion.String()
	NATSnatRuleV3_GroupVersionKind = CRDGroupVersion.WithKind(NATSnatRuleV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NATSnatRuleV3{}, &NATSnatRuleV3List{})
}
