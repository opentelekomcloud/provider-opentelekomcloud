// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATDnatRuleV3InitParameters struct {

	// Provides supplementary information about the DNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the port number of the resource, which can be a compute instance, load balancer (v2 or v3), or virtual IP address. Value range: 0-65535. Default value: 0.
	InternalServicePort *string `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the port ID of the resource that the NAT gateway is bound to. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or private_ip_address must be specified. Otherwise, an error will be reported.
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// Specifies the port IP address that the NAT gateway uses. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or network_interface_id must be specified. Otherwise, an error will be reported.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Specifies the protocol type. Supported values: tcp, udp, any.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the ID of the transit IP address.
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Specifies the port number of the transit IP address. Value range: 0-65535. Default value: 0.
	TransitServicePort *string `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`
}

type NATDnatRuleV3Observation struct {

	// Indicates the time when the private NAT DNAT rule was created. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Provides supplementary information about the DNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates the ID of the enterprise project that is associated with the DNAT rule when the DNAT rule is created.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the private NAT gateway ID.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Private NAT DNAT rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the port number of the resource, which can be a compute instance, load balancer (v2 or v3), or virtual IP address. Value range: 0-65535. Default value: 0.
	InternalServicePort *string `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the port ID of the resource that the NAT gateway is bound to. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or private_ip_address must be specified. Otherwise, an error will be reported.
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// Specifies the port IP address that the NAT gateway uses. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or network_interface_id must be specified. Otherwise, an error will be reported.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Indicates the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the protocol type. Supported values: tcp, udp, any.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Indicates the private NAT DNAT rule status. The value can be: ACTIVE (The DNAT rule is running properly) or FROZEN (The DNAT rule is frozen).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the ID of the transit IP address.
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Specifies the port number of the transit IP address. Value range: 0-65535. Default value: 0.
	TransitServicePort *string `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`

	// Indicates the backend resource type of the DNAT rule. The type can be: COMPUTE, VIP, ELB, ELBv3, CUSTOMIZE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the time when the private NAT DNAT rule was updated. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NATDnatRuleV3Parameters struct {

	// Provides supplementary information about the DNAT rule. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID.
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Specifies the port number of the resource, which can be a compute instance, load balancer (v2 or v3), or virtual IP address. Value range: 0-65535. Default value: 0.
	// +kubebuilder:validation:Optional
	InternalServicePort *string `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the port ID of the resource that the NAT gateway is bound to. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or private_ip_address must be specified. Otherwise, an error will be reported.
	// +kubebuilder:validation:Optional
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// Specifies the port IP address that the NAT gateway uses. The resource can be a compute instance, load balancer (v2 or v3), or virtual IP address. Either this parameter or network_interface_id must be specified. Otherwise, an error will be reported.
	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Specifies the protocol type. Supported values: tcp, udp, any.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the ID of the transit IP address.
	// +kubebuilder:validation:Optional
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Specifies the port number of the transit IP address. Value range: 0-65535. Default value: 0.
	// +kubebuilder:validation:Optional
	TransitServicePort *string `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`
}

// NATDnatRuleV3Spec defines the desired state of NATDnatRuleV3
type NATDnatRuleV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATDnatRuleV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATDnatRuleV3InitParameters `json:"initProvider,omitempty"`
}

// NATDnatRuleV3Status defines the observed state of NATDnatRuleV3.
type NATDnatRuleV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATDnatRuleV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATDnatRuleV3 is the Schema for the NATDnatRuleV3s API. Manages a Private NAT DNAT rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NATDnatRuleV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayId) || (has(self.initProvider) && has(self.initProvider.gatewayId))",message="spec.forProvider.gatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.transitIpId) || (has(self.initProvider) && has(self.initProvider.transitIpId))",message="spec.forProvider.transitIpId is a required parameter"
	Spec   NATDnatRuleV3Spec   `json:"spec"`
	Status NATDnatRuleV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATDnatRuleV3List contains a list of NATDnatRuleV3s
type NATDnatRuleV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATDnatRuleV3 `json:"items"`
}

// Repository type metadata.
var (
	NATDnatRuleV3_Kind             = "NATDnatRuleV3"
	NATDnatRuleV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATDnatRuleV3_Kind}.String()
	NATDnatRuleV3_KindAPIVersion   = NATDnatRuleV3_Kind + "." + CRDGroupVersion.String()
	NATDnatRuleV3_GroupVersionKind = CRDGroupVersion.WithKind(NATDnatRuleV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NATDnatRuleV3{}, &NATDnatRuleV3List{})
}
