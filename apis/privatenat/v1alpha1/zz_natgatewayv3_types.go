// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DownlinkVpcsInitParameters struct {

	// Specifies the private IP address of the private NAT gateway.
	NgportIPAddress *string `json:"ngportIpAddress,omitempty" tf:"ngport_ip_address,omitempty"`

	// Specifies the ID of the subnet where the private NAT gateway works.
	VirsubnetID *string `json:"virsubnetId,omitempty" tf:"virsubnet_id,omitempty"`
}

type DownlinkVpcsObservation struct {

	// Specifies the private IP address of the private NAT gateway.
	NgportIPAddress *string `json:"ngportIpAddress,omitempty" tf:"ngport_ip_address,omitempty"`

	// Indicates the ID of the VPC where the private NAT gateway works.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies the ID of the subnet where the private NAT gateway works.
	VirsubnetID *string `json:"virsubnetId,omitempty" tf:"virsubnet_id,omitempty"`
}

type DownlinkVpcsParameters struct {

	// Specifies the private IP address of the private NAT gateway.
	// +kubebuilder:validation:Optional
	NgportIPAddress *string `json:"ngportIpAddress,omitempty" tf:"ngport_ip_address,omitempty"`

	// Specifies the ID of the subnet where the private NAT gateway works.
	// +kubebuilder:validation:Optional
	VirsubnetID *string `json:"virsubnetId" tf:"virsubnet_id,omitempty"`
}

type NATGatewayV3InitParameters struct {

	// Provides supplementary information about the private NAT gateway. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the VPC where the private NAT gateway works. The downlink_vpcs structure is documented below.
	DownlinkVpcs []DownlinkVpcsInitParameters `json:"downlinkVpcs,omitempty" tf:"downlink_vpcs,omitempty"`

	// Specifies the ID of the enterprise project that is associated with the private NAT gateway when the private NAT gateway is created.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the private NAT gateway name. Only digits, letters, underscores (_), and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the private NAT gateway specifications. The value can be: Small, Medium, Large, Extra-large. Default value: Small.
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Specifies the tag list in key/value format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NATGatewayV3Observation struct {

	// Indicates the time when the private NAT gateway was created. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Provides supplementary information about the private NAT gateway. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the VPC where the private NAT gateway works. The downlink_vpcs structure is documented below.
	DownlinkVpcs []DownlinkVpcsObservation `json:"downlinkVpcs,omitempty" tf:"downlink_vpcs,omitempty"`

	// Specifies the ID of the enterprise project that is associated with the private NAT gateway when the private NAT gateway is created.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Private NAT gateway ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the private NAT gateway name. Only digits, letters, underscores (_), and hyphens (-) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Indicates Specifies the maximum number of rules. Value range: 0-65535
	RuleMax *float64 `json:"ruleMax,omitempty" tf:"rule_max,omitempty"`

	// Specifies the private NAT gateway specifications. The value can be: Small, Medium, Large, Extra-large. Default value: Small.
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Indicates the private NAT gateway status. The value can be: ACTIVE (The private NAT gateway is running properly) or FROZEN (The private NAT gateway is frozen).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the tag list in key/value format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the maximum number of transit IP addresses in a transit IP address pool. Value range: 0-100
	TransitIPPoolSizeMax *float64 `json:"transitIpPoolSizeMax,omitempty" tf:"transit_ip_pool_size_max,omitempty"`

	// Indicates the time when the private NAT gateway was updated. It is a UTC time in yyyy-mm-ddThh:mm:ssZ format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NATGatewayV3Parameters struct {

	// Provides supplementary information about the private NAT gateway. The description can contain up to 255 characters and cannot contain angle brackets (<>).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the VPC where the private NAT gateway works. The downlink_vpcs structure is documented below.
	// +kubebuilder:validation:Optional
	DownlinkVpcs []DownlinkVpcsParameters `json:"downlinkVpcs,omitempty" tf:"downlink_vpcs,omitempty"`

	// Specifies the ID of the enterprise project that is associated with the private NAT gateway when the private NAT gateway is created.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the private NAT gateway name. Only digits, letters, underscores (_), and hyphens (-) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the private NAT gateway specifications. The value can be: Small, Medium, Large, Extra-large. Default value: Small.
	// +kubebuilder:validation:Optional
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Specifies the tag list in key/value format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// NATGatewayV3Spec defines the desired state of NATGatewayV3
type NATGatewayV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATGatewayV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATGatewayV3InitParameters `json:"initProvider,omitempty"`
}

// NATGatewayV3Status defines the observed state of NATGatewayV3.
type NATGatewayV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATGatewayV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATGatewayV3 is the Schema for the NATGatewayV3s API. Manages a Private NAT Gateway resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type NATGatewayV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.downlinkVpcs) || (has(self.initProvider) && has(self.initProvider.downlinkVpcs))",message="spec.forProvider.downlinkVpcs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   NATGatewayV3Spec   `json:"spec"`
	Status NATGatewayV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATGatewayV3List contains a list of NATGatewayV3s
type NATGatewayV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATGatewayV3 `json:"items"`
}

// Repository type metadata.
var (
	NATGatewayV3_Kind             = "NATGatewayV3"
	NATGatewayV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATGatewayV3_Kind}.String()
	NATGatewayV3_KindAPIVersion   = NATGatewayV3_Kind + "." + CRDGroupVersion.String()
	NATGatewayV3_GroupVersionKind = CRDGroupVersion.WithKind(NATGatewayV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NATGatewayV3{}, &NATGatewayV3List{})
}
