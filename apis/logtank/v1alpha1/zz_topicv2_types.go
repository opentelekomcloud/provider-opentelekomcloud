/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicV2InitParameters struct {

	// Specifies the ID of a created log group.
	// Changing this parameter will create a new resource.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Specifies the log topic name.
	// Changing this parameter will create a new resource.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicV2Observation struct {

	// Specifies the time when a log group was created.
	CreationTime *float64 `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// Specifies the ID of a created log group.
	// Changing this parameter will create a new resource.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The log topic ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the log topic name.
	// Changing this parameter will create a new resource.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicV2Parameters struct {

	// Specifies the ID of a created log group.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Specifies the log topic name.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

// TopicV2Spec defines the desired state of TopicV2
type TopicV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TopicV2InitParameters `json:"initProvider,omitempty"`
}

// TopicV2Status defines the observed state of TopicV2.
type TopicV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TopicV2 is the Schema for the TopicV2s API. Manages a LTS Log Topic resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TopicV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.topicName) || (has(self.initProvider) && has(self.initProvider.topicName))",message="spec.forProvider.topicName is a required parameter"
	Spec   TopicV2Spec   `json:"spec"`
	Status TopicV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicV2List contains a list of TopicV2s
type TopicV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicV2 `json:"items"`
}

// Repository type metadata.
var (
	TopicV2_Kind             = "TopicV2"
	TopicV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TopicV2_Kind}.String()
	TopicV2_KindAPIVersion   = TopicV2_Kind + "." + CRDGroupVersion.String()
	TopicV2_GroupVersionKind = CRDGroupVersion.WithKind(TopicV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TopicV2{}, &TopicV2List{})
}
