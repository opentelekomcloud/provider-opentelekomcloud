// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SoftwareDeploymentV1InitParameters struct {

	// The stack action that triggers this deployment resource.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The id of the software configuration resource running on an instance.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// The input data stored in the form of a key-value pair.
	// +mapType=granular
	InputValues map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The output data stored in the form of a key-value pair.
	// +mapType=granular
	OutputValues map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The id of the instance.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// The current status of deployment resources.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The cause of the current deployment resource status.
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// The id of the authenticated tenant who can perform operations on the deployment resources.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type SoftwareDeploymentV1Observation struct {

	// The stack action that triggers this deployment resource.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The id of the software configuration resource running on an instance.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// The id of the software deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The input data stored in the form of a key-value pair.
	// +mapType=granular
	InputValues map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The output data stored in the form of a key-value pair.
	// +mapType=granular
	OutputValues map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The id of the instance.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// The current status of deployment resources.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The cause of the current deployment resource status.
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// The id of the authenticated tenant who can perform operations on the deployment resources.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type SoftwareDeploymentV1Parameters struct {

	// The stack action that triggers this deployment resource.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The id of the software configuration resource running on an instance.
	// +kubebuilder:validation:Optional
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// The input data stored in the form of a key-value pair.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	InputValues map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The output data stored in the form of a key-value pair.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	OutputValues map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The id of the instance.
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// The current status of deployment resources.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The cause of the current deployment resource status.
	// +kubebuilder:validation:Optional
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// The id of the authenticated tenant who can perform operations on the deployment resources.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// SoftwareDeploymentV1Spec defines the desired state of SoftwareDeploymentV1
type SoftwareDeploymentV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SoftwareDeploymentV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SoftwareDeploymentV1InitParameters `json:"initProvider,omitempty"`
}

// SoftwareDeploymentV1Status defines the observed state of SoftwareDeploymentV1.
type SoftwareDeploymentV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SoftwareDeploymentV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SoftwareDeploymentV1 is the Schema for the SoftwareDeploymentV1s API. Manages an RTS Deployment resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SoftwareDeploymentV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configId) || (has(self.initProvider) && has(self.initProvider.configId))",message="spec.forProvider.configId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverId) || (has(self.initProvider) && has(self.initProvider.serverId))",message="spec.forProvider.serverId is a required parameter"
	Spec   SoftwareDeploymentV1Spec   `json:"spec"`
	Status SoftwareDeploymentV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareDeploymentV1List contains a list of SoftwareDeploymentV1s
type SoftwareDeploymentV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SoftwareDeploymentV1 `json:"items"`
}

// Repository type metadata.
var (
	SoftwareDeploymentV1_Kind             = "SoftwareDeploymentV1"
	SoftwareDeploymentV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SoftwareDeploymentV1_Kind}.String()
	SoftwareDeploymentV1_KindAPIVersion   = SoftwareDeploymentV1_Kind + "." + CRDGroupVersion.String()
	SoftwareDeploymentV1_GroupVersionKind = CRDGroupVersion.WithKind(SoftwareDeploymentV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SoftwareDeploymentV1{}, &SoftwareDeploymentV1List{})
}
