// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackV1InitParameters struct {

	// Set to true to disable rollback of the stack if stack creation failed.
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// Tthe environment information about the stack.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Files used in the environment.
	// +mapType=granular
	Files map[string]*string `json:"files,omitempty" tf:"files,omitempty"`

	// A unique name for the stack. The value must meet the regular expression rule (^[a-zA-Z][a-zA-Z0-9_.-]{0,254}$). Changing this creates a new stack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of Parameter structures that specify input parameters for the stack.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Structure containing the template body. The template content must use the yaml syntax.
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// Location of a file containing the template body.
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// Specifies the timeout duration.
	TimeoutMins *float64 `json:"timeoutMins,omitempty" tf:"timeout_mins,omitempty"`
}

type StackV1Observation struct {

	// List of stack capabilities for stack.
	// +listType=set
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// Set to true to disable rollback of the stack if stack creation failed.
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// Tthe environment information about the stack.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Files used in the environment.
	// +mapType=granular
	Files map[string]*string `json:"files,omitempty" tf:"files,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the stack. The value must meet the regular expression rule (^[a-zA-Z][a-zA-Z0-9_.-]{0,254}$). Changing this creates a new stack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of notification topics for stack.
	// +listType=set
	NotificationTopics []*string `json:"notificationTopics,omitempty" tf:"notification_topics,omitempty"`

	// A map of outputs from the stack.
	// +mapType=granular
	Outputs map[string]*string `json:"outputs,omitempty" tf:"outputs,omitempty"`

	// A list of Parameter structures that specify input parameters for the stack.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the stack status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// Structure containing the template body. The template content must use the yaml syntax.
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// Location of a file containing the template body.
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// Specifies the timeout duration.
	TimeoutMins *float64 `json:"timeoutMins,omitempty" tf:"timeout_mins,omitempty"`
}

type StackV1Parameters struct {

	// Set to true to disable rollback of the stack if stack creation failed.
	// +kubebuilder:validation:Optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// Tthe environment information about the stack.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Files used in the environment.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Files map[string]*string `json:"files,omitempty" tf:"files,omitempty"`

	// A unique name for the stack. The value must meet the regular expression rule (^[a-zA-Z][a-zA-Z0-9_.-]{0,254}$). Changing this creates a new stack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of Parameter structures that specify input parameters for the stack.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Structure containing the template body. The template content must use the yaml syntax.
	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// Location of a file containing the template body.
	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// Specifies the timeout duration.
	// +kubebuilder:validation:Optional
	TimeoutMins *float64 `json:"timeoutMins,omitempty" tf:"timeout_mins,omitempty"`
}

// StackV1Spec defines the desired state of StackV1
type StackV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StackV1InitParameters `json:"initProvider,omitempty"`
}

// StackV1Status defines the observed state of StackV1.
type StackV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StackV1 is the Schema for the StackV1s API. Manages an RTS Stack resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type StackV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   StackV1Spec   `json:"spec"`
	Status StackV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackV1List contains a list of StackV1s
type StackV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackV1 `json:"items"`
}

// Repository type metadata.
var (
	StackV1_Kind             = "StackV1"
	StackV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackV1_Kind}.String()
	StackV1_KindAPIVersion   = StackV1_Kind + "." + CRDGroupVersion.String()
	StackV1_GroupVersionKind = CRDGroupVersion.WithKind(StackV1_Kind)
)

func init() {
	SchemeBuilder.Register(&StackV1{}, &StackV1List{})
}
