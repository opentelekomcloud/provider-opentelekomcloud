// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SoftwareConfigV1InitParameters struct {

	// The software configuration code.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The namespace that groups this software configuration by when it is delivered to a server.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// A list of software configuration inputs.
	InputValues []map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The name of the software configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The software configuration options.
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// A list of software configuration outputs.
	OutputValues []map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SoftwareConfigV1Observation struct {

	// The software configuration code.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The namespace that groups this software configuration by when it is delivered to a server.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// The id of the software config.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of software configuration inputs.
	InputValues []map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The name of the software configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The software configuration options.
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// A list of software configuration outputs.
	OutputValues []map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SoftwareConfigV1Parameters struct {

	// The software configuration code.
	// +kubebuilder:validation:Optional
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// The namespace that groups this software configuration by when it is delivered to a server.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// A list of software configuration inputs.
	// +kubebuilder:validation:Optional
	InputValues []map[string]*string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// The name of the software configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The software configuration options.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// A list of software configuration outputs.
	// +kubebuilder:validation:Optional
	OutputValues []map[string]*string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SoftwareConfigV1Spec defines the desired state of SoftwareConfigV1
type SoftwareConfigV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SoftwareConfigV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SoftwareConfigV1InitParameters `json:"initProvider,omitempty"`
}

// SoftwareConfigV1Status defines the observed state of SoftwareConfigV1.
type SoftwareConfigV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SoftwareConfigV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SoftwareConfigV1 is the Schema for the SoftwareConfigV1s API. Manages an RTS Config resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SoftwareConfigV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SoftwareConfigV1Spec   `json:"spec"`
	Status SoftwareConfigV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareConfigV1List contains a list of SoftwareConfigV1s
type SoftwareConfigV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SoftwareConfigV1 `json:"items"`
}

// Repository type metadata.
var (
	SoftwareConfigV1_Kind             = "SoftwareConfigV1"
	SoftwareConfigV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SoftwareConfigV1_Kind}.String()
	SoftwareConfigV1_KindAPIVersion   = SoftwareConfigV1_Kind + "." + CRDGroupVersion.String()
	SoftwareConfigV1_GroupVersionKind = CRDGroupVersion.WithKind(SoftwareConfigV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SoftwareConfigV1{}, &SoftwareConfigV1List{})
}
