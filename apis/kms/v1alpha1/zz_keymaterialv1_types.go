// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyMaterialV1InitParameters struct {

	// Specifies the encrypted symmetric key material in Base64 format.
	// The value contains 344 to 360 characters, including letters, digits, slashes(/) and equals(=).
	// If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
	// This value is obtained refer to
	// documentation.
	EncryptedKeyMaterial *string `json:"encryptedKeyMaterial,omitempty" tf:"encrypted_key_material,omitempty"`

	// Specifies the expiration time of the key material.
	// This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
	// offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
	// The time must be greater than the current time.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// Specifies the key import token in Base64 format.
	// The value contains 200 to 6144 characters, including letters, digits, slashes(/) and equals(=). This value is
	// obtained through the interface Obtaining Key Import Parameters
	// or by using data_source/kms_key_material_parameters_v1.
	ImportToken *string `json:"importToken,omitempty" tf:"import_token,omitempty"`

	// Specifies the ID of the KMS key.
	// Changing this creates a new resource.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

type KeyMaterialV1Observation struct {

	// Specifies the encrypted symmetric key material in Base64 format.
	// The value contains 344 to 360 characters, including letters, digits, slashes(/) and equals(=).
	// If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
	// This value is obtained refer to
	// documentation.
	EncryptedKeyMaterial *string `json:"encryptedKeyMaterial,omitempty" tf:"encrypted_key_material,omitempty"`

	// Specifies the expiration time of the key material.
	// This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
	// offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
	// The time must be greater than the current time.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// The resource ID which equals the key_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the key import token in Base64 format.
	// The value contains 200 to 6144 characters, including letters, digits, slashes(/) and equals(=). This value is
	// obtained through the interface Obtaining Key Import Parameters
	// or by using data_source/kms_key_material_parameters_v1.
	ImportToken *string `json:"importToken,omitempty" tf:"import_token,omitempty"`

	// Specifies the ID of the KMS key.
	// Changing this creates a new resource.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The status of the kms key. The valid values are as follows:
	// 1: To be activated
	// 2: Enabled.
	// 3: Disabled.
	// 4: Pending deletion.
	// 5: Pending import.
	KeyState *string `json:"keyState,omitempty" tf:"key_state,omitempty"`

	// The region in which KMS key is created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type KeyMaterialV1Parameters struct {

	// Specifies the encrypted symmetric key material in Base64 format.
	// The value contains 344 to 360 characters, including letters, digits, slashes(/) and equals(=).
	// If an asymmetric key is imported, this parameter is a temporary intermediate key used to encrypt the private key.
	// This value is obtained refer to
	// documentation.
	// +kubebuilder:validation:Optional
	EncryptedKeyMaterial *string `json:"encryptedKeyMaterial,omitempty" tf:"encrypted_key_material,omitempty"`

	// Specifies the expiration time of the key material.
	// This field is only valid for symmetric keys. The time is in the format of timestamp, that is, the
	// offset seconds from 1970-01-01 00:00:00 UTC to the specified time.
	// The time must be greater than the current time.
	// +kubebuilder:validation:Optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// Specifies the key import token in Base64 format.
	// The value contains 200 to 6144 characters, including letters, digits, slashes(/) and equals(=). This value is
	// obtained through the interface Obtaining Key Import Parameters
	// or by using data_source/kms_key_material_parameters_v1.
	// +kubebuilder:validation:Optional
	ImportToken *string `json:"importToken,omitempty" tf:"import_token,omitempty"`

	// Specifies the ID of the KMS key.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

// KeyMaterialV1Spec defines the desired state of KeyMaterialV1
type KeyMaterialV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyMaterialV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeyMaterialV1InitParameters `json:"initProvider,omitempty"`
}

// KeyMaterialV1Status defines the observed state of KeyMaterialV1.
type KeyMaterialV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyMaterialV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KeyMaterialV1 is the Schema for the KeyMaterialV1s API. Manages a KMS Key Material resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type KeyMaterialV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encryptedKeyMaterial) || (has(self.initProvider) && has(self.initProvider.encryptedKeyMaterial))",message="spec.forProvider.encryptedKeyMaterial is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.importToken) || (has(self.initProvider) && has(self.initProvider.importToken))",message="spec.forProvider.importToken is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyId) || (has(self.initProvider) && has(self.initProvider.keyId))",message="spec.forProvider.keyId is a required parameter"
	Spec   KeyMaterialV1Spec   `json:"spec"`
	Status KeyMaterialV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyMaterialV1List contains a list of KeyMaterialV1s
type KeyMaterialV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyMaterialV1 `json:"items"`
}

// Repository type metadata.
var (
	KeyMaterialV1_Kind             = "KeyMaterialV1"
	KeyMaterialV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyMaterialV1_Kind}.String()
	KeyMaterialV1_KindAPIVersion   = KeyMaterialV1_Kind + "." + CRDGroupVersion.String()
	KeyMaterialV1_GroupVersionKind = CRDGroupVersion.WithKind(KeyMaterialV1_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyMaterialV1{}, &KeyMaterialV1List{})
}
