// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/logtank/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this BandwidthAssociateV2.
func (mg *BandwidthAssociateV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Bandwidth),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BandwidthRef,
		Selector:     mg.Spec.ForProvider.BandwidthSelector,
		To: reference.To{
			List:    &BandwidthV2List{},
			Managed: &BandwidthV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Bandwidth")
	}
	mg.Spec.ForProvider.Bandwidth = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BandwidthRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.FloatingIps),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.FloatingIpsRefs,
		Selector:      mg.Spec.ForProvider.FloatingIpsSelector,
		To: reference.To{
			List:    &EIPV1List{},
			Managed: &EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIps")
	}
	mg.Spec.ForProvider.FloatingIps = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.FloatingIpsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Bandwidth),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.BandwidthRef,
		Selector:     mg.Spec.InitProvider.BandwidthSelector,
		To: reference.To{
			List:    &BandwidthV2List{},
			Managed: &BandwidthV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Bandwidth")
	}
	mg.Spec.InitProvider.Bandwidth = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BandwidthRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.FloatingIps),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.FloatingIpsRefs,
		Selector:      mg.Spec.InitProvider.FloatingIpsSelector,
		To: reference.To{
			List:    &EIPV1List{},
			Managed: &EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIps")
	}
	mg.Spec.InitProvider.FloatingIps = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.FloatingIpsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this FlowLogV1.
func (mg *FlowLogV1) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LogGroupIDRef,
		Selector:     mg.Spec.ForProvider.LogGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.GroupV2List{},
			Managed: &v1alpha1.GroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogGroupID")
	}
	mg.Spec.ForProvider.LogGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogTopicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LogTopicIDRef,
		Selector:     mg.Spec.ForProvider.LogTopicIDSelector,
		To: reference.To{
			List:    &v1alpha1.TopicV2List{},
			Managed: &v1alpha1.TopicV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogTopicID")
	}
	mg.Spec.ForProvider.LogTopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogTopicIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LogGroupIDRef,
		Selector:     mg.Spec.InitProvider.LogGroupIDSelector,
		To: reference.To{
			List:    &v1alpha1.GroupV2List{},
			Managed: &v1alpha1.GroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogGroupID")
	}
	mg.Spec.InitProvider.LogGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogTopicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LogTopicIDRef,
		Selector:     mg.Spec.InitProvider.LogTopicIDSelector,
		To: reference.To{
			List:    &v1alpha1.TopicV2List{},
			Managed: &v1alpha1.TopicV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogTopicID")
	}
	mg.Spec.InitProvider.LogTopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogTopicIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ResourceIDRef,
		Selector:     mg.Spec.InitProvider.ResourceIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceID")
	}
	mg.Spec.InitProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PeeringConnectionAccepterV2.
func (mg *PeeringConnectionAccepterV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCPeeringConnectionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCPeeringConnectionIDRef,
		Selector:     mg.Spec.ForProvider.VPCPeeringConnectionIDSelector,
		To: reference.To{
			List:    &PeeringConnectionV2List{},
			Managed: &PeeringConnectionV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCPeeringConnectionID")
	}
	mg.Spec.ForProvider.VPCPeeringConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCPeeringConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCPeeringConnectionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCPeeringConnectionIDRef,
		Selector:     mg.Spec.InitProvider.VPCPeeringConnectionIDSelector,
		To: reference.To{
			List:    &PeeringConnectionV2List{},
			Managed: &PeeringConnectionV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCPeeringConnectionID")
	}
	mg.Spec.InitProvider.VPCPeeringConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCPeeringConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PeeringConnectionV2.
func (mg *PeeringConnectionV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerVPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PeerVPCIDRef,
		Selector:     mg.Spec.ForProvider.PeerVPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerVPCID")
	}
	mg.Spec.ForProvider.PeerVPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerVPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerVPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PeerVPCIDRef,
		Selector:     mg.Spec.InitProvider.PeerVPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerVPCID")
	}
	mg.Spec.InitProvider.PeerVPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerVPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteTableV1.
func (mg *RouteTableV1) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteV2.
func (mg *RouteV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubnetV1.
func (mg *SubnetV1) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VpcV1List{},
			Managed: &VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}
