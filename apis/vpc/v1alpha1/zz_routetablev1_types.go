/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteInitParameters struct {

	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
	// with any subnet in the VPC.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies the next hop.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// Specifies the route type. Currently, the value can be:
	// ecs, eni, vip, nat, peering, vpn, dc and cc.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RouteObservation struct {

	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
	// with any subnet in the VPC.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies the next hop.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// Specifies the route type. Currently, the value can be:
	// ecs, eni, vip, nat, peering, vpn, dc and cc.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RouteParameters struct {

	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
	// with any subnet in the VPC.
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination" tf:"destination,omitempty"`

	// Specifies the next hop.
	// +kubebuilder:validation:Optional
	Nexthop *string `json:"nexthop" tf:"nexthop,omitempty"`

	// Specifies the route type. Currently, the value can be:
	// ecs, eni, vip, nat, peering, vpn, dc and cc.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RouteTableV1InitParameters struct {

	// Specifies the supplementary information about the route table.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the route object list. The route object
	// is documented below.
	Route []RouteInitParameters `json:"route,omitempty" tf:"route,omitempty"`

	// Specifies an array of one or more subnets associating with the route table.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`

	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type RouteTableV1Observation struct {

	// Specifies the time (UTC) when the route table is created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the supplementary information about the route table.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the route object list. The route object
	// is documented below.
	Route []RouteObservation `json:"route,omitempty" tf:"route,omitempty"`

	// Specifies an array of one or more subnets associating with the route table.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`

	// Specifies the time (UTC) when the route table is updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type RouteTableV1Parameters struct {

	// Specifies the supplementary information about the route table.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the route object list. The route object
	// is documented below.
	// +kubebuilder:validation:Optional
	Route []RouteParameters `json:"route,omitempty" tf:"route,omitempty"`

	// Specifies an array of one or more subnets associating with the route table.
	// +kubebuilder:validation:Optional
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`

	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// RouteTableV1Spec defines the desired state of RouteTableV1
type RouteTableV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteTableV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouteTableV1InitParameters `json:"initProvider,omitempty"`
}

// RouteTableV1Status defines the observed state of RouteTableV1.
type RouteTableV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteTableV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RouteTableV1 is the Schema for the RouteTableV1s API. Manages a VPC Route Table resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RouteTableV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   RouteTableV1Spec   `json:"spec"`
	Status RouteTableV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableV1List contains a list of RouteTableV1s
type RouteTableV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTableV1 `json:"items"`
}

// Repository type metadata.
var (
	RouteTableV1_Kind             = "RouteTableV1"
	RouteTableV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteTableV1_Kind}.String()
	RouteTableV1_KindAPIVersion   = RouteTableV1_Kind + "." + CRDGroupVersion.String()
	RouteTableV1_GroupVersionKind = CRDGroupVersion.WithKind(RouteTableV1_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteTableV1{}, &RouteTableV1List{})
}
