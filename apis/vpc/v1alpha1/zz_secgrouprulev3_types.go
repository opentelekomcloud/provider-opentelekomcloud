// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecgroupRuleV3InitParameters struct {

	// Specifies the action of the security group rule. Supported values: allow, deny. Default value: allow.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Provides supplementary information about the security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies inbound or outbound direction of a security group rule. Supported values: ingress (inbound direction), egress (outbound direction).
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the IP version. Supported values: IPv4, IPv6. Default: IPv4 .
	EtherType *string `json:"etherType,omitempty" tf:"ether_type,omitempty"`

	MultiPort *string `json:"multiPort,omitempty" tf:"multi_port,omitempty"`

	// Specifies the rule priority in a security group. The value is from 1 to 100. The value 1 indicates the highest priority. Default value: 1.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the protocol type. The value can be icmp, tcp, udp, icmpv6 or an IP number (0 to 255). If the parameter is left blank, all protocols are supported. When the protocol is icmpv6, IP version should be IPv6. When the protocol is icmp, IP version should be IPv4.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the ID of the remote security group, which allows or denies traffic to and from the security group. The value has to be the ID of an existing security group. The parameter is mutually exclusive with parameter remote_ip_prefix.
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote IP address. If direction is set to egress, the parameter specifies the source IP address. If direction is set to ingress, the parameter specifies the destination IP address. The value is an IP address or a CIDR block. The parameter is mutually exclusive with parameter remote_group_id. If this parameter is left blank, the remote IP address is not limited, and the traffic from all remote IP addresses is allowed or rejected.
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the ID of the security group to which the security group rule belongs.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecgroupRuleV3Observation struct {

	// Specifies the action of the security group rule. Supported values: allow, deny. Default value: allow.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Indicates the time when the security group rule was created. It is a UTC time in yyyy-MM-ddTHH:mm:ssZ format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Provides supplementary information about the security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies inbound or outbound direction of a security group rule. Supported values: ingress (inbound direction), egress (outbound direction).
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the IP version. Supported values: IPv4, IPv6. Default: IPv4 .
	EtherType *string `json:"etherType,omitempty" tf:"ether_type,omitempty"`

	// Security Group Rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MultiPort *string `json:"multiPort,omitempty" tf:"multi_port,omitempty"`

	// Specifies the rule priority in a security group. The value is from 1 to 100. The value 1 indicates the highest priority. Default value: 1.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Indicates the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the protocol type. The value can be icmp, tcp, udp, icmpv6 or an IP number (0 to 255). If the parameter is left blank, all protocols are supported. When the protocol is icmpv6, IP version should be IPv6. When the protocol is icmp, IP version should be IPv4.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Indicates the ID of the remote IP address group. The parameter value is mutually exclusive with parameters remote_ip_prefix and remote_group_id.
	RemoteAddressGroupID *string `json:"remoteAddressGroupId,omitempty" tf:"remote_address_group_id,omitempty"`

	// Specifies the ID of the remote security group, which allows or denies traffic to and from the security group. The value has to be the ID of an existing security group. The parameter is mutually exclusive with parameter remote_ip_prefix.
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote IP address. If direction is set to egress, the parameter specifies the source IP address. If direction is set to ingress, the parameter specifies the destination IP address. The value is an IP address or a CIDR block. The parameter is mutually exclusive with parameter remote_group_id. If this parameter is left blank, the remote IP address is not limited, and the traffic from all remote IP addresses is allowed or rejected.
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the ID of the security group to which the security group rule belongs.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Indicates the time when the security group rule was updated. It is a UTC time in yyyy-MM-ddTHH:mm:ssZ format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SecgroupRuleV3Parameters struct {

	// Specifies the action of the security group rule. Supported values: allow, deny. Default value: allow.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Provides supplementary information about the security group rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies inbound or outbound direction of a security group rule. Supported values: ingress (inbound direction), egress (outbound direction).
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the IP version. Supported values: IPv4, IPv6. Default: IPv4 .
	// +kubebuilder:validation:Optional
	EtherType *string `json:"etherType,omitempty" tf:"ether_type,omitempty"`

	// +kubebuilder:validation:Optional
	MultiPort *string `json:"multiPort,omitempty" tf:"multi_port,omitempty"`

	// Specifies the rule priority in a security group. The value is from 1 to 100. The value 1 indicates the highest priority. Default value: 1.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the protocol type. The value can be icmp, tcp, udp, icmpv6 or an IP number (0 to 255). If the parameter is left blank, all protocols are supported. When the protocol is icmpv6, IP version should be IPv6. When the protocol is icmp, IP version should be IPv4.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the ID of the remote security group, which allows or denies traffic to and from the security group. The value has to be the ID of an existing security group. The parameter is mutually exclusive with parameter remote_ip_prefix.
	// +kubebuilder:validation:Optional
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote IP address. If direction is set to egress, the parameter specifies the source IP address. If direction is set to ingress, the parameter specifies the destination IP address. The value is an IP address or a CIDR block. The parameter is mutually exclusive with parameter remote_group_id. If this parameter is left blank, the remote IP address is not limited, and the traffic from all remote IP addresses is allowed or rejected.
	// +kubebuilder:validation:Optional
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the ID of the security group to which the security group rule belongs.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

// SecgroupRuleV3Spec defines the desired state of SecgroupRuleV3
type SecgroupRuleV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecgroupRuleV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecgroupRuleV3InitParameters `json:"initProvider,omitempty"`
}

// SecgroupRuleV3Status defines the observed state of SecgroupRuleV3.
type SecgroupRuleV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecgroupRuleV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecgroupRuleV3 is the Schema for the SecgroupRuleV3s API. Manages a VPC Security Group Rule v3 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SecgroupRuleV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.direction) || (has(self.initProvider) && has(self.initProvider.direction))",message="spec.forProvider.direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	Spec   SecgroupRuleV3Spec   `json:"spec"`
	Status SecgroupRuleV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupRuleV3List contains a list of SecgroupRuleV3s
type SecgroupRuleV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecgroupRuleV3 `json:"items"`
}

// Repository type metadata.
var (
	SecgroupRuleV3_Kind             = "SecgroupRuleV3"
	SecgroupRuleV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecgroupRuleV3_Kind}.String()
	SecgroupRuleV3_KindAPIVersion   = SecgroupRuleV3_Kind + "." + CRDGroupVersion.String()
	SecgroupRuleV3_GroupVersionKind = CRDGroupVersion.WithKind(SecgroupRuleV3_Kind)
)

func init() {
	SchemeBuilder.Register(&SecgroupRuleV3{}, &SecgroupRuleV3List{})
}
