// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecgroupV3InitParameters struct {

	// Security group description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project to which the security group belongs. Default: 0.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A unique name for the security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SecgroupV3Observation struct {

	// Indicates the time when the security group was created. It is a UTC time in yyyy-MM-ddTHH:mm:ssZ format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Security group description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project to which the security group belongs. Default: 0.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Security Group ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Indicates the time when the security group was updated. It is a UTC time in yyyy-MM-ddTHH:mm:ssZ format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SecgroupV3Parameters struct {

	// Security group description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project to which the security group belongs. Default: 0.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A unique name for the security group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SecgroupV3Spec defines the desired state of SecgroupV3
type SecgroupV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecgroupV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecgroupV3InitParameters `json:"initProvider,omitempty"`
}

// SecgroupV3Status defines the observed state of SecgroupV3.
type SecgroupV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecgroupV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecgroupV3 is the Schema for the SecgroupV3s API. Manages a VPC Security Group resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SecgroupV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SecgroupV3Spec   `json:"spec"`
	Status SecgroupV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupV3List contains a list of SecgroupV3s
type SecgroupV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecgroupV3 `json:"items"`
}

// Repository type metadata.
var (
	SecgroupV3_Kind             = "SecgroupV3"
	SecgroupV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecgroupV3_Kind}.String()
	SecgroupV3_KindAPIVersion   = SecgroupV3_Kind + "." + CRDGroupVersion.String()
	SecgroupV3_GroupVersionKind = CRDGroupVersion.WithKind(SecgroupV3_Kind)
)

func init() {
	SchemeBuilder.Register(&SecgroupV3{}, &SecgroupV3List{})
}
