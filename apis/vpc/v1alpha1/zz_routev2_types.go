/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteV2InitParameters struct {

	// Specifies the destination IP address or CIDR block. Changing this creates a new Route.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies the next hop. If the route type is peering, enter the VPC peering connection ID. Changing this creates a new Route.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the tenant ID. Only the administrator can specify the tenant ID of other tenant. Changing this creates a new Route.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies the route type. Currently, the value can only be peering. Changing this creates a new Route.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the VPC for which a route is to be added. Changing this creates a new Route.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type RouteV2Observation struct {

	// Specifies the destination IP address or CIDR block. Changing this creates a new Route.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The route ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the next hop. If the route type is peering, enter the VPC peering connection ID. Changing this creates a new Route.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the tenant ID. Only the administrator can specify the tenant ID of other tenant. Changing this creates a new Route.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies the route type. Currently, the value can only be peering. Changing this creates a new Route.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the VPC for which a route is to be added. Changing this creates a new Route.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type RouteV2Parameters struct {

	// Specifies the destination IP address or CIDR block. Changing this creates a new Route.
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Specifies the next hop. If the route type is peering, enter the VPC peering connection ID. Changing this creates a new Route.
	// +kubebuilder:validation:Optional
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the tenant ID. Only the administrator can specify the tenant ID of other tenant. Changing this creates a new Route.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies the route type. Currently, the value can only be peering. Changing this creates a new Route.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the VPC for which a route is to be added. Changing this creates a new Route.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// RouteV2Spec defines the desired state of RouteV2
type RouteV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouteV2InitParameters `json:"initProvider,omitempty"`
}

// RouteV2Status defines the observed state of RouteV2.
type RouteV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RouteV2 is the Schema for the RouteV2s API. Manages a VPC Route Table resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type RouteV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nexthop) || (has(self.initProvider) && has(self.initProvider.nexthop))",message="spec.forProvider.nexthop is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   RouteV2Spec   `json:"spec"`
	Status RouteV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteV2List contains a list of RouteV2s
type RouteV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteV2 `json:"items"`
}

// Repository type metadata.
var (
	RouteV2_Kind             = "RouteV2"
	RouteV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteV2_Kind}.String()
	RouteV2_KindAPIVersion   = RouteV2_Kind + "." + CRDGroupVersion.String()
	RouteV2_GroupVersionKind = CRDGroupVersion.WithKind(RouteV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteV2{}, &RouteV2List{})
}
