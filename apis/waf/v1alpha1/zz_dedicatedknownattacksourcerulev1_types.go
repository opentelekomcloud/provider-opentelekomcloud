/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedKnownAttackSourceRuleV1InitParameters struct {

	// Block duration, in seconds.
	// If prefix long is selected for the rule type, the value for block_time ranges from 301 to 1800.
	// If prefix short is selected for the rule type, the value for block_time ranges from 0 to 300.
	BlockTime *float64 `json:"blockTime,omitempty" tf:"block_time,omitempty"`

	// Type of the know attack source rule.
	// Enumeration values:
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Rule description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type DedicatedKnownAttackSourceRuleV1Observation struct {

	// Block duration, in seconds.
	// If prefix long is selected for the rule type, the value for block_time ranges from 301 to 1800.
	// If prefix short is selected for the rule type, the value for block_time ranges from 0 to 300.
	BlockTime *float64 `json:"blockTime,omitempty" tf:"block_time,omitempty"`

	// Type of the know attack source rule.
	// Enumeration values:
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Timestamp the rule is created.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Rule description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type DedicatedKnownAttackSourceRuleV1Parameters struct {

	// Block duration, in seconds.
	// If prefix long is selected for the rule type, the value for block_time ranges from 301 to 1800.
	// If prefix short is selected for the rule type, the value for block_time ranges from 0 to 300.
	// +kubebuilder:validation:Optional
	BlockTime *float64 `json:"blockTime,omitempty" tf:"block_time,omitempty"`

	// Type of the know attack source rule.
	// Enumeration values:
	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Rule description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

// DedicatedKnownAttackSourceRuleV1Spec defines the desired state of DedicatedKnownAttackSourceRuleV1
type DedicatedKnownAttackSourceRuleV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedKnownAttackSourceRuleV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedKnownAttackSourceRuleV1InitParameters `json:"initProvider,omitempty"`
}

// DedicatedKnownAttackSourceRuleV1Status defines the observed state of DedicatedKnownAttackSourceRuleV1.
type DedicatedKnownAttackSourceRuleV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedKnownAttackSourceRuleV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DedicatedKnownAttackSourceRuleV1 is the Schema for the DedicatedKnownAttackSourceRuleV1s API. Manages a WAF Dedicated Known Attack Source Rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DedicatedKnownAttackSourceRuleV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.blockTime) || (has(self.initProvider) && has(self.initProvider.blockTime))",message="spec.forProvider.blockTime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.category) || (has(self.initProvider) && has(self.initProvider.category))",message="spec.forProvider.category is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	Spec   DedicatedKnownAttackSourceRuleV1Spec   `json:"spec"`
	Status DedicatedKnownAttackSourceRuleV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedKnownAttackSourceRuleV1List contains a list of DedicatedKnownAttackSourceRuleV1s
type DedicatedKnownAttackSourceRuleV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedKnownAttackSourceRuleV1 `json:"items"`
}

// Repository type metadata.
var (
	DedicatedKnownAttackSourceRuleV1_Kind             = "DedicatedKnownAttackSourceRuleV1"
	DedicatedKnownAttackSourceRuleV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedKnownAttackSourceRuleV1_Kind}.String()
	DedicatedKnownAttackSourceRuleV1_KindAPIVersion   = DedicatedKnownAttackSourceRuleV1_Kind + "." + CRDGroupVersion.String()
	DedicatedKnownAttackSourceRuleV1_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedKnownAttackSourceRuleV1_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedKnownAttackSourceRuleV1{}, &DedicatedKnownAttackSourceRuleV1List{})
}
