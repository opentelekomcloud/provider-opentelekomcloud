// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedAlarmMaskingRuleV1.
func (mg *DedicatedAlarmMaskingRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedAntiCrawlerRuleV1.
func (mg *DedicatedAntiCrawlerRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedAntiLeakageRuleV1.
func (mg *DedicatedAntiLeakageRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedBlacklistRuleV1.
func (mg *DedicatedBlacklistRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedCcRuleV1.
func (mg *DedicatedCcRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedCertificateV1.
func (mg *DedicatedCertificateV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedDataMaskingRuleV1.
func (mg *DedicatedDataMaskingRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedDomainV1.
func (mg *DedicatedDomainV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedGeoIPRuleV1.
func (mg *DedicatedGeoIPRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedInstanceV1.
func (mg *DedicatedInstanceV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedKnownAttackSourceRuleV1.
func (mg *DedicatedKnownAttackSourceRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedPolicyV1.
func (mg *DedicatedPolicyV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedPreciseProtectionRuleV1.
func (mg *DedicatedPreciseProtectionRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedReferenceTableV1.
func (mg *DedicatedReferenceTableV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this DedicatedWebTamperRuleV1.
func (mg *DedicatedWebTamperRuleV1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
