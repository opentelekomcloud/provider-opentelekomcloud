// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionInitParameters struct {

	// Action type. Changing this creates a new rule.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Protection page content. Changing this creates a new rule.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// User identifier. The value is fixed at referer. Changing this creates a new rule.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

type ActionObservation struct {

	// Action type. Changing this creates a new rule.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Protection page content. Changing this creates a new rule.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// User identifier. The value is fixed at referer. Changing this creates a new rule.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

type ActionParameters struct {

	// Action type. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	Category *string `json:"category" tf:"category,omitempty"`

	// Protection page content. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// User identifier. The value is fixed at referer. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

type DedicatedCcRuleV1ConditionsInitParameters struct {

	// Field type. The value can be url, ip, params, cookie, or header.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Content of the conditions. This parameter is mandatory when the suffix of logic_operation is not any or all. Changing this creates a new rule.
	Contents []*string `json:"contents,omitempty" tf:"contents,omitempty"`

	// Subfield. When category is set to params, cookie, or header, set this parameter based on site requirements. This parameter is mandatory. Changing this creates a new rule.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// Logic for matching the condition.
	LogicOperation *string `json:"logicOperation,omitempty" tf:"logic_operation,omitempty"`

	// Reference table ID. This parameter is mandatory when the suffix of logic_operation is any or all. The reference table type must be the same as the category type. Changing this creates a new rule.
	ValueListID *string `json:"valueListId,omitempty" tf:"value_list_id,omitempty"`
}

type DedicatedCcRuleV1ConditionsObservation struct {

	// Field type. The value can be url, ip, params, cookie, or header.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Content of the conditions. This parameter is mandatory when the suffix of logic_operation is not any or all. Changing this creates a new rule.
	Contents []*string `json:"contents,omitempty" tf:"contents,omitempty"`

	// Subfield. When category is set to params, cookie, or header, set this parameter based on site requirements. This parameter is mandatory. Changing this creates a new rule.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// Logic for matching the condition.
	LogicOperation *string `json:"logicOperation,omitempty" tf:"logic_operation,omitempty"`

	// Reference table ID. This parameter is mandatory when the suffix of logic_operation is any or all. The reference table type must be the same as the category type. Changing this creates a new rule.
	ValueListID *string `json:"valueListId,omitempty" tf:"value_list_id,omitempty"`
}

type DedicatedCcRuleV1ConditionsParameters struct {

	// Field type. The value can be url, ip, params, cookie, or header.
	// +kubebuilder:validation:Optional
	Category *string `json:"category" tf:"category,omitempty"`

	// Content of the conditions. This parameter is mandatory when the suffix of logic_operation is not any or all. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	Contents []*string `json:"contents,omitempty" tf:"contents,omitempty"`

	// Subfield. When category is set to params, cookie, or header, set this parameter based on site requirements. This parameter is mandatory. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// Logic for matching the condition.
	// +kubebuilder:validation:Optional
	LogicOperation *string `json:"logicOperation" tf:"logic_operation,omitempty"`

	// Reference table ID. This parameter is mandatory when the suffix of logic_operation is any or all. The reference table type must be the same as the category type. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	ValueListID *string `json:"valueListId,omitempty" tf:"value_list_id,omitempty"`
}

type DedicatedCcRuleV1InitParameters struct {

	// Protection action to take if the number of requests reaches the upper limit. Changing this creates a new rule.
	// The conditions block supports:
	Action []ActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Rate limit conditions of the CC protection rule. Changing this creates a new rule.
	// The conditions block supports:
	Conditions []DedicatedCcRuleV1ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Rule description. Changing this creates a new rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rate limit frequency based on the number of requests. The value ranges from 1 to 2,147,483,647. Changing this creates a new rule.
	LimitNum *float64 `json:"limitNum,omitempty" tf:"limit_num,omitempty"`

	// Rate limit period, in seconds. The value ranges from 1 to 3,600. Changing this creates a new rule.
	LimitPeriod *float64 `json:"limitPeriod,omitempty" tf:"limit_period,omitempty"`

	// Block duration, in seconds. The value ranges from 0 to 65,535. Specifies the period within which access is blocked. An error page is displayed in this period. Changing this creates a new rule.
	LockTime *float64 `json:"lockTime,omitempty" tf:"lock_time,omitempty"`

	// Protection mode of the CC attack protection rule. Changing this creates a new rule. Valid Options are:
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the category. The value is referer. Changing this creates a new rule.
	TagCategory *string `json:"tagCategory,omitempty" tf:"tag_category,omitempty"`

	// Specifies the category content. Changing this creates a new rule.
	TagContents []*string `json:"tagContents,omitempty" tf:"tag_contents,omitempty"`

	// User identifier. Changing this creates a new rule.
	// If tag_type is set to cookie, this parameter indicates cookie name.
	// If tag_type is set to header, this parameter indicates header name.
	TagIndex *string `json:"tagIndex,omitempty" tf:"tag_index,omitempty"`

	// Rate limit mode. Changing this creates a new rule. Valid Options are:
	TagType *string `json:"tagType,omitempty" tf:"tag_type,omitempty"`

	// Path to be protected in the CC attack protection rule. Changing this creates a new rule.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Allowable frequency based on the number of requests. The value ranges from 0 to 2,147,483,647. This parameter is required only when the protection action type is dynamic_block. Changing this creates a new rule.
	UnlockNum *float64 `json:"unlockNum,omitempty" tf:"unlock_num,omitempty"`
}

type DedicatedCcRuleV1Observation struct {

	// Protection action to take if the number of requests reaches the upper limit. Changing this creates a new rule.
	// The conditions block supports:
	Action []ActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	// Rate limit conditions of the CC protection rule. Changing this creates a new rule.
	// The conditions block supports:
	Conditions []DedicatedCcRuleV1ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Timestamp the rule is created.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Rule description. Changing this creates a new rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Rate limit frequency based on the number of requests. The value ranges from 1 to 2,147,483,647. Changing this creates a new rule.
	LimitNum *float64 `json:"limitNum,omitempty" tf:"limit_num,omitempty"`

	// Rate limit period, in seconds. The value ranges from 1 to 3,600. Changing this creates a new rule.
	LimitPeriod *float64 `json:"limitPeriod,omitempty" tf:"limit_period,omitempty"`

	// Block duration, in seconds. The value ranges from 0 to 65,535. Specifies the period within which access is blocked. An error page is displayed in this period. Changing this creates a new rule.
	LockTime *float64 `json:"lockTime,omitempty" tf:"lock_time,omitempty"`

	// Protection mode of the CC attack protection rule. Changing this creates a new rule. Valid Options are:
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Rule status.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the category. The value is referer. Changing this creates a new rule.
	TagCategory *string `json:"tagCategory,omitempty" tf:"tag_category,omitempty"`

	// Specifies the category content. Changing this creates a new rule.
	TagContents []*string `json:"tagContents,omitempty" tf:"tag_contents,omitempty"`

	// User identifier. Changing this creates a new rule.
	// If tag_type is set to cookie, this parameter indicates cookie name.
	// If tag_type is set to header, this parameter indicates header name.
	TagIndex *string `json:"tagIndex,omitempty" tf:"tag_index,omitempty"`

	// Rate limit mode. Changing this creates a new rule. Valid Options are:
	TagType *string `json:"tagType,omitempty" tf:"tag_type,omitempty"`

	// Path to be protected in the CC attack protection rule. Changing this creates a new rule.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Allowable frequency based on the number of requests. The value ranges from 0 to 2,147,483,647. This parameter is required only when the protection action type is dynamic_block. Changing this creates a new rule.
	UnlockNum *float64 `json:"unlockNum,omitempty" tf:"unlock_num,omitempty"`
}

type DedicatedCcRuleV1Parameters struct {

	// Protection action to take if the number of requests reaches the upper limit. Changing this creates a new rule.
	// The conditions block supports:
	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Rate limit conditions of the CC protection rule. Changing this creates a new rule.
	// The conditions block supports:
	// +kubebuilder:validation:Optional
	Conditions []DedicatedCcRuleV1ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Rule description. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rate limit frequency based on the number of requests. The value ranges from 1 to 2,147,483,647. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	LimitNum *float64 `json:"limitNum,omitempty" tf:"limit_num,omitempty"`

	// Rate limit period, in seconds. The value ranges from 1 to 3,600. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	LimitPeriod *float64 `json:"limitPeriod,omitempty" tf:"limit_period,omitempty"`

	// Block duration, in seconds. The value ranges from 0 to 65,535. Specifies the period within which access is blocked. An error page is displayed in this period. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	LockTime *float64 `json:"lockTime,omitempty" tf:"lock_time,omitempty"`

	// Protection mode of the CC attack protection rule. Changing this creates a new rule. Valid Options are:
	// +kubebuilder:validation:Optional
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The WAF policy ID. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the category. The value is referer. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	TagCategory *string `json:"tagCategory,omitempty" tf:"tag_category,omitempty"`

	// Specifies the category content. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	TagContents []*string `json:"tagContents,omitempty" tf:"tag_contents,omitempty"`

	// User identifier. Changing this creates a new rule.
	// If tag_type is set to cookie, this parameter indicates cookie name.
	// If tag_type is set to header, this parameter indicates header name.
	// +kubebuilder:validation:Optional
	TagIndex *string `json:"tagIndex,omitempty" tf:"tag_index,omitempty"`

	// Rate limit mode. Changing this creates a new rule. Valid Options are:
	// +kubebuilder:validation:Optional
	TagType *string `json:"tagType,omitempty" tf:"tag_type,omitempty"`

	// Path to be protected in the CC attack protection rule. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Allowable frequency based on the number of requests. The value ranges from 0 to 2,147,483,647. This parameter is required only when the protection action type is dynamic_block. Changing this creates a new rule.
	// +kubebuilder:validation:Optional
	UnlockNum *float64 `json:"unlockNum,omitempty" tf:"unlock_num,omitempty"`
}

// DedicatedCcRuleV1Spec defines the desired state of DedicatedCcRuleV1
type DedicatedCcRuleV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedCcRuleV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedCcRuleV1InitParameters `json:"initProvider,omitempty"`
}

// DedicatedCcRuleV1Status defines the observed state of DedicatedCcRuleV1.
type DedicatedCcRuleV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedCcRuleV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DedicatedCcRuleV1 is the Schema for the DedicatedCcRuleV1s API. Manages a WAF Dedicated CC Rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DedicatedCcRuleV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.limitNum) || (has(self.initProvider) && has(self.initProvider.limitNum))",message="spec.forProvider.limitNum is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.limitPeriod) || (has(self.initProvider) && has(self.initProvider.limitPeriod))",message="spec.forProvider.limitPeriod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tagType) || (has(self.initProvider) && has(self.initProvider.tagType))",message="spec.forProvider.tagType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   DedicatedCcRuleV1Spec   `json:"spec"`
	Status DedicatedCcRuleV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedCcRuleV1List contains a list of DedicatedCcRuleV1s
type DedicatedCcRuleV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedCcRuleV1 `json:"items"`
}

// Repository type metadata.
var (
	DedicatedCcRuleV1_Kind             = "DedicatedCcRuleV1"
	DedicatedCcRuleV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedCcRuleV1_Kind}.String()
	DedicatedCcRuleV1_KindAPIVersion   = DedicatedCcRuleV1_Kind + "." + CRDGroupVersion.String()
	DedicatedCcRuleV1_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedCcRuleV1_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedCcRuleV1{}, &DedicatedCcRuleV1List{})
}
