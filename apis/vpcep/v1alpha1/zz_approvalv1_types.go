// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApprovalV1InitParameters struct {

	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	// +listType=set
	Endpoints []*string `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ApprovalV1Observation struct {

	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections []ConnectionsObservation `json:"connections,omitempty" tf:"connections,omitempty"`

	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	// +listType=set
	Endpoints []*string `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// The unique ID in UUID format which equals to the ID of the VPC endpoint service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The VPC endpoint service region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ApprovalV1Parameters struct {

	// Specifies the list of VPC endpoint IDs which accepted to connect to VPC endpoint
	// service. The VPC endpoints will be rejected when the resource was destroyed.
	// +kubebuilder:validation:Optional
	// +listType=set
	Endpoints []*string `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Specifies the ID of the VPC endpoint service. Changing this creates a new
	// resource.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ConnectionsInitParameters struct {
}

type ConnectionsObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The description of the VPC endpoint service connection.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The user's domain ID.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// The unique ID of the VPC endpoint.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// The packet ID of the VPC endpoint.
	PacketID *float64 `json:"packetId,omitempty" tf:"packet_id,omitempty"`

	// The connection status of the VPC endpoint.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ConnectionsParameters struct {
}

// ApprovalV1Spec defines the desired state of ApprovalV1
type ApprovalV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApprovalV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApprovalV1InitParameters `json:"initProvider,omitempty"`
}

// ApprovalV1Status defines the observed state of ApprovalV1.
type ApprovalV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApprovalV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ApprovalV1 is the Schema for the ApprovalV1s API. Manages a VPCEP Endpoint resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ApprovalV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoints) || (has(self.initProvider) && has(self.initProvider.endpoints))",message="spec.forProvider.endpoints is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceId) || (has(self.initProvider) && has(self.initProvider.serviceId))",message="spec.forProvider.serviceId is a required parameter"
	Spec   ApprovalV1Spec   `json:"spec"`
	Status ApprovalV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApprovalV1List contains a list of ApprovalV1s
type ApprovalV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApprovalV1 `json:"items"`
}

// Repository type metadata.
var (
	ApprovalV1_Kind             = "ApprovalV1"
	ApprovalV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApprovalV1_Kind}.String()
	ApprovalV1_KindAPIVersion   = ApprovalV1_Kind + "." + CRDGroupVersion.String()
	ApprovalV1_GroupVersionKind = CRDGroupVersion.WithKind(ApprovalV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ApprovalV1{}, &ApprovalV1List{})
}
