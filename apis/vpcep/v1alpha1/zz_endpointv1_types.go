// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointV1InitParameters struct {

	// Specifies whether to create a private domain name. The default value is false.
	EnableDNS *bool `json:"enableDns,omitempty" tf:"enable_dns,omitempty"`

	// Specifies whether to enable access control.
	// This parameter is available only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// Specifies the IP address for accessing the associated VPC endpoint service.
	PortIP *string `json:"portIp,omitempty" tf:"port_ip,omitempty"`

	// Lists the IDs of route tables.
	// +listType=set
	RouteTables []*string `json:"routeTables,omitempty" tf:"route_tables,omitempty"`

	// Specifies the ID of the VPC endpoint service.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// The value must be the ID of the subnet (OpenStack network) created in the VPC specified
	// by vpc_id and in the format of the UUID.
	// This parameter is mandatory only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Lists the resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (OpenStack router) where the VPC endpoint is to be created.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies an array of whitelisted IPs for controlling access to the VPC endpoint.
	// IPv4 addresses or CIDR blocks can be specified to control access when you create a VPC endpoint.
	// This parameter is mandatory only when you create a VPC endpoint for connecting to an interface VPC endpoint service.
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type EndpointV1Observation struct {

	// Specifies the domain name for accessing the associated VPC endpoint service.
	// This parameter is only available when enable_dns is set to true.
	// +listType=set
	DNSNames []*string `json:"dnsNames,omitempty" tf:"dns_names,omitempty"`

	// Specifies whether to create a private domain name. The default value is false.
	EnableDNS *bool `json:"enableDns,omitempty" tf:"enable_dns,omitempty"`

	// Specifies whether to enable access control.
	// This parameter is available only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// ID of VPC endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the packet ID of the VPC endpoint.
	MarkerID *float64 `json:"markerId,omitempty" tf:"marker_id,omitempty"`

	// Specifies the IP address for accessing the associated VPC endpoint service.
	PortIP *string `json:"portIp,omitempty" tf:"port_ip,omitempty"`

	// Specifies the project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Lists the IDs of route tables.
	// +listType=set
	RouteTables []*string `json:"routeTables,omitempty" tf:"route_tables,omitempty"`

	// Specifies the ID of the VPC endpoint service.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// Specifies the name of the VPC endpoint service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Specifies the type of the VPC endpoint service that is associated with the VPC endpoint.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// The value must be the ID of the subnet (OpenStack network) created in the VPC specified
	// by vpc_id and in the format of the UUID.
	// This parameter is mandatory only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Lists the resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (OpenStack router) where the VPC endpoint is to be created.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies an array of whitelisted IPs for controlling access to the VPC endpoint.
	// IPv4 addresses or CIDR blocks can be specified to control access when you create a VPC endpoint.
	// This parameter is mandatory only when you create a VPC endpoint for connecting to an interface VPC endpoint service.
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type EndpointV1Parameters struct {

	// Specifies whether to create a private domain name. The default value is false.
	// +kubebuilder:validation:Optional
	EnableDNS *bool `json:"enableDns,omitempty" tf:"enable_dns,omitempty"`

	// Specifies whether to enable access control.
	// This parameter is available only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	// +kubebuilder:validation:Optional
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// Specifies the IP address for accessing the associated VPC endpoint service.
	// +kubebuilder:validation:Optional
	PortIP *string `json:"portIp,omitempty" tf:"port_ip,omitempty"`

	// Lists the IDs of route tables.
	// +kubebuilder:validation:Optional
	// +listType=set
	RouteTables []*string `json:"routeTables,omitempty" tf:"route_tables,omitempty"`

	// Specifies the ID of the VPC endpoint service.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// The value must be the ID of the subnet (OpenStack network) created in the VPC specified
	// by vpc_id and in the format of the UUID.
	// This parameter is mandatory only if you create a VPC endpoint for connecting to an interface VPC endpoint service.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Lists the resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (OpenStack router) where the VPC endpoint is to be created.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies an array of whitelisted IPs for controlling access to the VPC endpoint.
	// IPv4 addresses or CIDR blocks can be specified to control access when you create a VPC endpoint.
	// This parameter is mandatory only when you create a VPC endpoint for connecting to an interface VPC endpoint service.
	// +kubebuilder:validation:Optional
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

// EndpointV1Spec defines the desired state of EndpointV1
type EndpointV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointV1InitParameters `json:"initProvider,omitempty"`
}

// EndpointV1Status defines the observed state of EndpointV1.
type EndpointV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EndpointV1 is the Schema for the EndpointV1s API. Manages a VPCEP Endpoint resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type EndpointV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceId) || (has(self.initProvider) && has(self.initProvider.serviceId))",message="spec.forProvider.serviceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   EndpointV1Spec   `json:"spec"`
	Status EndpointV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointV1List contains a list of EndpointV1s
type EndpointV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointV1 `json:"items"`
}

// Repository type metadata.
var (
	EndpointV1_Kind             = "EndpointV1"
	EndpointV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointV1_Kind}.String()
	EndpointV1_KindAPIVersion   = EndpointV1_Kind + "." + CRDGroupVersion.String()
	EndpointV1_GroupVersionKind = CRDGroupVersion.WithKind(EndpointV1_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointV1{}, &EndpointV1List{})
}
