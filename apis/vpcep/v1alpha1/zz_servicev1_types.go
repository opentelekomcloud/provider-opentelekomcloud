// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortInitParameters struct {

	// Specifies the port for accessing the VPC endpoint.
	ClientPort *float64 `json:"clientPort,omitempty" tf:"client_port,omitempty"`

	// Specifies the protocol used in port mappings. The value can be TCP or UDP.
	// The default value is TCP.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the port for accessing the VPC endpoint service.
	ServerPort *float64 `json:"serverPort,omitempty" tf:"server_port,omitempty"`
}

type PortObservation struct {

	// Specifies the port for accessing the VPC endpoint.
	ClientPort *float64 `json:"clientPort,omitempty" tf:"client_port,omitempty"`

	// Specifies the protocol used in port mappings. The value can be TCP or UDP.
	// The default value is TCP.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the port for accessing the VPC endpoint service.
	ServerPort *float64 `json:"serverPort,omitempty" tf:"server_port,omitempty"`
}

type PortParameters struct {

	// Specifies the port for accessing the VPC endpoint.
	// +kubebuilder:validation:Optional
	ClientPort *float64 `json:"clientPort" tf:"client_port,omitempty"`

	// Specifies the protocol used in port mappings. The value can be TCP or UDP.
	// The default value is TCP.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the port for accessing the VPC endpoint service.
	// +kubebuilder:validation:Optional
	ServerPort *float64 `json:"serverPort" tf:"server_port,omitempty"`
}

type ServiceV1InitParameters struct {

	// Specifies whether connection approval is required.
	ApprovalEnabled *bool `json:"approvalEnabled,omitempty" tf:"approval_enabled,omitempty"`

	// Specifies the name of the VPC endpoint service.
	// The value contains a maximum of 16 characters, including letters, digits, underscores (_), and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the cluster associated with the target VPCEP resource.
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Lists the port mappings opened to the VPC endpoint service. See below for the details.
	Port []PortInitParameters `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// The value is as follows:
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the resource type.
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// Specifies the type of the VPC endpoint service.
	// Only your private services can be configured into interface VPC endpoint services.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// Specifies whether the client IP address and port number or marker_id information is
	// transmitted to the server.
	// This parameter is available only when the server can parse fields tcp option and tcp payload.
	TCPProxy *string `json:"tcpProxy,omitempty" tf:"tcp_proxy,omitempty"`

	// Map of the resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (router) to which the backend resource of the VPC endpoint service belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies the ID of the virtual NIC to which the virtual IP address is bound.
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// Lists of domain IDs of target users.
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type ServiceV1Observation struct {

	// Specifies whether connection approval is required.
	ApprovalEnabled *bool `json:"approvalEnabled,omitempty" tf:"approval_enabled,omitempty"`

	// ID of VPC endpoint service
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the VPC endpoint service.
	// The value contains a maximum of 16 characters, including letters, digits, underscores (_), and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the cluster associated with the target VPCEP resource.
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Lists the port mappings opened to the VPC endpoint service. See below for the details.
	Port []PortObservation `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// The value is as follows:
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the resource type.
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// Specifies the type of the VPC endpoint service.
	// Only your private services can be configured into interface VPC endpoint services.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// Specifies whether the client IP address and port number or marker_id information is
	// transmitted to the server.
	// This parameter is available only when the server can parse fields tcp option and tcp payload.
	TCPProxy *string `json:"tcpProxy,omitempty" tf:"tcp_proxy,omitempty"`

	// Map of the resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (router) to which the backend resource of the VPC endpoint service belongs.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies the ID of the virtual NIC to which the virtual IP address is bound.
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// Lists of domain IDs of target users.
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type ServiceV1Parameters struct {

	// Specifies whether connection approval is required.
	// +kubebuilder:validation:Optional
	ApprovalEnabled *bool `json:"approvalEnabled,omitempty" tf:"approval_enabled,omitempty"`

	// Specifies the name of the VPC endpoint service.
	// The value contains a maximum of 16 characters, including letters, digits, underscores (_), and hyphens (-).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the cluster associated with the target VPCEP resource.
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Lists the port mappings opened to the VPC endpoint service. See below for the details.
	// +kubebuilder:validation:Optional
	Port []PortParameters `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// The value is as follows:
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the resource type.
	// +kubebuilder:validation:Optional
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// Specifies the type of the VPC endpoint service.
	// Only your private services can be configured into interface VPC endpoint services.
	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// Specifies whether the client IP address and port number or marker_id information is
	// transmitted to the server.
	// This parameter is available only when the server can parse fields tcp option and tcp payload.
	// +kubebuilder:validation:Optional
	TCPProxy *string `json:"tcpProxy,omitempty" tf:"tcp_proxy,omitempty"`

	// Map of the resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC (router) to which the backend resource of the VPC endpoint service belongs.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Specifies the ID of the virtual NIC to which the virtual IP address is bound.
	// +kubebuilder:validation:Optional
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// Lists of domain IDs of target users.
	// +kubebuilder:validation:Optional
	// +listType=set
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

// ServiceV1Spec defines the desired state of ServiceV1
type ServiceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceV1InitParameters `json:"initProvider,omitempty"`
}

// ServiceV1Status defines the observed state of ServiceV1.
type ServiceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceV1 is the Schema for the ServiceV1s API. Manages a VPCEP Service resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ServiceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portId) || (has(self.initProvider) && has(self.initProvider.portId))",message="spec.forProvider.portId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverType) || (has(self.initProvider) && has(self.initProvider.serverType))",message="spec.forProvider.serverType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   ServiceV1Spec   `json:"spec"`
	Status ServiceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceV1List contains a list of ServiceV1s
type ServiceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceV1 `json:"items"`
}

// Repository type metadata.
var (
	ServiceV1_Kind             = "ServiceV1"
	ServiceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceV1_Kind}.String()
	ServiceV1_KindAPIVersion   = ServiceV1_Kind + "." + CRDGroupVersion.String()
	ServiceV1_GroupVersionKind = CRDGroupVersion.WithKind(ServiceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceV1{}, &ServiceV1List{})
}
