// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatRuleV2InitParameters struct {

	// Specifies port used by ECSs or
	// BMSs to provide services for external systems. Changing this creates a new DNAT rule.
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// Specifies the ID of the floating IP address.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a EIPV1 in vpc to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a EIPV1 in vpc to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Specifies port used by ECSs or BMSs
	// to provide services for external systems. Changing this creates a new resource.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// ID of the NAT gateway this DNAT rule belongs to.
	// Changing this creates a new DNAT rule.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/nat/v1alpha1.GatewayV2
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a GatewayV2 in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a GatewayV2 in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port ID of an ECS or a BMS.
	// This parameter and private_ip are alternative. Changing this creates a
	// new DNAT rule.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.PortV2
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Reference to a PortV2 in networking to populate portId.
	// +kubebuilder:validation:Optional
	PortIDRef *v1.Reference `json:"portIdRef,omitempty" tf:"-"`

	// Selector for a PortV2 in networking to populate portId.
	// +kubebuilder:validation:Optional
	PortIDSelector *v1.Selector `json:"portIdSelector,omitempty" tf:"-"`

	// Specifies the private IP address of a
	// user, for example, the IP address of a VPC for dedicated connection.
	// This parameter and port_id are alternative. Changing this creates a new DNAT rule.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type. Currently,
	// tcp, udp, and any are supported. Changing this creates a new DNAT rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type DnatRuleV2Observation struct {

	// DNAT rule creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies port used by ECSs or
	// BMSs to provide services for external systems. Changing this creates a new DNAT rule.
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// The actual floating IP address.
	FloatingIPAddress *string `json:"floatingIpAddress,omitempty" tf:"floating_ip_address,omitempty"`

	// Specifies the ID of the floating IP address.
	// Changing this creates a new resource.
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies port used by ECSs or BMSs
	// to provide services for external systems. Changing this creates a new resource.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// ID of the NAT gateway this DNAT rule belongs to.
	// Changing this creates a new DNAT rule.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Specifies the port ID of an ECS or a BMS.
	// This parameter and private_ip are alternative. Changing this creates a
	// new DNAT rule.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the private IP address of a
	// user, for example, the IP address of a VPC for dedicated connection.
	// This parameter and port_id are alternative. Changing this creates a new DNAT rule.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type. Currently,
	// tcp, udp, and any are supported. Changing this creates a new DNAT rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// DNAT rule status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type DnatRuleV2Parameters struct {

	// Specifies port used by ECSs or
	// BMSs to provide services for external systems. Changing this creates a new DNAT rule.
	// +kubebuilder:validation:Optional
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// Specifies the ID of the floating IP address.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.EIPV1
	// +kubebuilder:validation:Optional
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a EIPV1 in vpc to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a EIPV1 in vpc to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Specifies port used by ECSs or BMSs
	// to provide services for external systems. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// ID of the NAT gateway this DNAT rule belongs to.
	// Changing this creates a new DNAT rule.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/nat/v1alpha1.GatewayV2
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a GatewayV2 in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a GatewayV2 in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port ID of an ECS or a BMS.
	// This parameter and private_ip are alternative. Changing this creates a
	// new DNAT rule.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1.PortV2
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Reference to a PortV2 in networking to populate portId.
	// +kubebuilder:validation:Optional
	PortIDRef *v1.Reference `json:"portIdRef,omitempty" tf:"-"`

	// Selector for a PortV2 in networking to populate portId.
	// +kubebuilder:validation:Optional
	PortIDSelector *v1.Selector `json:"portIdSelector,omitempty" tf:"-"`

	// Specifies the private IP address of a
	// user, for example, the IP address of a VPC for dedicated connection.
	// This parameter and port_id are alternative. Changing this creates a new DNAT rule.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type. Currently,
	// tcp, udp, and any are supported. Changing this creates a new DNAT rule.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

// DnatRuleV2Spec defines the desired state of DnatRuleV2
type DnatRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatRuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DnatRuleV2InitParameters `json:"initProvider,omitempty"`
}

// DnatRuleV2Status defines the observed state of DnatRuleV2.
type DnatRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DnatRuleV2 is the Schema for the DnatRuleV2s API. Manages a NAT DNAT Rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DnatRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.externalServicePort) || (has(self.initProvider) && has(self.initProvider.externalServicePort))",message="spec.forProvider.externalServicePort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.internalServicePort) || (has(self.initProvider) && has(self.initProvider.internalServicePort))",message="spec.forProvider.internalServicePort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   DnatRuleV2Spec   `json:"spec"`
	Status DnatRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRuleV2List contains a list of DnatRuleV2s
type DnatRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnatRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	DnatRuleV2_Kind             = "DnatRuleV2"
	DnatRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnatRuleV2_Kind}.String()
	DnatRuleV2_KindAPIVersion   = DnatRuleV2_Kind + "." + CRDGroupVersion.String()
	DnatRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(DnatRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DnatRuleV2{}, &DnatRuleV2List{})
}
