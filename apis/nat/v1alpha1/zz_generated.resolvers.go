/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/networking/v1alpha1"
	v1alpha1 "github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1"
	common "github.com/opentelekomcloud/provider-opentelekomcloud/config/common"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DnatRuleV2.
func (mg *DnatRuleV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FloatingIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FloatingIPIDRef,
		Selector:     mg.Spec.ForProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.EIPV1List{},
			Managed: &v1alpha1.EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIPID")
	}
	mg.Spec.ForProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NATGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NATGatewayIDRef,
		Selector:     mg.Spec.ForProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayV2List{},
			Managed: &GatewayV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATGatewayID")
	}
	mg.Spec.ForProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PortID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PortIDRef,
		Selector:     mg.Spec.ForProvider.PortIDSelector,
		To: reference.To{
			List:    &v1alpha11.PortV2List{},
			Managed: &v1alpha11.PortV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PortID")
	}
	mg.Spec.ForProvider.PortID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PortIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FloatingIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FloatingIPIDRef,
		Selector:     mg.Spec.InitProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.EIPV1List{},
			Managed: &v1alpha1.EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIPID")
	}
	mg.Spec.InitProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NATGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NATGatewayIDRef,
		Selector:     mg.Spec.InitProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayV2List{},
			Managed: &GatewayV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATGatewayID")
	}
	mg.Spec.InitProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PortID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PortIDRef,
		Selector:     mg.Spec.InitProvider.PortIDSelector,
		To: reference.To{
			List:    &v1alpha11.PortV2List{},
			Managed: &v1alpha11.PortV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PortID")
	}
	mg.Spec.InitProvider.PortID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PortIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayV2.
func (mg *GatewayV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InternalNetworkID),
		Extract:      common.ExtractNetworkID(),
		Reference:    mg.Spec.ForProvider.InternalNetworkIDRef,
		Selector:     mg.Spec.ForProvider.InternalNetworkIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InternalNetworkID")
	}
	mg.Spec.ForProvider.InternalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InternalNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouterIDRef,
		Selector:     mg.Spec.ForProvider.RouterIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouterID")
	}
	mg.Spec.ForProvider.RouterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InternalNetworkID),
		Extract:      common.ExtractNetworkID(),
		Reference:    mg.Spec.InitProvider.InternalNetworkIDRef,
		Selector:     mg.Spec.InitProvider.InternalNetworkIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InternalNetworkID")
	}
	mg.Spec.InitProvider.InternalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InternalNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.RouterIDRef,
		Selector:     mg.Spec.InitProvider.RouterIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcV1List{},
			Managed: &v1alpha1.VpcV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RouterID")
	}
	mg.Spec.InitProvider.RouterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SnatRuleV2.
func (mg *SnatRuleV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FloatingIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FloatingIPIDRef,
		Selector:     mg.Spec.ForProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.EIPV1List{},
			Managed: &v1alpha1.EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIPID")
	}
	mg.Spec.ForProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NATGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NATGatewayIDRef,
		Selector:     mg.Spec.ForProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayV2List{},
			Managed: &GatewayV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATGatewayID")
	}
	mg.Spec.ForProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      common.ExtractNetworkID(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FloatingIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FloatingIPIDRef,
		Selector:     mg.Spec.InitProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.EIPV1List{},
			Managed: &v1alpha1.EIPV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIPID")
	}
	mg.Spec.InitProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NATGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NATGatewayIDRef,
		Selector:     mg.Spec.InitProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayV2List{},
			Managed: &GatewayV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATGatewayID")
	}
	mg.Spec.InitProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
		Extract:      common.ExtractNetworkID(),
		Reference:    mg.Spec.InitProvider.NetworkIDRef,
		Selector:     mg.Spec.InitProvider.NetworkIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV1List{},
			Managed: &v1alpha1.SubnetV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}
