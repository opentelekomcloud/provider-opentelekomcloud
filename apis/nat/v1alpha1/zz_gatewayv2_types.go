/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayV2InitParameters struct {

	// The description of the NAT Gateway.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the network this NAT Gateway connects to.
	// Changing this creates a new NAT Gateway.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.SubnetV1
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractNetworkID()
	InternalNetworkID *string `json:"internalNetworkId,omitempty" tf:"internal_network_id,omitempty"`

	// Reference to a SubnetV1 in vpc to populate internalNetworkId.
	// +kubebuilder:validation:Optional
	InternalNetworkIDRef *v1.Reference `json:"internalNetworkIdRef,omitempty" tf:"-"`

	// Selector for a SubnetV1 in vpc to populate internalNetworkId.
	// +kubebuilder:validation:Optional
	InternalNetworkIDSelector *v1.Selector `json:"internalNetworkIdSelector,omitempty" tf:"-"`

	// The name of the NAT Gateway.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the router (or VPC) this NAT Gateway belongs to. Changing
	// this creates a new NAT Gateway.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.VpcV1
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// Reference to a VpcV1 in vpc to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDRef *v1.Reference `json:"routerIdRef,omitempty" tf:"-"`

	// Selector for a VpcV1 in vpc to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDSelector *v1.Selector `json:"routerIdSelector,omitempty" tf:"-"`

	// The specification of the NAT Gateway, valid values are "0","1", "2", "3", "4".
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Tags key/value pairs to associate with the NAT Gateway.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The target tenant ID in which to allocate the NAT
	// Gateway. Changing this creates a new NAT Gateway.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type GatewayV2Observation struct {

	// The description of the NAT Gateway.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the network this NAT Gateway connects to.
	// Changing this creates a new NAT Gateway.
	InternalNetworkID *string `json:"internalNetworkId,omitempty" tf:"internal_network_id,omitempty"`

	// The name of the NAT Gateway.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the router (or VPC) this NAT Gateway belongs to. Changing
	// this creates a new NAT Gateway.
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// The specification of the NAT Gateway, valid values are "0","1", "2", "3", "4".
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Tags key/value pairs to associate with the NAT Gateway.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The target tenant ID in which to allocate the NAT
	// Gateway. Changing this creates a new NAT Gateway.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type GatewayV2Parameters struct {

	// The description of the NAT Gateway.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the network this NAT Gateway connects to.
	// Changing this creates a new NAT Gateway.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.SubnetV1
	// +crossplane:generate:reference:extractor=github.com/opentelekomcloud/provider-opentelekomcloud/config/common.ExtractNetworkID()
	// +kubebuilder:validation:Optional
	InternalNetworkID *string `json:"internalNetworkId,omitempty" tf:"internal_network_id,omitempty"`

	// Reference to a SubnetV1 in vpc to populate internalNetworkId.
	// +kubebuilder:validation:Optional
	InternalNetworkIDRef *v1.Reference `json:"internalNetworkIdRef,omitempty" tf:"-"`

	// Selector for a SubnetV1 in vpc to populate internalNetworkId.
	// +kubebuilder:validation:Optional
	InternalNetworkIDSelector *v1.Selector `json:"internalNetworkIdSelector,omitempty" tf:"-"`

	// The name of the NAT Gateway.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the router (or VPC) this NAT Gateway belongs to. Changing
	// this creates a new NAT Gateway.
	// +crossplane:generate:reference:type=github.com/opentelekomcloud/provider-opentelekomcloud/apis/vpc/v1alpha1.VpcV1
	// +kubebuilder:validation:Optional
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// Reference to a VpcV1 in vpc to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDRef *v1.Reference `json:"routerIdRef,omitempty" tf:"-"`

	// Selector for a VpcV1 in vpc to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDSelector *v1.Selector `json:"routerIdSelector,omitempty" tf:"-"`

	// The specification of the NAT Gateway, valid values are "0","1", "2", "3", "4".
	// +kubebuilder:validation:Optional
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// Tags key/value pairs to associate with the NAT Gateway.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The target tenant ID in which to allocate the NAT
	// Gateway. Changing this creates a new NAT Gateway.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// GatewayV2Spec defines the desired state of GatewayV2
type GatewayV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GatewayV2InitParameters `json:"initProvider,omitempty"`
}

// GatewayV2Status defines the observed state of GatewayV2.
type GatewayV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GatewayV2 is the Schema for the GatewayV2s API. Manages a NAT Gateway resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type GatewayV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   GatewayV2Spec   `json:"spec"`
	Status GatewayV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayV2List contains a list of GatewayV2s
type GatewayV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayV2 `json:"items"`
}

// Repository type metadata.
var (
	GatewayV2_Kind             = "GatewayV2"
	GatewayV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayV2_Kind}.String()
	GatewayV2_KindAPIVersion   = GatewayV2_Kind + "." + CRDGroupVersion.String()
	GatewayV2_GroupVersionKind = CRDGroupVersion.WithKind(GatewayV2_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayV2{}, &GatewayV2List{})
}
