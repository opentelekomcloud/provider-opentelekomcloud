// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsProtectionV1InitParameters struct {

	// Specifies the desired IPS virtual patching status: 0 (disabled), 1 (enabled).
	FeatureStatus *float64 `json:"featureStatus,omitempty" tf:"feature_status,omitempty"`

	// Specifies the IPS patch type. Its value can only be 2 (virtual patch). Default: 2.
	IpsType *float64 `json:"ipsType,omitempty" tf:"ips_type,omitempty"`

	// Specifies the IPS protection mode: 0 (observation mode), 1 (strict mode), 2 (medium mode), or 3 (loose mode).
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

type IpsProtectionV1Observation struct {

	// Indicates the basic defense status: 0 (disabled), 1 (enabled).
	BasicDefenseStatus *float64 `json:"basicDefenseStatus,omitempty" tf:"basic_defense_status,omitempty"`

	// Specifies the desired IPS virtual patching status: 0 (disabled), 1 (enabled).
	FeatureStatus *float64 `json:"featureStatus,omitempty" tf:"feature_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the IPS protection mode ID.
	IpsProtectionModeID *string `json:"ipsProtectionModeId,omitempty" tf:"ips_protection_mode_id,omitempty"`

	// Indicates the IPS switch ID.
	IpsSwitchID *string `json:"ipsSwitchId,omitempty" tf:"ips_switch_id,omitempty"`

	// Specifies the IPS patch type. Its value can only be 2 (virtual patch). Default: 2.
	IpsType *float64 `json:"ipsType,omitempty" tf:"ips_type,omitempty"`

	// Specifies the IPS protection mode: 0 (observation mode), 1 (strict mode), 2 (medium mode), or 3 (loose mode).
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

type IpsProtectionV1Parameters struct {

	// Specifies the desired IPS virtual patching status: 0 (disabled), 1 (enabled).
	// +kubebuilder:validation:Optional
	FeatureStatus *float64 `json:"featureStatus,omitempty" tf:"feature_status,omitempty"`

	// Specifies the IPS patch type. Its value can only be 2 (virtual patch). Default: 2.
	// +kubebuilder:validation:Optional
	IpsType *float64 `json:"ipsType,omitempty" tf:"ips_type,omitempty"`

	// Specifies the IPS protection mode: 0 (observation mode), 1 (strict mode), 2 (medium mode), or 3 (loose mode).
	// +kubebuilder:validation:Optional
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

// IpsProtectionV1Spec defines the desired state of IpsProtectionV1
type IpsProtectionV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpsProtectionV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpsProtectionV1InitParameters `json:"initProvider,omitempty"`
}

// IpsProtectionV1Status defines the observed state of IpsProtectionV1.
type IpsProtectionV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpsProtectionV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IpsProtectionV1 is the Schema for the IpsProtectionV1s API. Configure IPS protection associated with CFW firewall within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type IpsProtectionV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.featureStatus) || (has(self.initProvider) && has(self.initProvider.featureStatus))",message="spec.forProvider.featureStatus is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectId) || (has(self.initProvider) && has(self.initProvider.objectId))",message="spec.forProvider.objectId is a required parameter"
	Spec   IpsProtectionV1Spec   `json:"spec"`
	Status IpsProtectionV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpsProtectionV1List contains a list of IpsProtectionV1s
type IpsProtectionV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpsProtectionV1 `json:"items"`
}

// Repository type metadata.
var (
	IpsProtectionV1_Kind             = "IpsProtectionV1"
	IpsProtectionV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpsProtectionV1_Kind}.String()
	IpsProtectionV1_KindAPIVersion   = IpsProtectionV1_Kind + "." + CRDGroupVersion.String()
	IpsProtectionV1_GroupVersionKind = CRDGroupVersion.WithKind(IpsProtectionV1_Kind)
)

func init() {
	SchemeBuilder.Register(&IpsProtectionV1{}, &IpsProtectionV1List{})
}
