// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainNameGroupV1InitParameters struct {

	// Specifies the description of the domain name group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the domain name information list. The domain_names structure is documented below.
	DomainNames []DomainNamesInitParameters `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Specifies the domain name group typ: 0 (application domain name group), 1 (network domain name group).
	DomainSetType *float64 `json:"domainSetType,omitempty" tf:"domain_set_type,omitempty"`

	// Specifies the Firewall ID.
	FirewallID *string `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// Specifies the CFW domain name group name. The CFW domain name group name of the same type is unique in the same firewall.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

type DomainNameGroupV1Observation struct {

	// Indicates the configuration status: -1 (unconfigured), 0 (configuration failed), 1 (configuration succeeded), 2 (configuring), 3 (normal), or 4 (abnormal).
	ConfigStatus *float64 `json:"configStatus,omitempty" tf:"config_status,omitempty"`

	// Specifies the description of the domain name group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the domain name information list. The domain_names structure is documented below.
	DomainNames []DomainNamesObservation `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Specifies the domain name group typ: 0 (application domain name group), 1 (network domain name group).
	DomainSetType *float64 `json:"domainSetType,omitempty" tf:"domain_set_type,omitempty"`

	// Specifies the Firewall ID.
	FirewallID *string `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// Indicates the domain name group ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the CFW domain name group name. The CFW domain name group name of the same type is unique in the same firewall.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// Indicates the number of times a domain name group is referenced by rules.
	RefCount *float64 `json:"refCount,omitempty" tf:"ref_count,omitempty"`

	// Indicates the used rule ID list. The rules structure is as follows:
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type DomainNameGroupV1Parameters struct {

	// Specifies the description of the domain name group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the domain name information list. The domain_names structure is documented below.
	// +kubebuilder:validation:Optional
	DomainNames []DomainNamesParameters `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Specifies the domain name group typ: 0 (application domain name group), 1 (network domain name group).
	// +kubebuilder:validation:Optional
	DomainSetType *float64 `json:"domainSetType,omitempty" tf:"domain_set_type,omitempty"`

	// Specifies the Firewall ID.
	// +kubebuilder:validation:Optional
	FirewallID *string `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// Specifies the CFW domain name group name. The CFW domain name group name of the same type is unique in the same firewall.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

type DomainNamesInitParameters struct {

	// Specifies the domain name description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the domain name, for example, www.test.com.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`
}

type DomainNamesObservation struct {

	// Specifies the domain name description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates the domain name ID.
	DomainAddressID *string `json:"domainAddressId,omitempty" tf:"domain_address_id,omitempty"`

	// Specifies the domain name, for example, www.test.com.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`
}

type DomainNamesParameters struct {

	// Specifies the domain name description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the domain name, for example, www.test.com.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`
}

type RulesInitParameters struct {
}

type RulesObservation struct {

	// Indicates the domain name group ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the CFW domain name group name. The CFW domain name group name of the same type is unique in the same firewall.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RulesParameters struct {
}

// DomainNameGroupV1Spec defines the desired state of DomainNameGroupV1
type DomainNameGroupV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainNameGroupV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainNameGroupV1InitParameters `json:"initProvider,omitempty"`
}

// DomainNameGroupV1Status defines the observed state of DomainNameGroupV1.
type DomainNameGroupV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainNameGroupV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainNameGroupV1 is the Schema for the DomainNameGroupV1s API. Manages a CFW domain name group resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type DomainNameGroupV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainNames) || (has(self.initProvider) && has(self.initProvider.domainNames))",message="spec.forProvider.domainNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firewallId) || (has(self.initProvider) && has(self.initProvider.firewallId))",message="spec.forProvider.firewallId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectId) || (has(self.initProvider) && has(self.initProvider.objectId))",message="spec.forProvider.objectId is a required parameter"
	Spec   DomainNameGroupV1Spec   `json:"spec"`
	Status DomainNameGroupV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainNameGroupV1List contains a list of DomainNameGroupV1s
type DomainNameGroupV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainNameGroupV1 `json:"items"`
}

// Repository type metadata.
var (
	DomainNameGroupV1_Kind             = "DomainNameGroupV1"
	DomainNameGroupV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainNameGroupV1_Kind}.String()
	DomainNameGroupV1_KindAPIVersion   = DomainNameGroupV1_Kind + "." + CRDGroupVersion.String()
	DomainNameGroupV1_GroupVersionKind = CRDGroupVersion.WithKind(DomainNameGroupV1_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainNameGroupV1{}, &DomainNameGroupV1List{})
}
