// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlacklistWhitelistRuleV1InitParameters struct {

	// Specifies the IP address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Specifies the Internet protocol type of an address: 0 (IPv4), 1 (IPv6).
	AddressType *float64 `json:"addressType,omitempty" tf:"address_type,omitempty"`

	// Specifies the description of the blacklist or whitelist rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the address direction: 0 (source), 1 (destination).
	Direction *float64 `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the list type. 4 (blacklist), 5 (whitelist).
	ListType *float64 `json:"listType,omitempty" tf:"list_type,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// Specifies the destination port.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the Protocol type: 6 (TCP), 17 (UDP), 1 (ICMP), 58 (ICMPv6), or -1 (any).
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type BlacklistWhitelistRuleV1Observation struct {

	// Specifies the IP address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Specifies the Internet protocol type of an address: 0 (IPv4), 1 (IPv6).
	AddressType *float64 `json:"addressType,omitempty" tf:"address_type,omitempty"`

	// Specifies the description of the blacklist or whitelist rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the address direction: 0 (source), 1 (destination).
	Direction *float64 `json:"direction,omitempty" tf:"direction,omitempty"`

	// Indicates the blacklist or whitelist rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the list type. 4 (blacklist), 5 (whitelist).
	ListType *float64 `json:"listType,omitempty" tf:"list_type,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// Specifies the destination port.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the Protocol type: 6 (TCP), 17 (UDP), 1 (ICMP), 58 (ICMPv6), or -1 (any).
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type BlacklistWhitelistRuleV1Parameters struct {

	// Specifies the IP address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Specifies the Internet protocol type of an address: 0 (IPv4), 1 (IPv6).
	// +kubebuilder:validation:Optional
	AddressType *float64 `json:"addressType,omitempty" tf:"address_type,omitempty"`

	// Specifies the description of the blacklist or whitelist rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the address direction: 0 (source), 1 (destination).
	// +kubebuilder:validation:Optional
	Direction *float64 `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the list type. 4 (blacklist), 5 (whitelist).
	// +kubebuilder:validation:Optional
	ListType *float64 `json:"listType,omitempty" tf:"list_type,omitempty"`

	// Specifies the protected object ID, which is used to distinguish between Internet border protection and VPC border protection after a cloud firewall is created. If the value of type is 0, the protected object ID belongs to the Internet border. If the value of type is 1, the protected object ID belongs to the VPC border.
	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// Specifies the destination port.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies the Protocol type: 6 (TCP), 17 (UDP), 1 (ICMP), 58 (ICMPv6), or -1 (any).
	// +kubebuilder:validation:Optional
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

// BlacklistWhitelistRuleV1Spec defines the desired state of BlacklistWhitelistRuleV1
type BlacklistWhitelistRuleV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlacklistWhitelistRuleV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BlacklistWhitelistRuleV1InitParameters `json:"initProvider,omitempty"`
}

// BlacklistWhitelistRuleV1Status defines the observed state of BlacklistWhitelistRuleV1.
type BlacklistWhitelistRuleV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlacklistWhitelistRuleV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BlacklistWhitelistRuleV1 is the Schema for the BlacklistWhitelistRuleV1s API. Manages a CFW blacklist/whitelist rule resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type BlacklistWhitelistRuleV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.addressType) || (has(self.initProvider) && has(self.initProvider.addressType))",message="spec.forProvider.addressType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.direction) || (has(self.initProvider) && has(self.initProvider.direction))",message="spec.forProvider.direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.listType) || (has(self.initProvider) && has(self.initProvider.listType))",message="spec.forProvider.listType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectId) || (has(self.initProvider) && has(self.initProvider.objectId))",message="spec.forProvider.objectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   BlacklistWhitelistRuleV1Spec   `json:"spec"`
	Status BlacklistWhitelistRuleV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlacklistWhitelistRuleV1List contains a list of BlacklistWhitelistRuleV1s
type BlacklistWhitelistRuleV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BlacklistWhitelistRuleV1 `json:"items"`
}

// Repository type metadata.
var (
	BlacklistWhitelistRuleV1_Kind             = "BlacklistWhitelistRuleV1"
	BlacklistWhitelistRuleV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BlacklistWhitelistRuleV1_Kind}.String()
	BlacklistWhitelistRuleV1_KindAPIVersion   = BlacklistWhitelistRuleV1_Kind + "." + CRDGroupVersion.String()
	BlacklistWhitelistRuleV1_GroupVersionKind = CRDGroupVersion.WithKind(BlacklistWhitelistRuleV1_Kind)
)

func init() {
	SchemeBuilder.Register(&BlacklistWhitelistRuleV1{}, &BlacklistWhitelistRuleV1List{})
}
