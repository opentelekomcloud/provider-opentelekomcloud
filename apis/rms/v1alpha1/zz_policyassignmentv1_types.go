// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomPolicyInitParameters struct {

	// Specifies the authorization type of the custom policy.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Specifies the authorization value of the custom policy.
	// +mapType=granular
	AuthValue map[string]*string `json:"authValue,omitempty" tf:"auth_value,omitempty"`

	// Specifies the function URN used to create the custom policy.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`
}

type CustomPolicyObservation struct {

	// Specifies the authorization type of the custom policy.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Specifies the authorization value of the custom policy.
	// +mapType=granular
	AuthValue map[string]*string `json:"authValue,omitempty" tf:"auth_value,omitempty"`

	// Specifies the function URN used to create the custom policy.
	FunctionUrn *string `json:"functionUrn,omitempty" tf:"function_urn,omitempty"`
}

type CustomPolicyParameters struct {

	// Specifies the authorization type of the custom policy.
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType" tf:"auth_type,omitempty"`

	// Specifies the authorization value of the custom policy.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AuthValue map[string]*string `json:"authValue,omitempty" tf:"auth_value,omitempty"`

	// Specifies the function URN used to create the custom policy.
	// +kubebuilder:validation:Optional
	FunctionUrn *string `json:"functionUrn" tf:"function_urn,omitempty"`
}

type PolicyAssignmentV1InitParameters struct {

	// Specifies the configuration of the custom policy.
	// The object structure is documented below.
	CustomPolicy []CustomPolicyInitParameters `json:"customPolicy,omitempty" tf:"custom_policy,omitempty"`

	// Specifies the description of the policy assignment, which contain maximum of
	// 512 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the policy assignment.
	// The valid length is limited from 1 to 64.
	// Change this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the rule definition of the policy assignment.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the period of the policy assignment.
	// The valid values are as follows:
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the ID of the built-in policy definition.
	// This parameter and custom_policy are alternative.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// Specifies the configuration used to filter resources.
	// The object structure is documented below.
	PolicyFilter []PolicyFilterInitParameters `json:"policyFilter,omitempty" tf:"policy_filter,omitempty"`

	// Specifies the expect status of the policy.
	// The valid values are Enabled and Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PolicyAssignmentV1Observation struct {

	// The creation time of the policy assignment.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the configuration of the custom policy.
	// The object structure is documented below.
	CustomPolicy []CustomPolicyObservation `json:"customPolicy,omitempty" tf:"custom_policy,omitempty"`

	// Specifies the description of the policy assignment, which contain maximum of
	// 512 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the policy assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the policy assignment.
	// The valid length is limited from 1 to 64.
	// Change this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the rule definition of the policy assignment.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the period of the policy assignment.
	// The valid values are as follows:
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the ID of the built-in policy definition.
	// This parameter and custom_policy are alternative.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// Specifies the configuration used to filter resources.
	// The object structure is documented below.
	PolicyFilter []PolicyFilterObservation `json:"policyFilter,omitempty" tf:"policy_filter,omitempty"`

	// Specifies the expect status of the policy.
	// The valid values are Enabled and Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The type of the policy assignment.
	// The valid values are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The latest update time of the policy assignment.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type PolicyAssignmentV1Parameters struct {

	// Specifies the configuration of the custom policy.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	CustomPolicy []CustomPolicyParameters `json:"customPolicy,omitempty" tf:"custom_policy,omitempty"`

	// Specifies the description of the policy assignment, which contain maximum of
	// 512 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the policy assignment.
	// The valid length is limited from 1 to 64.
	// Change this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the rule definition of the policy assignment.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the period of the policy assignment.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the ID of the built-in policy definition.
	// This parameter and custom_policy are alternative.
	// +kubebuilder:validation:Optional
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// Specifies the configuration used to filter resources.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	PolicyFilter []PolicyFilterParameters `json:"policyFilter,omitempty" tf:"policy_filter,omitempty"`

	// Specifies the expect status of the policy.
	// The valid values are Enabled and Disabled.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PolicyFilterInitParameters struct {

	// Specifies the name of the region to which the filtered resources belong.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource ID used to filter a specified resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the service name to which the filtered resources belong.
	ResourceProvider *string `json:"resourceProvider,omitempty" tf:"resource_provider,omitempty"`

	// Specifies the resource type of the filtered resources.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specifies the tag name used to filter resources.
	// This parameter and resource_id are alternative.
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// Specifies the tag value used to filter resources.
	// Required if tag_key is set.
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type PolicyFilterObservation struct {

	// Specifies the name of the region to which the filtered resources belong.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource ID used to filter a specified resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the service name to which the filtered resources belong.
	ResourceProvider *string `json:"resourceProvider,omitempty" tf:"resource_provider,omitempty"`

	// Specifies the resource type of the filtered resources.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specifies the tag name used to filter resources.
	// This parameter and resource_id are alternative.
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// Specifies the tag value used to filter resources.
	// Required if tag_key is set.
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type PolicyFilterParameters struct {

	// Specifies the name of the region to which the filtered resources belong.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource ID used to filter a specified resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Specifies the service name to which the filtered resources belong.
	// +kubebuilder:validation:Optional
	ResourceProvider *string `json:"resourceProvider,omitempty" tf:"resource_provider,omitempty"`

	// Specifies the resource type of the filtered resources.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specifies the tag name used to filter resources.
	// This parameter and resource_id are alternative.
	// +kubebuilder:validation:Optional
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// Specifies the tag value used to filter resources.
	// Required if tag_key is set.
	// +kubebuilder:validation:Optional
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

// PolicyAssignmentV1Spec defines the desired state of PolicyAssignmentV1
type PolicyAssignmentV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyAssignmentV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyAssignmentV1InitParameters `json:"initProvider,omitempty"`
}

// PolicyAssignmentV1Status defines the observed state of PolicyAssignmentV1.
type PolicyAssignmentV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyAssignmentV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyAssignmentV1 is the Schema for the PolicyAssignmentV1s API. Manages an RMS Policy Assignment resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type PolicyAssignmentV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicyAssignmentV1Spec   `json:"spec"`
	Status PolicyAssignmentV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAssignmentV1List contains a list of PolicyAssignmentV1s
type PolicyAssignmentV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyAssignmentV1 `json:"items"`
}

// Repository type metadata.
var (
	PolicyAssignmentV1_Kind             = "PolicyAssignmentV1"
	PolicyAssignmentV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyAssignmentV1_Kind}.String()
	PolicyAssignmentV1_KindAPIVersion   = PolicyAssignmentV1_Kind + "." + CRDGroupVersion.String()
	PolicyAssignmentV1_GroupVersionKind = CRDGroupVersion.WithKind(PolicyAssignmentV1_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyAssignmentV1{}, &PolicyAssignmentV1List{})
}
