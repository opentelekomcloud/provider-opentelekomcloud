// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyAssignmentEvaluateV1InitParameters struct {

	// Specifies the ID of the policy assignment to evaluate.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`
}

type PolicyAssignmentEvaluateV1Observation struct {

	// The ID of the policy assignment evaluate.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the policy assignment to evaluate.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`
}

type PolicyAssignmentEvaluateV1Parameters struct {

	// Specifies the ID of the policy assignment to evaluate.
	// +kubebuilder:validation:Optional
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`
}

// PolicyAssignmentEvaluateV1Spec defines the desired state of PolicyAssignmentEvaluateV1
type PolicyAssignmentEvaluateV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyAssignmentEvaluateV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyAssignmentEvaluateV1InitParameters `json:"initProvider,omitempty"`
}

// PolicyAssignmentEvaluateV1Status defines the observed state of PolicyAssignmentEvaluateV1.
type PolicyAssignmentEvaluateV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyAssignmentEvaluateV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyAssignmentEvaluateV1 is the Schema for the PolicyAssignmentEvaluateV1s API. Manages an RMS Policy Assignment Evaluate resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type PolicyAssignmentEvaluateV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyAssignmentId) || (has(self.initProvider) && has(self.initProvider.policyAssignmentId))",message="spec.forProvider.policyAssignmentId is a required parameter"
	Spec   PolicyAssignmentEvaluateV1Spec   `json:"spec"`
	Status PolicyAssignmentEvaluateV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAssignmentEvaluateV1List contains a list of PolicyAssignmentEvaluateV1s
type PolicyAssignmentEvaluateV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyAssignmentEvaluateV1 `json:"items"`
}

// Repository type metadata.
var (
	PolicyAssignmentEvaluateV1_Kind             = "PolicyAssignmentEvaluateV1"
	PolicyAssignmentEvaluateV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyAssignmentEvaluateV1_Kind}.String()
	PolicyAssignmentEvaluateV1_KindAPIVersion   = PolicyAssignmentEvaluateV1_Kind + "." + CRDGroupVersion.String()
	PolicyAssignmentEvaluateV1_GroupVersionKind = CRDGroupVersion.WithKind(PolicyAssignmentEvaluateV1_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyAssignmentEvaluateV1{}, &PolicyAssignmentEvaluateV1List{})
}
