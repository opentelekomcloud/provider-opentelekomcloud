// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObsChannelInitParameters struct {

	// Specifies the OBS bucket name used for data dumping.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Specifies the OBS bucket prefix.
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies the region where this bucket is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ObsChannelObservation struct {

	// Specifies the OBS bucket name used for data dumping.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Specifies the OBS bucket prefix.
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies the region where this bucket is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ObsChannelParameters struct {

	// Specifies the OBS bucket name used for data dumping.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Specifies the OBS bucket prefix.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies the region where this bucket is located.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type ResourceRecorderV1InitParameters struct {

	// Specifies the IAM agency name which must include permissions
	// for sending notifications through SMN and for writing data into OBS.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies configurations of the OBS bucket used for data dumping.
	// The object structure is documented below.
	ObsChannel []ObsChannelInitParameters `json:"obsChannel,omitempty" tf:"obs_channel,omitempty"`

	// Specifies configurations of resource selector.
	// The object structure is documented below.
	Selector []SelectorInitParameters `json:"selector,omitempty" tf:"selector,omitempty"`

	// Specifies configurations of the SMN channel used to send notifications.
	// The object structure is documented below.
	SmnChannel []SmnChannelInitParameters `json:"smnChannel,omitempty" tf:"smn_channel,omitempty"`
}

type ResourceRecorderV1Observation struct {

	// Specifies the IAM agency name which must include permissions
	// for sending notifications through SMN and for writing data into OBS.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies configurations of the OBS bucket used for data dumping.
	// The object structure is documented below.
	ObsChannel []ObsChannelObservation `json:"obsChannel,omitempty" tf:"obs_channel,omitempty"`

	// The number of days for data storage.
	RetentionPeriod *float64 `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	// Specifies configurations of resource selector.
	// The object structure is documented below.
	Selector []SelectorObservation `json:"selector,omitempty" tf:"selector,omitempty"`

	// Specifies configurations of the SMN channel used to send notifications.
	// The object structure is documented below.
	SmnChannel []SmnChannelObservation `json:"smnChannel,omitempty" tf:"smn_channel,omitempty"`
}

type ResourceRecorderV1Parameters struct {

	// Specifies the IAM agency name which must include permissions
	// for sending notifications through SMN and for writing data into OBS.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies configurations of the OBS bucket used for data dumping.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	ObsChannel []ObsChannelParameters `json:"obsChannel,omitempty" tf:"obs_channel,omitempty"`

	// Specifies configurations of resource selector.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Selector []SelectorParameters `json:"selector,omitempty" tf:"selector,omitempty"`

	// Specifies configurations of the SMN channel used to send notifications.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	SmnChannel []SmnChannelParameters `json:"smnChannel,omitempty" tf:"smn_channel,omitempty"`
}

type SelectorInitParameters struct {

	// Specifies whether to select all supported resources.
	AllSupported *bool `json:"allSupported,omitempty" tf:"all_supported,omitempty"`

	// Specifies the resource type list.
	// +listType=set
	ResourceTypes []*string `json:"resourceTypes,omitempty" tf:"resource_types,omitempty"`
}

type SelectorObservation struct {

	// Specifies whether to select all supported resources.
	AllSupported *bool `json:"allSupported,omitempty" tf:"all_supported,omitempty"`

	// Specifies the resource type list.
	// +listType=set
	ResourceTypes []*string `json:"resourceTypes,omitempty" tf:"resource_types,omitempty"`
}

type SelectorParameters struct {

	// Specifies whether to select all supported resources.
	// +kubebuilder:validation:Optional
	AllSupported *bool `json:"allSupported" tf:"all_supported,omitempty"`

	// Specifies the resource type list.
	// +kubebuilder:validation:Optional
	// +listType=set
	ResourceTypes []*string `json:"resourceTypes,omitempty" tf:"resource_types,omitempty"`
}

type SmnChannelInitParameters struct {

	// Specifies the SMN topic URN used to send notifications.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type SmnChannelObservation struct {

	// The project ID where this SMN topic is located.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region where this SMN topic is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the SMN topic URN used to send notifications.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type SmnChannelParameters struct {

	// Specifies the SMN topic URN used to send notifications.
	// +kubebuilder:validation:Optional
	TopicUrn *string `json:"topicUrn" tf:"topic_urn,omitempty"`
}

// ResourceRecorderV1Spec defines the desired state of ResourceRecorderV1
type ResourceRecorderV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceRecorderV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceRecorderV1InitParameters `json:"initProvider,omitempty"`
}

// ResourceRecorderV1Status defines the observed state of ResourceRecorderV1.
type ResourceRecorderV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceRecorderV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ResourceRecorderV1 is the Schema for the ResourceRecorderV1s API. Manages an RMS Resource Recorder within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type ResourceRecorderV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.agencyName) || (has(self.initProvider) && has(self.initProvider.agencyName))",message="spec.forProvider.agencyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.selector) || (has(self.initProvider) && has(self.initProvider.selector))",message="spec.forProvider.selector is a required parameter"
	Spec   ResourceRecorderV1Spec   `json:"spec"`
	Status ResourceRecorderV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceRecorderV1List contains a list of ResourceRecorderV1s
type ResourceRecorderV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceRecorderV1 `json:"items"`
}

// Repository type metadata.
var (
	ResourceRecorderV1_Kind             = "ResourceRecorderV1"
	ResourceRecorderV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceRecorderV1_Kind}.String()
	ResourceRecorderV1_KindAPIVersion   = ResourceRecorderV1_Kind + "." + CRDGroupVersion.String()
	ResourceRecorderV1_GroupVersionKind = CRDGroupVersion.WithKind(ResourceRecorderV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceRecorderV1{}, &ResourceRecorderV1List{})
}
