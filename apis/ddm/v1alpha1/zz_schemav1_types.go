// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabasesInitParameters struct {
}

type DatabasesObservation struct {

	// (uint64) Indicates the creation time.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Indicates the Number of shards.
	DBSlot *float64 `json:"dbSlot,omitempty" tf:"db_slot,omitempty"`

	// (String) ID of the RDS instance where the shard is located.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Indicates the shard name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the RDS instance where the shard is located
	RDSName *string `json:"rdsName,omitempty" tf:"rds_name,omitempty"`

	// (String) Indicates the shard status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (uint64) Indicates the update time.
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DatabasesParameters struct {
}

type RDSInitParameters struct {

	// Specifies the password of RDS admin.
	AdminPasswordSecretRef v1.SecretKeySelector `json:"adminPasswordSecretRef" tf:"-"`

	// Specifies the username of RDS admin.
	AdminUsernameSecretRef v1.SecretKeySelector `json:"adminUsernameSecretRef" tf:"-"`

	// Specifies the ID of the rds instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RDSObservation struct {

	// Specifies the ID of the rds instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RDSParameters struct {

	// Specifies the password of RDS admin.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef v1.SecretKeySelector `json:"adminPasswordSecretRef" tf:"-"`

	// Specifies the username of RDS admin.
	// +kubebuilder:validation:Optional
	AdminUsernameSecretRef v1.SecretKeySelector `json:"adminUsernameSecretRef" tf:"-"`

	// Specifies the ID of the rds instance.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type SchemaV1InitParameters struct {

	// Specifies the DDM instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the DDM schema name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  2 to 48 characters long. It must start with a letter and it can only contain etters, digits, and underscores (_).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default)
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// Specifies the rds instance information. The structure is described below.
	RDS []RDSInitParameters `json:"rds,omitempty" tf:"rds,omitempty"`

	// Specifies the sharding mode of the schema. The values for this can be cluster or single. Cluster indicates that the schema is in sharded mode. Single indicates that the schema is in unsharded mode.
	ShardMode *string `json:"shardMode,omitempty" tf:"shard_mode,omitempty"`

	// Specifies the number of shards in the same working mode. If shard_unit is not empty, the value is the product of shard_unit multiplied by the associated RDS instances. If shard_unit is left blank, the value must be greater than the number of associated RDS instances and less than or equal to the product of the associated RDS instances multiplied by 64.
	ShardNumber *float64 `json:"shardNumber,omitempty" tf:"shard_number,omitempty"`

	// Specifies the Number of shards per RDS instance. The value is 1 if the schema is unsharded. The value ranges from 1 to 64 if the schema is sharded.
	ShardUnit *float64 `json:"shardUnit,omitempty" tf:"shard_unit,omitempty"`
}

type SchemaV1Observation struct {

	// (uint64) Indicates the creation time.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (List) Indicates the IP address and port number for connecting to the schema.
	DataVips []*string `json:"dataVips,omitempty" tf:"data_vips,omitempty"`

	// (List) Indicates the Sharding information of the schema. The structure is described below.
	Databases []DatabasesObservation `json:"databases,omitempty" tf:"databases,omitempty"`

	// (String) Indicates the RDS ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the DDM instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the DDM schema name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  2 to 48 characters long. It must start with a letter and it can only contain etters, digits, and underscores (_).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default)
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// Specifies the rds instance information. The structure is described below.
	RDS []RDSObservation `json:"rds,omitempty" tf:"rds,omitempty"`

	// The region of the DDM instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the sharding mode of the schema. The values for this can be cluster or single. Cluster indicates that the schema is in sharded mode. Single indicates that the schema is in unsharded mode.
	ShardMode *string `json:"shardMode,omitempty" tf:"shard_mode,omitempty"`

	// Specifies the number of shards in the same working mode. If shard_unit is not empty, the value is the product of shard_unit multiplied by the associated RDS instances. If shard_unit is left blank, the value must be greater than the number of associated RDS instances and less than or equal to the product of the associated RDS instances multiplied by 64.
	ShardNumber *float64 `json:"shardNumber,omitempty" tf:"shard_number,omitempty"`

	// Specifies the Number of shards per RDS instance. The value is 1 if the schema is unsharded. The value ranges from 1 to 64 if the schema is sharded.
	ShardUnit *float64 `json:"shardUnit,omitempty" tf:"shard_unit,omitempty"`

	// (String) Indicates the DDM schema status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (uint64) Indicates the update time.
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (List) Indicates the associated RDS instances. The structure is described below.
	UsedRDS []UsedRDSObservation `json:"usedRds,omitempty" tf:"used_rds,omitempty"`
}

type SchemaV1Parameters struct {

	// Specifies the DDM instance ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the DDM schema name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  2 to 48 characters long. It must start with a letter and it can only contain etters, digits, and underscores (_).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default)
	// +kubebuilder:validation:Optional
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// Specifies the rds instance information. The structure is described below.
	// +kubebuilder:validation:Optional
	RDS []RDSParameters `json:"rds,omitempty" tf:"rds,omitempty"`

	// Specifies the sharding mode of the schema. The values for this can be cluster or single. Cluster indicates that the schema is in sharded mode. Single indicates that the schema is in unsharded mode.
	// +kubebuilder:validation:Optional
	ShardMode *string `json:"shardMode,omitempty" tf:"shard_mode,omitempty"`

	// Specifies the number of shards in the same working mode. If shard_unit is not empty, the value is the product of shard_unit multiplied by the associated RDS instances. If shard_unit is left blank, the value must be greater than the number of associated RDS instances and less than or equal to the product of the associated RDS instances multiplied by 64.
	// +kubebuilder:validation:Optional
	ShardNumber *float64 `json:"shardNumber,omitempty" tf:"shard_number,omitempty"`

	// Specifies the Number of shards per RDS instance. The value is 1 if the schema is unsharded. The value ranges from 1 to 64 if the schema is sharded.
	// +kubebuilder:validation:Optional
	ShardUnit *float64 `json:"shardUnit,omitempty" tf:"shard_unit,omitempty"`
}

type UsedRDSInitParameters struct {
}

type UsedRDSObservation struct {

	// (String) Indicates the RDS ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the RDS name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the RDS status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UsedRDSParameters struct {
}

// SchemaV1Spec defines the desired state of SchemaV1
type SchemaV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SchemaV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SchemaV1InitParameters `json:"initProvider,omitempty"`
}

// SchemaV1Status defines the observed state of SchemaV1.
type SchemaV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SchemaV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SchemaV1 is the Schema for the SchemaV1s API. Manages a DDM Schema resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type SchemaV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rds) || (has(self.initProvider) && has(self.initProvider.rds))",message="spec.forProvider.rds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shardMode) || (has(self.initProvider) && has(self.initProvider.shardMode))",message="spec.forProvider.shardMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shardNumber) || (has(self.initProvider) && has(self.initProvider.shardNumber))",message="spec.forProvider.shardNumber is a required parameter"
	Spec   SchemaV1Spec   `json:"spec"`
	Status SchemaV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SchemaV1List contains a list of SchemaV1s
type SchemaV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SchemaV1 `json:"items"`
}

// Repository type metadata.
var (
	SchemaV1_Kind             = "SchemaV1"
	SchemaV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SchemaV1_Kind}.String()
	SchemaV1_KindAPIVersion   = SchemaV1_Kind + "." + CRDGroupVersion.String()
	SchemaV1_GroupVersionKind = CRDGroupVersion.WithKind(SchemaV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SchemaV1{}, &SchemaV1List{})
}
