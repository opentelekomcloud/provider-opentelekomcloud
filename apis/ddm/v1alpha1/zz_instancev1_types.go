// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceV1InitParameters struct {

	// Specifies the list of availability zones.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Specifies the Engine ID of the instance.
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// Specifies the flavor ID of the instance nodes.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the DDM instance name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  4 to 64 characters long. It must start with a letter and it can only contain etters, digits, and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the disk encryption ID of the instance.
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the parameters group ID.
	ParamGroupID *string `json:"paramGroupId,omitempty" tf:"param_group_id,omitempty"`

	// Specifies the Administrator password of the DDM instance. it can be 8 to 32 characters long. It must be a combination of uppercase letters, lowercase letters, digits, and the following special characters: ~ ! @ # % ^ * - _ = + ?. It must be a strong password to improve security and prevent security risks such as brute force cracking.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default).
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// Specifies the security group ID of the DDM instance.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the subnet Network ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the timezone. Valid formats are UTC+12:00, UTC+11:00, ... ,UTC+01:00, UTC, UTC-01:00, ... , UTC-11:00, UTC-12:00
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Specifies the Administrator username of the DDM instance. It can be 1 to 32 characters long and can contain letters, digits, and underscores (_). It must start with a letter.
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`

	// Specifies the VPC ID.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type InstanceV1Observation struct {
	AccessIP *string `json:"accessIp,omitempty" tf:"access_ip,omitempty"`

	// Indicates the DDM access port.
	AccessPort *string `json:"accessPort,omitempty" tf:"access_port,omitempty"`

	// Indicates the availability zone of DDM instance.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the list of availability zones.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Indicates the creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the Engine ID of the instance.
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// Specifies the flavor ID of the instance nodes.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the DDM instance name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  4 to 64 characters long. It must start with a letter and it can only contain etters, digits, and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the disk encryption ID of the instance.
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Indicates the DDM nodes status.
	NodeStatus *string `json:"nodeStatus,omitempty" tf:"node_status,omitempty"`

	// Indicates the instance nodes information. Structure is documented below.
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Specifies the parameters group ID.
	ParamGroupID *string `json:"paramGroupId,omitempty" tf:"param_group_id,omitempty"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default).
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// The region of the DDM instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group ID of the DDM instance.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Indicates the DDM instance status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the subnet Network ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the timezone. Valid formats are UTC+12:00, UTC+11:00, ... ,UTC+01:00, UTC, UTC-01:00, ... , UTC-11:00, UTC-12:00
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Indicates the update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the VPC ID.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type InstanceV1Parameters struct {

	// Specifies the list of availability zones.
	// +kubebuilder:validation:Optional
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// Specifies the Engine ID of the instance.
	// +kubebuilder:validation:Optional
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// Specifies the flavor ID of the instance nodes.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the DDM instance name. The DDM instance name of the same
	// type is unique in the same tenant. It can be  4 to 64 characters long. It must start with a letter and it can only contain etters, digits, and hyphens (-).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the disk encryption ID of the instance.
	// +kubebuilder:validation:Optional
	NodeNum *float64 `json:"nodeNum,omitempty" tf:"node_num,omitempty"`

	// Specifies the parameters group ID.
	// +kubebuilder:validation:Optional
	ParamGroupID *string `json:"paramGroupId,omitempty" tf:"param_group_id,omitempty"`

	// Specifies the Administrator password of the DDM instance. it can be 8 to 32 characters long. It must be a combination of uppercase letters, lowercase letters, digits, and the following special characters: ~ ! @ # % ^ * - _ = + ?. It must be a strong password to improve security and prevent security risks such as brute force cracking.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies whether data stored on the associated DB instances is deleted. The value can be: true or false (default).
	// +kubebuilder:validation:Optional
	PurgeRDSOnDelete *bool `json:"purgeRdsOnDelete,omitempty" tf:"purge_rds_on_delete,omitempty"`

	// Specifies the security group ID of the DDM instance.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the subnet Network ID.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the timezone. Valid formats are UTC+12:00, UTC+11:00, ... ,UTC+01:00, UTC, UTC-01:00, ... , UTC-11:00, UTC-12:00
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Specifies the Administrator username of the DDM instance. It can be 1 to 32 characters long and can contain letters, digits, and underscores (_). It must start with a letter.
	// +kubebuilder:validation:Optional
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`

	// Specifies the VPC ID.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type NodesInitParameters struct {
}

type NodesObservation struct {

	// Indicates the node IP.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Indicates the node port.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Indicates the node status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodesParameters struct {
}

// InstanceV1Spec defines the desired state of InstanceV1
type InstanceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceV1InitParameters `json:"initProvider,omitempty"`
}

// InstanceV1Status defines the observed state of InstanceV1.
type InstanceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceV1 is the Schema for the InstanceV1s API. Manages a DDM Instance resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type InstanceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZones) || (has(self.initProvider) && has(self.initProvider.availabilityZones))",message="spec.forProvider.availabilityZones is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineId) || (has(self.initProvider) && has(self.initProvider.engineId))",message="spec.forProvider.engineId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeNum) || (has(self.initProvider) && has(self.initProvider.nodeNum))",message="spec.forProvider.nodeNum is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subnetId) || (has(self.initProvider) && has(self.initProvider.subnetId))",message="spec.forProvider.subnetId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   InstanceV1Spec   `json:"spec"`
	Status InstanceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1List contains a list of InstanceV1s
type InstanceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV1 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV1_Kind             = "InstanceV1"
	InstanceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV1_Kind}.String()
	InstanceV1_KindAPIVersion   = InstanceV1_Kind + "." + CRDGroupVersion.String()
	InstanceV1_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV1{}, &InstanceV1List{})
}
