// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventNotificationV3InitParameters struct {

	// Specifies the filtering rules for notification.
	// The filter structure is documented below.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// The name of event notification rule. Only letters, digits
	// and underscores (_) are allowed.
	NotificationName *string `json:"notificationName,omitempty" tf:"notification_name,omitempty"`

	// Specifies the list of users whose operations will trigger notifications.
	// Currently, up to 50 users in 10 user groups can be configured. Supported fields:
	NotifyUserList []NotifyUserListInitParameters `json:"notifyUserList,omitempty" tf:"notify_user_list,omitempty"`

	// The operation type of event rules.
	OperationType *string `json:"operationType,omitempty" tf:"operation_type,omitempty"`

	// Specifies an array of operations that will trigger notifications.
	// The operations structure is documented below.
	Operations []OperationsInitParameters `json:"operations,omitempty" tf:"operations,omitempty"`

	// Specifies whether SMN topic is enabled or disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies SMN topic URN that will be used for events notification.
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`
}

type EventNotificationV3Observation struct {

	// Specifies creation time of event notification rule.
	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies the filtering rules for notification.
	// The filter structure is documented below.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique event notification id.
	NotificationID *string `json:"notificationId,omitempty" tf:"notification_id,omitempty"`

	// The name of event notification rule. Only letters, digits
	// and underscores (_) are allowed.
	NotificationName *string `json:"notificationName,omitempty" tf:"notification_name,omitempty"`

	// Specifies the notification type. Current cts version supports only smn type.
	NotificationType *string `json:"notificationType,omitempty" tf:"notification_type,omitempty"`

	// Specifies the list of users whose operations will trigger notifications.
	// Currently, up to 50 users in 10 user groups can be configured. Supported fields:
	NotifyUserList []NotifyUserListObservation `json:"notifyUserList,omitempty" tf:"notify_user_list,omitempty"`

	// The operation type of event rules.
	OperationType *string `json:"operationType,omitempty" tf:"operation_type,omitempty"`

	// Specifies an array of operations that will trigger notifications.
	// The operations structure is documented below.
	Operations []OperationsObservation `json:"operations,omitempty" tf:"operations,omitempty"`

	// Specifies project id of event notification rule.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies whether SMN topic is enabled or disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies SMN topic URN that will be used for events notification.
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`
}

type EventNotificationV3Parameters struct {

	// Specifies the filtering rules for notification.
	// The filter structure is documented below.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// The name of event notification rule. Only letters, digits
	// and underscores (_) are allowed.
	// +kubebuilder:validation:Optional
	NotificationName *string `json:"notificationName,omitempty" tf:"notification_name,omitempty"`

	// Specifies the list of users whose operations will trigger notifications.
	// Currently, up to 50 users in 10 user groups can be configured. Supported fields:
	// +kubebuilder:validation:Optional
	NotifyUserList []NotifyUserListParameters `json:"notifyUserList,omitempty" tf:"notify_user_list,omitempty"`

	// The operation type of event rules.
	// +kubebuilder:validation:Optional
	OperationType *string `json:"operationType,omitempty" tf:"operation_type,omitempty"`

	// Specifies an array of operations that will trigger notifications.
	// The operations structure is documented below.
	// +kubebuilder:validation:Optional
	Operations []OperationsParameters `json:"operations,omitempty" tf:"operations,omitempty"`

	// Specifies whether SMN topic is enabled or disabled.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies SMN topic URN that will be used for events notification.
	// +kubebuilder:validation:Optional
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`
}

type FilterInitParameters struct {

	// Specifies the relationship between multiple rules. The valid values are as follows:
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies an array of filtering rules. It consists of three parts,
	// the first part is the key, the second part is the rule, and the third part is the value,
	// the format is: key != value.
	Rule []*string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type FilterObservation struct {

	// Specifies the relationship between multiple rules. The valid values are as follows:
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies an array of filtering rules. It consists of three parts,
	// the first part is the key, the second part is the rule, and the third part is the value,
	// the format is: key != value.
	Rule []*string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type FilterParameters struct {

	// Specifies the relationship between multiple rules. The valid values are as follows:
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// Specifies an array of filtering rules. It consists of three parts,
	// the first part is the key, the second part is the rule, and the third part is the value,
	// the format is: key != value.
	// +kubebuilder:validation:Optional
	Rule []*string `json:"rule" tf:"rule,omitempty"`
}

type NotifyUserListInitParameters struct {

	// Specifies the IAM user group.
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`

	// Specifies the list with IAM users which belong to user_group.
	UserList []*string `json:"userList,omitempty" tf:"user_list,omitempty"`
}

type NotifyUserListObservation struct {

	// Specifies the IAM user group.
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`

	// Specifies the list with IAM users which belong to user_group.
	UserList []*string `json:"userList,omitempty" tf:"user_list,omitempty"`
}

type NotifyUserListParameters struct {

	// Specifies the IAM user group.
	// +kubebuilder:validation:Optional
	UserGroup *string `json:"userGroup" tf:"user_group,omitempty"`

	// Specifies the list with IAM users which belong to user_group.
	// +kubebuilder:validation:Optional
	UserList []*string `json:"userList" tf:"user_list,omitempty"`
}

type OperationsInitParameters struct {

	// Specifies the resource type of custom operation.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specifies the cloud service. Every service should be provided separately, the value
	// must be the acronym of a cloud service that has been connected with CTS.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// Specifies the list with trace names of custom operation.
	TraceNames []*string `json:"traceNames,omitempty" tf:"trace_names,omitempty"`
}

type OperationsObservation struct {

	// Specifies the resource type of custom operation.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specifies the cloud service. Every service should be provided separately, the value
	// must be the acronym of a cloud service that has been connected with CTS.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// Specifies the list with trace names of custom operation.
	TraceNames []*string `json:"traceNames,omitempty" tf:"trace_names,omitempty"`
}

type OperationsParameters struct {

	// Specifies the resource type of custom operation.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`

	// Specifies the cloud service. Every service should be provided separately, the value
	// must be the acronym of a cloud service that has been connected with CTS.
	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType" tf:"service_type,omitempty"`

	// Specifies the list with trace names of custom operation.
	// +kubebuilder:validation:Optional
	TraceNames []*string `json:"traceNames" tf:"trace_names,omitempty"`
}

// EventNotificationV3Spec defines the desired state of EventNotificationV3
type EventNotificationV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventNotificationV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EventNotificationV3InitParameters `json:"initProvider,omitempty"`
}

// EventNotificationV3Status defines the observed state of EventNotificationV3.
type EventNotificationV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventNotificationV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EventNotificationV3 is the Schema for the EventNotificationV3s API. Manages a CTS Event Notification resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type EventNotificationV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notificationName) || (has(self.initProvider) && has(self.initProvider.notificationName))",message="spec.forProvider.notificationName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operationType) || (has(self.initProvider) && has(self.initProvider.operationType))",message="spec.forProvider.operationType is a required parameter"
	Spec   EventNotificationV3Spec   `json:"spec"`
	Status EventNotificationV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventNotificationV3List contains a list of EventNotificationV3s
type EventNotificationV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventNotificationV3 `json:"items"`
}

// Repository type metadata.
var (
	EventNotificationV3_Kind             = "EventNotificationV3"
	EventNotificationV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventNotificationV3_Kind}.String()
	EventNotificationV3_KindAPIVersion   = EventNotificationV3_Kind + "." + CRDGroupVersion.String()
	EventNotificationV3_GroupVersionKind = CRDGroupVersion.WithKind(EventNotificationV3_Kind)
)

func init() {
	SchemeBuilder.Register(&EventNotificationV3{}, &EventNotificationV3List{})
}
