// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrackerV3InitParameters struct {

	// The OBS bucket name for a tracker.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Specifies the compression type. Default value is gzip.
	// The valid values are as follows:
	CompressType *string `json:"compressType,omitempty" tf:"compress_type,omitempty"`

	// The prefix of a log that needs to be stored in an OBS bucket.
	FilePrefixName *string `json:"filePrefixName,omitempty" tf:"file_prefix_name,omitempty"`

	// Specifies whether to enable trace analysis.
	IsLtsEnabled *bool `json:"isLtsEnabled,omitempty" tf:"is_lts_enabled,omitempty"`

	// Specifies whether the OBS bucket is automatically created by the tracker.
	IsObsCreated *bool `json:"isObsCreated,omitempty" tf:"is_obs_created,omitempty"`

	// Specifies whether to sort the path by cloud service. If this option is enabled,
	// the cloud service name is added to the transfer file path. Default: true.
	IsSortByService *bool `json:"isSortByService,omitempty" tf:"is_sort_by_service,omitempty"`

	// Specifies whether tracker is enabled or disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TrackerV3Observation struct {

	// The OBS bucket name for a tracker.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Specifies the compression type. Default value is gzip.
	// The valid values are as follows:
	CompressType *string `json:"compressType,omitempty" tf:"compress_type,omitempty"`

	// Specifies the cause of the abnormal status, and its value in case of errors.
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// Specifies domain id of the tracker.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// The prefix of a log that needs to be stored in an OBS bucket.
	FilePrefixName *string `json:"filePrefixName,omitempty" tf:"file_prefix_name,omitempty"`

	// Specifies the tracker id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether to enable trace analysis.
	IsLtsEnabled *bool `json:"isLtsEnabled,omitempty" tf:"is_lts_enabled,omitempty"`

	// Specifies whether the OBS bucket is automatically created by the tracker.
	IsObsCreated *bool `json:"isObsCreated,omitempty" tf:"is_obs_created,omitempty"`

	// Specifies whether to sort the path by cloud service. If this option is enabled,
	// the cloud service name is added to the transfer file path. Default: true.
	IsSortByService *bool `json:"isSortByService,omitempty" tf:"is_sort_by_service,omitempty"`

	// Specifies LTS log group name.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// Specifies LTS log stream.
	LogTopicName *string `json:"logTopicName,omitempty" tf:"log_topic_name,omitempty"`

	// Specifies project id of the tracker.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies whether tracker is enabled or disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tracker name. Currently, only tracker system is available.
	TrackerName *string `json:"trackerName,omitempty" tf:"tracker_name,omitempty"`

	// The tracker type. Currently, only tracker system is available.
	TrackerType *string `json:"trackerType,omitempty" tf:"tracker_type,omitempty"`
}

type TrackerV3Parameters struct {

	// The OBS bucket name for a tracker.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Specifies the compression type. Default value is gzip.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	CompressType *string `json:"compressType,omitempty" tf:"compress_type,omitempty"`

	// The prefix of a log that needs to be stored in an OBS bucket.
	// +kubebuilder:validation:Optional
	FilePrefixName *string `json:"filePrefixName,omitempty" tf:"file_prefix_name,omitempty"`

	// Specifies whether to enable trace analysis.
	// +kubebuilder:validation:Optional
	IsLtsEnabled *bool `json:"isLtsEnabled,omitempty" tf:"is_lts_enabled,omitempty"`

	// Specifies whether the OBS bucket is automatically created by the tracker.
	// +kubebuilder:validation:Optional
	IsObsCreated *bool `json:"isObsCreated,omitempty" tf:"is_obs_created,omitempty"`

	// Specifies whether to sort the path by cloud service. If this option is enabled,
	// the cloud service name is added to the transfer file path. Default: true.
	// +kubebuilder:validation:Optional
	IsSortByService *bool `json:"isSortByService,omitempty" tf:"is_sort_by_service,omitempty"`

	// Specifies whether tracker is enabled or disabled.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// TrackerV3Spec defines the desired state of TrackerV3
type TrackerV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrackerV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrackerV3InitParameters `json:"initProvider,omitempty"`
}

// TrackerV3Status defines the observed state of TrackerV3.
type TrackerV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrackerV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrackerV3 is the Schema for the TrackerV3s API. Manages a CTS Tracker v3 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type TrackerV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   TrackerV3Spec   `json:"spec"`
	Status TrackerV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrackerV3List contains a list of TrackerV3s
type TrackerV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrackerV3 `json:"items"`
}

// Repository type metadata.
var (
	TrackerV3_Kind             = "TrackerV3"
	TrackerV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrackerV3_Kind}.String()
	TrackerV3_KindAPIVersion   = TrackerV3_Kind + "." + CRDGroupVersion.String()
	TrackerV3_GroupVersionKind = CRDGroupVersion.WithKind(TrackerV3_Kind)
)

func init() {
	SchemeBuilder.Register(&TrackerV3{}, &TrackerV3List{})
}
